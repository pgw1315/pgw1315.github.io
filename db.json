{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/images/photo.jpeg","path":"images/photo.jpeg","modified":1,"renderable":0},{"_id":"themes/hexo-theme-matery/source/favicon.png","path":"favicon.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/barrager.css","path":"css/barrager.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/bb.css","path":"css/bb.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","path":"css/gitment.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/matery.css","path":"css/matery.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","path":"css/my-gitalk.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/css/my.css","path":"css/my.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/jquery.barrager.js","path":"js/jquery.barrager.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/matery.js","path":"js/matery.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/js/search.js","path":"js/search.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","path":"medias/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","path":"medias/comment_bg.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","path":"medias/cover.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","path":"medias/icp.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","path":"medias/logo.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","path":"medias/banner/0.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","path":"medias/banner/3.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","path":"medias/banner/2.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","path":"medias/banner/4.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","path":"medias/banner/1.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","path":"medias/banner/5.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","path":"medias/banner/6.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/0.png","path":"medias/barrager/0.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/1.png","path":"medias/barrager/1.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/2.png","path":"medias/barrager/2.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/barrager/close.png","path":"medias/barrager/close.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","path":"medias/featureimages/0.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","path":"medias/featureimages/1.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","path":"medias/featureimages/10.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","path":"medias/featureimages/11.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","path":"medias/featureimages/12.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","path":"medias/featureimages/13.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","path":"medias/featureimages/14.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","path":"medias/featureimages/15.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","path":"medias/featureimages/16.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","path":"medias/featureimages/17.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","path":"medias/featureimages/18.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","path":"medias/featureimages/19.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","path":"medias/featureimages/2.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","path":"medias/featureimages/20.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","path":"medias/featureimages/21.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","path":"medias/featureimages/22.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","path":"medias/featureimages/23.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","path":"medias/featureimages/3.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","path":"medias/featureimages/4.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","path":"medias/featureimages/5.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","path":"medias/featureimages/6.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","path":"medias/featureimages/7.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","path":"medias/featureimages/8.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","path":"medias/featureimages/9.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages_t/0.jpg","path":"medias/featureimages_t/0.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages_t/1.jpg","path":"medias/featureimages_t/1.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages_t/10.jpg","path":"medias/featureimages_t/10.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages_t/11.jpg","path":"medias/featureimages_t/11.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages_t/12.jpg","path":"medias/featureimages_t/12.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages_t/13.jpg","path":"medias/featureimages_t/13.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages_t/14.jpg","path":"medias/featureimages_t/14.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages_t/15.jpg","path":"medias/featureimages_t/15.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages_t/16.jpg","path":"medias/featureimages_t/16.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages_t/17.jpg","path":"medias/featureimages_t/17.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages_t/18.jpg","path":"medias/featureimages_t/18.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages_t/19.jpg","path":"medias/featureimages_t/19.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages_t/2.jpg","path":"medias/featureimages_t/2.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages_t/20.jpg","path":"medias/featureimages_t/20.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages_t/21.jpg","path":"medias/featureimages_t/21.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages_t/22.jpg","path":"medias/featureimages_t/22.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages_t/23.jpg","path":"medias/featureimages_t/23.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages_t/3.jpg","path":"medias/featureimages_t/3.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages_t/4.jpg","path":"medias/featureimages_t/4.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages_t/5.jpg","path":"medias/featureimages_t/5.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages_t/6.jpg","path":"medias/featureimages_t/6.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages_t/7.jpg","path":"medias/featureimages_t/7.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages_t/8.jpg","path":"medias/featureimages_t/8.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/featureimages_t/9.jpg","path":"medias/featureimages_t/9.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","path":"medias/reward/alipay.jpg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","path":"medias/reward/wechat.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","path":"libs/animate/animate.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","path":"libs/aos/aos.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","path":"libs/aos/aos.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js.map","path":"libs/aos/aos.js.map","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","path":"libs/aplayer/APlayer.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","path":"libs/aplayer/APlayer.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","path":"libs/background/canvas-nest.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","path":"libs/background/ribbon-dynamic.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","path":"libs/background/ribbon-refresh.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","path":"libs/background/ribbon.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","path":"libs/cryptojs/crypto-js.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","path":"libs/codeBlock/codeBlockFuction.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","path":"libs/codeBlock/codeCopy.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","path":"libs/codeBlock/codeLang.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","path":"libs/codeBlock/codeShrink.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","path":"libs/dplayer/DPlayer.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","path":"libs/dplayer/DPlayer.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","path":"libs/echarts/echarts.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","path":"libs/gitalk/gitalk.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","path":"libs/gitalk/gitalk.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","path":"libs/gitment/gitment-default.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","path":"libs/gitment/gitment.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","path":"libs/instantpage/instantpage.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","path":"libs/jqcloud/jqcloud-1.0.4.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","path":"libs/jqcloud/jqcloud.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery.min.js","path":"libs/jquery/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","path":"libs/masonry/masonry.pkgd.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","path":"libs/materialize/materialize.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","path":"libs/materialize/materialize.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/minivaline/MiniValine.js","path":"libs/minivaline/MiniValine.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","path":"libs/others/busuanzi.pure.mini.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","path":"libs/others/clicklove.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","path":"libs/scrollprogress/scrollProgress.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.css","path":"libs/prism/prism.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","path":"libs/tocbot/tocbot.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","path":"libs/tocbot/tocbot.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js","path":"libs/twikoo/twikoo.all.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js.LICENSE.txt","path":"libs/twikoo/twikoo.all.min.js.LICENSE.txt","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","path":"libs/valine/Valine.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","path":"libs/valine/av-min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","path":"libs/awesome/css/all.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.eot","path":"libs/awesome/webfonts/fa-brands-400.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.svg","path":"libs/awesome/webfonts/fa-brands-400.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","path":"libs/awesome/webfonts/fa-brands-400.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff","path":"libs/awesome/webfonts/fa-brands-400.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","path":"libs/awesome/webfonts/fa-brands-400.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.eot","path":"libs/awesome/webfonts/fa-regular-400.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.svg","path":"libs/awesome/webfonts/fa-regular-400.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","path":"libs/awesome/webfonts/fa-regular-400.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff","path":"libs/awesome/webfonts/fa-regular-400.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","path":"libs/awesome/webfonts/fa-regular-400.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.eot","path":"libs/awesome/webfonts/fa-solid-900.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.svg","path":"libs/awesome/webfonts/fa-solid-900.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","path":"libs/awesome/webfonts/fa-solid-900.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff","path":"libs/awesome/webfonts/fa-solid-900.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","path":"libs/awesome/webfonts/fa-solid-900.woff2","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","path":"libs/lightGallery/css/lightgallery.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.eot","path":"libs/lightGallery/fonts/lg.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","path":"libs/lightGallery/fonts/lg.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","path":"libs/lightGallery/fonts/lg.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","path":"libs/lightGallery/fonts/lg.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","path":"libs/lightGallery/js/lightgallery-all.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","path":"libs/lightGallery/img/loading.gif","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","path":"libs/lightGallery/img/video-play.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","path":"libs/lightGallery/img/vimeo-play.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","path":"libs/lightGallery/img/youtube-play.png","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","path":"libs/share/css/share.min.css","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","path":"libs/share/fonts/iconfont.eot","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","path":"libs/share/fonts/iconfont.svg","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","path":"libs/share/fonts/iconfont.ttf","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","path":"libs/share/fonts/iconfont.woff","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","path":"libs/share/js/jquery.share.min.js","modified":1,"renderable":1},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","path":"libs/share/js/social-share.min.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"3efa4bd965ba832d5fb43f7769986844c55eaa35","modified":1636951019393},{"_id":"source/404/index.md","hash":"d8941d95ca8cfbefd576e208b21116cdb53fee86","modified":1633186813886},{"_id":"source/_data/friends.json","hash":"d89ab3aa1224b250d9c186884dab4d852418e41d","modified":1633865106643},{"_id":"source/about/index.md","hash":"a6af6b4554f3b1eb8bd952f734ba135fead32316","modified":1633186956985},{"_id":"source/_posts/.DS_Store","hash":"f459a21cfed4cab8f7a3ba86c4883de9eb55ae02","modified":1637199524921},{"_id":"source/_posts/CentOS7-定时计划任务设置.md","hash":"35e74b6568bdefe7a7a9129b6fc67e7d4f80cede","modified":1636231379402},{"_id":"source/_posts/CentOS7-yum安装python3-6.md","hash":"58594f4d4088acb6a81ee3d29645aa9a386c1e88","modified":1635908125517},{"_id":"source/_posts/Centos7-安装Chrome无GUI运行selenium-chromedriver.md","hash":"c81d5ab6ea4e72136557fc7508c0c4d7c4d26253","modified":1635906607811},{"_id":"source/_posts/CentOS使用yum安装ffmpeg工具.md","hash":"40b8bb9ea654fbcfce32d1ccc54236659a9d7eac","modified":1636230892780},{"_id":"source/_posts/IDEA导入-导出Live templates或者其他设置.md","hash":"eeb35db936ca0a89dd5b553662bd99c922370b32","modified":1636230180355},{"_id":"source/_posts/Hexo 博客备份与恢复.md","hash":"052b6c060c003ac84f184107dc9e4029674f07b7","modified":1636952893682},{"_id":"source/_posts/Intellij IDEA破解教程，IDEA破解补丁FineAgent，可破解至 2099 年.md","hash":"4e06f145a9d1f29ba4ceb6df988b04f1b2216392","modified":1637200179556},{"_id":"source/_posts/Linux环境变量的设置和查看方法.md","hash":"7586d4167036e79852047b6656c66d1cac09aa5b","modified":1637115687463},{"_id":"source/_posts/Mac下PyCharm快捷键大全.md","hash":"a040b1f34a54a5f07aa3a24c0c801437c0238b9e","modified":1637114655690},{"_id":"source/_posts/MacOS提示“打不开xxx,因为Apple无法检查其是否包含恶意软件...”.md","hash":"2275eccf2127b27d05864d554b3276812f75f673","modified":1636953678388},{"_id":"source/_posts/Python-Scrapy-框架笔记.md","hash":"7aa84620461f0a4765617e59cad1e2dc4d175abf","modified":1633856339044},{"_id":"source/_posts/Python-requests库session会话保存.md","hash":"e0d93e4fc37a130dc8e17a2e953ba757c20da75d","modified":1634483061194},{"_id":"source/_posts/Python-正则表达式笔记.md","hash":"d6eee5725958fdc5d4823d8cff9877020fe3aa56","modified":1633878561226},{"_id":"source/_posts/Python-生成随机数、随机字符串.md","hash":"f34dde8ed26ba20859e7a20cb83a8d66e715afdb","modified":1634482751098},{"_id":"source/_posts/Python3的URL编码解码.md","hash":"371a938650abbb91533e53035a0a47e7bc437e20","modified":1636230330813},{"_id":"source/_posts/Python判断当前操作系统类型以及os-sys-platform模块简介.md","hash":"5983006feda012e296802520e09f4abcca2a6608","modified":1636231524355},{"_id":"source/_posts/Python3-UnicodeEncodeError 'ascii' codec can't encode characters in position 0-1.md","hash":"c88a8d51635c21895a577e35f0c11d49e6aa7827","modified":1636951568639},{"_id":"source/_posts/Python图像处理库PIL中图像格式转换（一）.md","hash":"8debb27456b5b6ec822fc4a93d28eaca580b45fc","modified":1636232337119},{"_id":"source/_posts/Python遍历文件夹的两种方法.md","hash":"910a1df928c4027079756f287bde321f7b946ea4","modified":1636227602838},{"_id":"source/_posts/python- 获取 后缀名-扩展名- - 文件名.md","hash":"41ed15d1c719284c131a292781b4aa7086417620","modified":1636951527635},{"_id":"source/_posts/music-tag · PyPI.md","hash":"3c1b8f930f126021af986e593d11ece6e6309b86","modified":1636952034201},{"_id":"source/_posts/python-把-u开头的unicode转中文.md","hash":"8277f399f38658ae8735f8826c49a879e6bb6b18","modified":1634482828778},{"_id":"source/_posts/【Python】类对象自动生成get,set方法.md","hash":"fec440b5a3c1657b266bf99c3b7a2975e395de52","modified":1636227797261},{"_id":"source/_posts/免费好用的『电子书』下载网站分享.md","hash":"ac84da1f37ebd5f2ec69f125a14613373f70e5e5","modified":1633857117256},{"_id":"source/_posts/宝塔面板屏蔽、去除、解决强制绑定手机账号.md","hash":"068d85eb2302d6e1de0400a8a55f721d3b3b6ed3","modified":1635003326846},{"_id":"source/_posts/整理最全的 python 之markdown与HTML的互转的几个模块.md","hash":"0619c95a63063299d12ca50a40b5eb7e31e67baa","modified":1636229734746},{"_id":"source/categories/index.md","hash":"57974cb8107db54818077da09cd4851bfdac9716","modified":1633186924629},{"_id":"source/_posts/给Linux安装中文字体（解决Selenium截图出现乱码框）.md","hash":"2f9317dd887cd3b19be612cea1fa5416a04f5db7","modified":1635907140724},{"_id":"source/_posts/用python批量修改音频ID3等标签.md","hash":"ae962019e3b60681e40d03e2d74d3f6cd00e69cf","modified":1636234421239},{"_id":"source/contact/index.md","hash":"62694500de4ba255a21cc7662c94f32146e07460","modified":1633857058289},{"_id":"source/_posts/正则表达式的【贪婪匹配】和【懒惰匹配】.md","hash":"98bda6adcf75a2d6687e8748afdd1c73dd34d496","modified":1634479748106},{"_id":"source/friends/index.md","hash":"2be114a59665f3f4e39e39e1db1173e98d7b84c4","modified":1633187151540},{"_id":"source/images/.DS_Store","hash":"05a3f94764cc86f8ca3d816ec9b0e9c52b510aef","modified":1633865115521},{"_id":"source/images/photo.jpeg","hash":"101426652eefc43cb7977755a7bb88f2d53c1235","modified":1633864624223},{"_id":"source/tags/index.md","hash":"1623fb1667187d1cffbc8bd481b5329da3976f77","modified":1633857025774},{"_id":"themes/hexo-theme-matery/CHANGELOG.md","hash":"084ec8b110a20170d08a0aa5fd8accf601051835","modified":1633182968770},{"_id":"themes/hexo-theme-matery/LICENSE","hash":"7df059597099bb7dcf25d2a9aedfaf4465f72d8d","modified":1633182968770},{"_id":"themes/hexo-theme-matery/README.md","hash":"f50b34366f39675cc225c73d662c87ed4c6347a2","modified":1637118616073},{"_id":"themes/hexo-theme-matery/.DS_Store","hash":"47fa4bb978075a40d19b4a7588c1385244877aba","modified":1637119397219},{"_id":"themes/hexo-theme-matery/layout/404.ejs","hash":"36f8d3e530e8144bf80d0772284edd9b0da362fe","modified":1633182968772},{"_id":"themes/hexo-theme-matery/README_CN.md","hash":"a2267aed16d52f4adeb13f555d36d076855387af","modified":1633182968771},{"_id":"themes/hexo-theme-matery/_config.yml","hash":"bfd376344fb45154dc8b737bf761a09e8e03c9d7","modified":1633879298098},{"_id":"themes/hexo-theme-matery/layout/about.ejs","hash":"99a74316aed478efb0db823c4460ee2e660f101c","modified":1633182968783},{"_id":"themes/hexo-theme-matery/layout/bb.ejs","hash":"21959d702f17a3d98b716daf44c8b5eecd59c7c5","modified":1633182968783},{"_id":"themes/hexo-theme-matery/layout/categories.ejs","hash":"8e54665cc25d7c333da7d9f312987190be6215da","modified":1633182968784},{"_id":"themes/hexo-theme-matery/layout/archive.ejs","hash":"cdac701de8370f9f3794a0eed4165983993a1ca7","modified":1633182968783},{"_id":"themes/hexo-theme-matery/layout/contact.ejs","hash":"a777733e03d954ac265a3d0523245bd191732130","modified":1633182968784},{"_id":"themes/hexo-theme-matery/layout/category.ejs","hash":"00019bca11fb46477f22017cb1f5ad8444da0580","modified":1633182968784},{"_id":"themes/hexo-theme-matery/layout/friends.ejs","hash":"51e5369ec6b017cc702a8d957fc052c59dd4c3d7","modified":1633182968784},{"_id":"themes/hexo-theme-matery/layout/layout.ejs","hash":"4bfb9e946a90724fc8a902efe404c7b20549a38c","modified":1633182968785},{"_id":"themes/hexo-theme-matery/layout/index.ejs","hash":"f421840a8076ebe6a53c85483d6a8e8634af9cc0","modified":1633182968785},{"_id":"themes/hexo-theme-matery/layout/post.ejs","hash":"90b5a4c1f70e4756db569c15a7c6cad0c77c4500","modified":1633182968785},{"_id":"themes/hexo-theme-matery/layout/tag.ejs","hash":"85a4b05bd8a6ad0f17ff2e97dae56949b379c204","modified":1633182968785},{"_id":"themes/hexo-theme-matery/layout/tags.ejs","hash":"cf9517aa6a0111355121f44615d6923e312283c7","modified":1633182968786},{"_id":"themes/hexo-theme-matery/languages/default.yml","hash":"bb583b880bebd29bdba0487068db60b37c2fdebf","modified":1633182968772},{"_id":"themes/hexo-theme-matery/languages/zh-CN.yml","hash":"a191ac31cdeed997713cb031e46be1c5171822cd","modified":1633182968772},{"_id":"themes/hexo-theme-matery/languages/zh-HK.yml","hash":"51c06005927e8bde5b3e23353d2bf2c32ed855f3","modified":1633182968772},{"_id":"themes/hexo-theme-matery/source/.DS_Store","hash":"17e1487e034cd7353f49729e71680b959debf99b","modified":1637121437719},{"_id":"themes/hexo-theme-matery/layout/_partial/back-top.ejs","hash":"47ee36a042bb6d52bbe1d0f329637e8ffcf1d0aa","modified":1633182968773},{"_id":"themes/hexo-theme-matery/source/favicon.png","hash":"774fee8c6d0be9dbb010b20f36c06848d06e3da0","modified":1633182968788},{"_id":"themes/hexo-theme-matery/layout/_partial/background.ejs","hash":"aef6edeeb11209831a11d8c7f5d59992e2573335","modified":1633182968773},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-analytics.ejs","hash":"3bbcdb474ca1dcad514bdc4b7763e17c55df04fd","modified":1633182968773},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover-content.ejs","hash":"c35e4254ff0738878f65251a657b4fdcafc4b270","modified":1633182968774},{"_id":"themes/hexo-theme-matery/layout/_partial/bg-cover.ejs","hash":"02191109712f61c0e487b8f0b8466597181a9004","modified":1633182968774},{"_id":"themes/hexo-theme-matery/layout/_partial/baidu-push.ejs","hash":"2cebcc5ea3614d7f76ec36670e68050cbe611202","modified":1633182968773},{"_id":"themes/hexo-theme-matery/layout/_partial/disqus.ejs","hash":"b2dc2c8b5ed56815e55cc2ea54a6dc4eeba2375d","modified":1633182968774},{"_id":"themes/hexo-theme-matery/layout/_partial/changyan.ejs","hash":"cd919d31564e118c2ee8d5cbfb7d51ee6da15d82","modified":1633182968774},{"_id":"themes/hexo-theme-matery/layout/_partial/gitalk.ejs","hash":"2aa8fbb04b046fa7679092a48372d7e036835dff","modified":1633182968775},{"_id":"themes/hexo-theme-matery/layout/_partial/footer.ejs","hash":"5ad05cdc0544d77f0058b9faeb1742628b61d002","modified":1633182968775},{"_id":"themes/hexo-theme-matery/layout/_partial/google-analytics.ejs","hash":"5f4992205617da5f8cc5863c62b5ec46e414e2fb","modified":1633182968776},{"_id":"themes/hexo-theme-matery/layout/_partial/gitment.ejs","hash":"90f6218512ef2eab63ada7ad2fc766ae635a2297","modified":1633182968775},{"_id":"themes/hexo-theme-matery/layout/_partial/header.ejs","hash":"59e38c70f3d8e7165e686e5e84a627835f4321b0","modified":1633182968776},{"_id":"themes/hexo-theme-matery/layout/_partial/github-link.ejs","hash":"3aeb581bd78ab8e15b858e4c44c03bcf92f20b9e","modified":1633182968775},{"_id":"themes/hexo-theme-matery/layout/_partial/head.ejs","hash":"3b725258ccdfd193d8aae24c726a9a3a2a924a84","modified":1633182968776},{"_id":"themes/hexo-theme-matery/layout/_partial/index-cover.ejs","hash":"85f0ef1c390694a1661e77f44a3ed76555099385","modified":1633182968776},{"_id":"themes/hexo-theme-matery/layout/_partial/minivaline.ejs","hash":"738b83cd90fe1b26971d803fc89c56193323da1e","modified":1633182968777},{"_id":"themes/hexo-theme-matery/layout/_partial/livere.ejs","hash":"9c3401b42ea7f26410a5593bae93ada7e57b43be","modified":1633182968776},{"_id":"themes/hexo-theme-matery/layout/_partial/mobile-nav.ejs","hash":"52de0cf3ce13a3477b0a1659d2b8aa41db1f622d","modified":1633182968777},{"_id":"themes/hexo-theme-matery/layout/_partial/paging.ejs","hash":"e2df12cf92a82b1a7a7add2eac1db1d954bc5511","modified":1633182968777},{"_id":"themes/hexo-theme-matery/layout/_partial/navigation.ejs","hash":"cda18036a6c782dee122a33f3bba759f3377a68c","modified":1633182968777},{"_id":"themes/hexo-theme-matery/layout/_partial/post-cover.ejs","hash":"d1c873c5de54498c722e155aadb8c0ec39485dfa","modified":1633182968777},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail-toc.ejs","hash":"3ff94aff01936242a9f4e1f31adb9b43bfab8d53","modified":1633182968778},{"_id":"themes/hexo-theme-matery/layout/_partial/post-statis.ejs","hash":"04889f9031743c6b081d02fa4027b0dbfcc45ecf","modified":1633182968778},{"_id":"themes/hexo-theme-matery/layout/_partial/post-detail.ejs","hash":"4002adc615f6d3959993dcb62004a07adfc3fe4f","modified":1633182968778},{"_id":"themes/hexo-theme-matery/layout/_partial/prev-next.ejs","hash":"c76b78782ea82340104fccc089417572e0adece4","modified":1633182968778},{"_id":"themes/hexo-theme-matery/layout/_partial/reprint-statement.ejs","hash":"0ce3f9361f558b99cc2f059c5e50b0e2a152ae38","modified":1633182968779},{"_id":"themes/hexo-theme-matery/layout/_partial/reward.ejs","hash":"ffc55bc7e73bc698bfc58d8e3780c336b83282cf","modified":1633182968779},{"_id":"themes/hexo-theme-matery/layout/_partial/search.ejs","hash":"150529c9fb9aa8ddb42ec3e02645d301faa2503b","modified":1633182968779},{"_id":"themes/hexo-theme-matery/layout/_partial/social-link.ejs","hash":"6f871bd3a70f720e4e451f1f4f625cbc6d8994a4","modified":1633182968779},{"_id":"themes/hexo-theme-matery/layout/_partial/share.ejs","hash":"c941730a2471d6aab367cbb6e09ed08b56c83143","modified":1633182968779},{"_id":"themes/hexo-theme-matery/layout/_widget/artitalk.ejs","hash":"b14e486f12b9ac42a273b80e4d785fcb94cf04b2","modified":1633182968780},{"_id":"themes/hexo-theme-matery/layout/_partial/twikoo.ejs","hash":"f9cb8c82b9d2a7cdb644e10718f1cdeb9400414c","modified":1633182968780},{"_id":"themes/hexo-theme-matery/layout/_partial/valine.ejs","hash":"045f3aaade1dc6749a1f824b0405b5fdb9e041e4","modified":1633182968780},{"_id":"themes/hexo-theme-matery/layout/_widget/category-cloud.ejs","hash":"1b3df1009234c0112424b497b18b4ad8240b3bc7","modified":1633182968780},{"_id":"themes/hexo-theme-matery/layout/_widget/category-radar.ejs","hash":"1d8747fda89a0b2ca3c7008867cbfeecad0578a6","modified":1633182968781},{"_id":"themes/hexo-theme-matery/layout/_widget/dream.ejs","hash":"9a472ad5591100cdb65d0df9d01034163bd6dd9d","modified":1633182968781},{"_id":"themes/hexo-theme-matery/layout/_widget/music.ejs","hash":"e9e3e327d5de9d7aeadbde32e1d558652d9e9195","modified":1633182968781},{"_id":"themes/hexo-theme-matery/layout/_widget/my-skills.ejs","hash":"89a0092df72d23093128f2fbbdc8ca7f83ebcfd9","modified":1633182968782},{"_id":"themes/hexo-theme-matery/layout/_widget/my-gallery.ejs","hash":"65a2d2f9722f84c7fd98f6bdf79087a14848ebd8","modified":1633182968781},{"_id":"themes/hexo-theme-matery/layout/_widget/my-projects.ejs","hash":"ef60b64021fa349b0048425d858dfcf6c906fede","modified":1633182968781},{"_id":"themes/hexo-theme-matery/layout/_widget/post-calendar.ejs","hash":"48821e644bc73553d7c5c56d2e8ee111a70cd776","modified":1633182968782},{"_id":"themes/hexo-theme-matery/layout/_widget/post-charts.ejs","hash":"ab5f986f428215941aeaa0c88aefd440c47d3bcf","modified":1633182968782},{"_id":"themes/hexo-theme-matery/layout/_widget/recommend.ejs","hash":"8551137e94ca4e2e3b8b63d5626255884cb60cb5","modified":1633182968782},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-cloud.ejs","hash":"fc42b72cddc231f7485cdc1fd6852b66be6add26","modified":1633182968782},{"_id":"themes/hexo-theme-matery/layout/_widget/tag-wordcloud.ejs","hash":"487aacb2454d6bf0d21cdb07ddd1fd5ddbca9038","modified":1633182968783},{"_id":"themes/hexo-theme-matery/layout/_widget/video.ejs","hash":"5e5ec78f8ab229d54786ef2e0ea2864af2dc459f","modified":1633182968783},{"_id":"themes/hexo-theme-matery/source/css/barrager.css","hash":"862879d9313ed8d4c721fa32ef8f94ac2f0a28ae","modified":1633182968786},{"_id":"themes/hexo-theme-matery/source/css/bb.css","hash":"aa15633888c7cf9baea8bb48d796c68b57cf14bf","modified":1633182968787},{"_id":"themes/hexo-theme-matery/source/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1633182968788},{"_id":"themes/hexo-theme-matery/source/css/matery.css","hash":"895a2a70a9bf48de9a2a668168aff99d60840cf2","modified":1633182968788},{"_id":"themes/hexo-theme-matery/source/js/matery.js","hash":"b86de5fe3e9766b7ff80df12ea41c3a9e30825f7","modified":1633182968789},{"_id":"themes/hexo-theme-matery/source/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1633182968787},{"_id":"themes/hexo-theme-matery/source/css/my-gitalk.css","hash":"af18dd29e58642c18bab9b89541767b494c468dd","modified":1633182968788},{"_id":"themes/hexo-theme-matery/source/js/jquery.barrager.js","hash":"19c8b2498ca1083e537f7f443172970912107f83","modified":1633182968789},{"_id":"themes/hexo-theme-matery/source/js/search.js","hash":"5caa2d6e3d34c334ac68dfaafc81a583d6123382","modified":1633182968789},{"_id":"themes/hexo-theme-matery/source/medias/.DS_Store","hash":"c759eebf3bcc3cad6406c8a9b931868ebab30b85","modified":1637121339323},{"_id":"themes/hexo-theme-matery/source/medias/logo.png","hash":"d9095f5ea8719374d9d1ff020279426f5b2a1396","modified":1633182968877},{"_id":"themes/hexo-theme-matery/source/medias/avatar.jpg","hash":"2a6287308628881ce27b9a7de53ba15c2be00d02","modified":1633182968851},{"_id":"themes/hexo-theme-matery/source/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1633182968877},{"_id":"themes/hexo-theme-matery/source/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1633182968861},{"_id":"themes/hexo-theme-matery/source/libs/.DS_Store","hash":"7a1c6050903b1fae8fb7d05f1dd59da21e7560c2","modified":1637114030318},{"_id":"themes/hexo-theme-matery/source/medias/barrager/0.png","hash":"b30416fd3b3aec5af3fa90823a7e2e9c0af4cda8","modified":1633182968860},{"_id":"themes/hexo-theme-matery/source/medias/barrager/2.png","hash":"52b2b13373fe611ad2327b9b40426d6dc05b69cd","modified":1633182968861},{"_id":"themes/hexo-theme-matery/source/medias/barrager/1.png","hash":"b8c211690dba3addedfe7b928e3936cd487df0d6","modified":1633182968861},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1633182968864},{"_id":"themes/hexo-theme-matery/source/medias/barrager/close.png","hash":"045346df61ee01abe5018c5d9ba805d2831ce7b1","modified":1633182968861},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1633182968867},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1633182968868},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1633182968866},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1633182968870},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1633182968872},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1633182968872},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1633182968873},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1633182968871},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1633182968874},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1633182968875},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1633182968876},{"_id":"themes/hexo-theme-matery/source/medias/featureimages_t/0.jpg","hash":"b4ba63457db38e56dd91c87ceaa07aed9852feaa","modified":1634482181697},{"_id":"themes/hexo-theme-matery/source/medias/featureimages_t/.DS_Store","hash":"6f2151183b23e454f623fe07e31a926143690fe1","modified":1637119986919},{"_id":"themes/hexo-theme-matery/source/medias/featureimages_t/1.jpg","hash":"a81096e94300f0dba3a18ced74d9345228685ec6","modified":1634481130183},{"_id":"themes/hexo-theme-matery/source/medias/featureimages_t/11.jpg","hash":"2d58d350e305dd116e035dea7cd208be0faf6795","modified":1634481694091},{"_id":"themes/hexo-theme-matery/source/medias/featureimages_t/12.jpg","hash":"e57290e433711e60daa8cec479d0b7365329481c","modified":1634481668552},{"_id":"themes/hexo-theme-matery/source/medias/featureimages_t/13.jpg","hash":"d0880d29a18e67b1db830882ad8457f403e81735","modified":1634481913944},{"_id":"themes/hexo-theme-matery/source/medias/featureimages_t/14.jpg","hash":"5d0e439c1e655a5c34c8f3acb2c7a0ab82da7f76","modified":1634481018224},{"_id":"themes/hexo-theme-matery/source/medias/featureimages_t/15.jpg","hash":"71607660f5b0e28792a926edd706905e6f41c84f","modified":1634480942308},{"_id":"themes/hexo-theme-matery/source/medias/featureimages_t/16.jpg","hash":"0c7e4d32efbcdd0a0cb8046747558c05e7f51059","modified":1634481147188},{"_id":"themes/hexo-theme-matery/source/medias/featureimages_t/17.jpg","hash":"fb83293bc384d347818f97a869840c73e074e23e","modified":1634481156613},{"_id":"themes/hexo-theme-matery/source/medias/featureimages_t/18.jpg","hash":"7bba9b0ed4ff90794f82ba40f9e9e5b8ada69375","modified":1634481246945},{"_id":"themes/hexo-theme-matery/source/medias/featureimages_t/19.jpg","hash":"1961eb0c649e74e0a49c485ef727cab920d63c87","modified":1634481171467},{"_id":"themes/hexo-theme-matery/source/medias/featureimages_t/20.jpg","hash":"9cfd58ef1a183b6266d26e4cda1843988d63b078","modified":1637119440260},{"_id":"themes/hexo-theme-matery/source/medias/featureimages_t/23.jpg","hash":"67f9de2e9a063cbcc58b066850a09f5318f67b2e","modified":1634481826388},{"_id":"themes/hexo-theme-matery/source/medias/featureimages_t/2.jpg","hash":"d375f3bf786f6e7142ef66a1fc412c5af877df98","modified":1637119986719},{"_id":"themes/hexo-theme-matery/source/medias/featureimages_t/21.jpg","hash":"18cbe3229ef6cda739f6349ec11f0480ab1fa11d","modified":1637119708618},{"_id":"themes/hexo-theme-matery/source/medias/featureimages_t/3.jpg","hash":"93f8c99a3d03ad84ee09397b07687a71177e4cc7","modified":1634481427160},{"_id":"themes/hexo-theme-matery/source/medias/featureimages_t/22.jpg","hash":"8d97d724d705ade0ac40880ff1f1bbf2f4dd9c20","modified":1637119828549},{"_id":"themes/hexo-theme-matery/source/medias/featureimages_t/4.jpg","hash":"3884abff0eac09e132c691170865140aed0a7500","modified":1634481713057},{"_id":"themes/hexo-theme-matery/source/medias/featureimages_t/5.jpg","hash":"b4ba63457db38e56dd91c87ceaa07aed9852feaa","modified":1634481032941},{"_id":"themes/hexo-theme-matery/source/medias/featureimages_t/6.jpg","hash":"1871340c076b099de8c9efd665d2b038f6da2695","modified":1634481397682},{"_id":"themes/hexo-theme-matery/source/medias/featureimages_t/9.jpg","hash":"508ee51a4cbfbfe955193df466e109d5532d3db0","modified":1634481568910},{"_id":"themes/hexo-theme-matery/source/medias/featureimages_t/8.jpg","hash":"2d69e011e2084e98b48f77bc83b6eec160fe020c","modified":1634480987821},{"_id":"themes/hexo-theme-matery/source/medias/reward/alipay.jpg","hash":"1abc719b95d1b26f1f898e6b0a9b7609146e332f","modified":1633182968877},{"_id":"themes/hexo-theme-matery/source/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1633182968790},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1633182968790},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1633182968790},{"_id":"themes/hexo-theme-matery/source/medias/reward/wechat.png","hash":"fe93385aa92fe328e01c8221a80b039be9e4e140","modified":1633182968878},{"_id":"themes/hexo-theme-matery/source/medias/featureimages_t/7.jpg","hash":"4a58d00bb7e4c93298753ffb3bc3b18234d5f85e","modified":1637120024456},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1633182968791},{"_id":"themes/hexo-theme-matery/source/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1633182968818},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1633182968818},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1633182968818},{"_id":"themes/hexo-theme-matery/source/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1633182968791},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1633182968819},{"_id":"themes/hexo-theme-matery/source/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1633182968818},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1633182968819},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1633182968819},{"_id":"themes/hexo-theme-matery/source/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1633182968820},{"_id":"themes/hexo-theme-matery/source/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1633182968819},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1633182968820},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.css","hash":"61d71cb30f5f34cbb1f2b5bc469784d6cb908c22","modified":1633182968827},{"_id":"themes/hexo-theme-matery/source/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1633182968833},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1633182968832},{"_id":"themes/hexo-theme-matery/source/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1633182968838},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1633182968833},{"_id":"themes/hexo-theme-matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1633182968833},{"_id":"themes/hexo-theme-matery/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1633182968841},{"_id":"themes/hexo-theme-matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1633182968841},{"_id":"themes/hexo-theme-matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1633182968842},{"_id":"themes/hexo-theme-matery/source/libs/minivaline/MiniValine.js","hash":"f7f6cdc1b22297e02334e304444e9a8351acb455","modified":1633182968841},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.css","hash":"9ab8ef576c9a57115194152e79cca79b0a41dd70","modified":1633182968845},{"_id":"themes/hexo-theme-matery/source/libs/prism/prism.css","hash":"62e5474893dece076534352f564ceabd6e088a5a","modified":1633182968841},{"_id":"themes/hexo-theme-matery/source/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1633182968845},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js.LICENSE.txt","hash":"1e286a31ef472fb864fe2b9502e87df9242df56b","modified":1633182968848},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f6f653b4ea8fc487bdb590d39d5a726258a55f40","modified":1633182968806},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1633182968803},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.ttf","hash":"0f4bd02942a54a6b3200d9078adff88c2812e751","modified":1633182968805},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1633182968806},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1633182968835},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1633182968835},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1633182968837},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1633182968836},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.svg","hash":"9c6632aeec67d3e84a1434884aa801514ff8103b","modified":1633182968835},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1633182968836},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1633182968835},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1633182968836},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1633182968836},{"_id":"themes/hexo-theme-matery/source/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1633182968836},{"_id":"themes/hexo-theme-matery/source/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1633182968842},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1633182968842},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1633182968843},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1633182968843},{"_id":"themes/hexo-theme-matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1633182968843},{"_id":"themes/hexo-theme-matery/source/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1633182968844},{"_id":"themes/hexo-theme-matery/source/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1633182968844},{"_id":"themes/hexo-theme-matery/source/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1633182968852},{"_id":"themes/hexo-theme-matery/source/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1633182968856},{"_id":"themes/hexo-theme-matery/source/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1633182968855},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1633182968862},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1633182968863},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1633182968865},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1633182968866},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1633182968867},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1633182968868},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1633182968869},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1633182968869},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1633182968873},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1633182968871},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1633182968876},{"_id":"themes/hexo-theme-matery/source/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1633182968874},{"_id":"themes/hexo-theme-matery/source/libs/aos/aos.js.map","hash":"2b02b5f0395e04f13cbf043741f856b6aead250f","modified":1637114060964},{"_id":"themes/hexo-theme-matery/source/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1633182968821},{"_id":"themes/hexo-theme-matery/source/libs/jquery/jquery.min.js","hash":"2115753ca5fb7032aec498db7bb5dca624dbe6be","modified":1633182968834},{"_id":"themes/hexo-theme-matery/source/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1633182968832},{"_id":"themes/hexo-theme-matery/source/libs/awesome/css/all.css","hash":"ecc41e32ad2696877a1656749841f3b5543bbe3d","modified":1633182968792},{"_id":"themes/hexo-theme-matery/source/libs/valine/Valine.min.js","hash":"6cbdbf91e1f046dd41267a5ff0691a1fccba99df","modified":1633182968849},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff2","hash":"a46bd47ff0a90b812aafafda587d095cdb844271","modified":1633182968803},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1633182968794},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.ttf","hash":"91cbeeaceb644a971241c08362898599d6d968ce","modified":1633182968802},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1633182968802},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff2","hash":"9c081b88b106c6c04ecb895ba7ba7d3dcb3b55ac","modified":1633182968818},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1633182968817},{"_id":"themes/hexo-theme-matery/source/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1633182968862},{"_id":"themes/hexo-theme-matery/source/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1633182968854},{"_id":"themes/hexo-theme-matery/source/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1633182968858},{"_id":"themes/hexo-theme-matery/source/medias/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1633182968860},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1633182968839},{"_id":"themes/hexo-theme-matery/source/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1633182968840},{"_id":"themes/hexo-theme-matery/source/libs/valine/av-min.js","hash":"541efb9edc1ce425cbe3897cfc25803211fe6a05","modified":1633182968851},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-regular-400.svg","hash":"3d3a49445343d80f3b553e3e3425b9a7bd49acaf","modified":1633182968805},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1633182968808},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.ttf","hash":"9521ed12274c2cbc910cea77657116fcf6545da3","modified":1633182968817},{"_id":"themes/hexo-theme-matery/source/medias/featureimages_t/10.jpg","hash":"f50b095637991508f2c28d65727aeb0e77d381c8","modified":1637119578254},{"_id":"themes/hexo-theme-matery/source/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1633182968857},{"_id":"themes/hexo-theme-matery/source/libs/twikoo/twikoo.all.min.js","hash":"c3f5f0a69b7864e7ef5bbf99fc774bec37947d7c","modified":1633182968848},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-brands-400.svg","hash":"5e2d2a159294576bea69cc3360efb5ffe110ab2d","modified":1633182968800},{"_id":"themes/hexo-theme-matery/source/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1633182968827},{"_id":"themes/hexo-theme-matery/source/libs/gitalk/gitalk.min.js","hash":"564fc7c731d05fa70d71ef853a2c8cc7725739e2","modified":1633182968831},{"_id":"themes/hexo-theme-matery/source/libs/awesome/webfonts/fa-solid-900.svg","hash":"7da88b19e1486f8c968d3cf5ab3f194f01ea17fd","modified":1633182968815},{"_id":"public/search.xml","hash":"ee0dc3be4d5bbd8a3e22aae16b6a8d55f990d6e5","modified":1637200273265},{"_id":"public/404/index.html","hash":"d8028c2795c44eba11fef2552b3d390823c2a3e0","modified":1637200273265},{"_id":"public/categories/index.html","hash":"27176a9d15d4f27e480bb016d56652e5a3663580","modified":1637200273265},{"_id":"public/about/index.html","hash":"125084edda4c7dbae98d6163a4d5cd1d00a98c67","modified":1637200273265},{"_id":"public/friends/index.html","hash":"c62bb39ece3a49d3e3171d41622c6131f6ed7c51","modified":1637200273265},{"_id":"public/tags/index.html","hash":"36a0b9dad8654661e4959e8521ce28d44b468b2f","modified":1637200273265},{"_id":"public/contact/index.html","hash":"69233dbef42289996cf62c3cbb66e50c4596776d","modified":1637200273265},{"_id":"public/2021/11/18/Intellij IDEA破解教程，IDEA破解补丁FineAgent，可破解至 2099 年/index.html","hash":"10e0056b548306c07ddb3bad2be0eab8faee513b","modified":1637200273265},{"_id":"public/2021/11/17/Linux环境变量的设置和查看方法/index.html","hash":"3b34884ac058efb17c95958ef76fd1bd98e54733","modified":1637200273265},{"_id":"public/2021/11/17/Mac下PyCharm快捷键大全/index.html","hash":"b2ad997757884f0f35cef35567795de3e572c7b8","modified":1637200273265},{"_id":"public/2021/11/15/MacOS提示“打不开xxx,因为Apple无法检查其是否包含恶意软件...”/index.html","hash":"7d0d546dd31d5a6fd4ae7ac6c753158cd2668780","modified":1637200273265},{"_id":"public/2021/11/15/Hexo 博客备份与恢复/index.html","hash":"982827e1b0fe135ca02f4649754917c1a3760e0f","modified":1637200273265},{"_id":"public/2021/11/15/music-tag · PyPI/index.html","hash":"153700a42d52361dd8b825a9d0a874df0b1c06b5","modified":1637200273265},{"_id":"public/2021/11/15/python- 获取 后缀名-扩展名- - 文件名/index.html","hash":"0362063b7c74e5e8719cff4b1560635d52d5ec1a","modified":1637200273265},{"_id":"public/2021/11/15/Python3-UnicodeEncodeError 'ascii' codec can't encode characters in position 0-1/index.html","hash":"f5416954b09ca125da28f600c61b1f61b4cd7508","modified":1637200273265},{"_id":"public/2021/11/07/用python批量修改音频ID3等标签/index.html","hash":"27ce33c27228ef2d7ef4965850b711d0dd87e129","modified":1637200273265},{"_id":"public/2021/11/07/Python图像处理库PIL中图像格式转换（一）/index.html","hash":"7f900a5f09767d1720c3ccc74c1a9b26f62fb54e","modified":1637200273265},{"_id":"public/2021/11/07/Python判断当前操作系统类型以及os-sys-platform模块简介/index.html","hash":"006df4d6ab38da6edd36f7a078d114870b390077","modified":1637200273265},{"_id":"public/2021/11/07/CentOS7-定时计划任务设置/index.html","hash":"4b341ddee4338a7d9910201a84648c24045942cf","modified":1637200273265},{"_id":"public/2021/11/07/CentOS使用yum安装ffmpeg工具/index.html","hash":"fb85d0ff1478a7b4fd7426f8a27be790e5a9e6ec","modified":1637200273265},{"_id":"public/2021/11/07/Python3的URL编码解码/index.html","hash":"5e0ae77799b1c34d6f8c2c77c32bcd972d9cf33b","modified":1637200273265},{"_id":"public/2021/11/07/IDEA导入-导出Live templates或者其他设置/index.html","hash":"5d83bf14179d412a31ec595971cedd6808feca8e","modified":1637200273265},{"_id":"public/2021/11/07/整理最全的 python 之markdown与HTML的互转的几个模块/index.html","hash":"545e5911e36f0894a24731bd06170ce62a4b8570","modified":1637200273265},{"_id":"public/2021/11/07/【Python】类对象自动生成get,set方法/index.html","hash":"afa8f2ee4a620aa8a8c818dafce6d7d84f5542e7","modified":1637200273265},{"_id":"public/2021/11/07/Python遍历文件夹的两种方法/index.html","hash":"ae5ebda799156a4b417f447e1e5ebe2259e70d3e","modified":1637200273265},{"_id":"public/2021/11/03/CentOS7-yum安装python3-6/index.html","hash":"5295553a0923547e299832f5268ea3f7af450e9a","modified":1637200273265},{"_id":"public/2021/11/03/给Linux安装中文字体（解决Selenium截图出现乱码框）/index.html","hash":"589dde4c115e53f350da761e8b57b817ea42065f","modified":1637200273265},{"_id":"public/2021/11/03/Centos7-安装Chrome无GUI运行selenium-chromedriver/index.html","hash":"cd4712ee2e4c5684dac489852c336698231a29fc","modified":1637200273265},{"_id":"public/2021/10/23/宝塔面板屏蔽、去除、解决强制绑定手机账号/index.html","hash":"a2dbd64838cd1735be638792760199b99a44b55a","modified":1637200273265},{"_id":"public/2021/10/17/Python-requests库session会话保存/index.html","hash":"19d11a89e2f3ccacd2657dfd5c3b014ff62d5126","modified":1637200273265},{"_id":"public/2021/10/17/Python-生成随机数、随机字符串/index.html","hash":"62f7e614413e2995a32e4a5511ecad4376a35800","modified":1637200273265},{"_id":"public/2021/10/17/python-把-u开头的unicode转中文/index.html","hash":"13df0d61526018bb6bde6c9d7bfaeaa8c199915f","modified":1637200273265},{"_id":"public/2021/10/17/正则表达式的【贪婪匹配】和【懒惰匹配】/index.html","hash":"80a897b701232c76038da9d67fb9b75f92849773","modified":1637200273265},{"_id":"public/2021/10/10/Python-正则表达式笔记/index.html","hash":"c77d5df1c54d0b831dbe2901797eef37a4d369c9","modified":1637200273265},{"_id":"public/2021/10/10/Python-Scrapy-框架笔记/index.html","hash":"756c57279caaae06101b1f42bd60a1a577cd4bc1","modified":1637200273265},{"_id":"public/2021/10/02/免费好用的『电子书』下载网站分享/index.html","hash":"2f7a30a1240652e6389b09d54e6fbbde79e5cd19","modified":1637200273265},{"_id":"public/categories/Linux/index.html","hash":"b099a0df0b92adbfe70d558758c2b323d7554ebf","modified":1637200273265},{"_id":"public/categories/Hexo/index.html","hash":"d46fdc12c9efc295d01d086ea80b18d2b4dd355f","modified":1637200273265},{"_id":"public/categories/工具/index.html","hash":"65b7b42d56caf2405c16d2fc142dc313123f32bd","modified":1637200273265},{"_id":"public/categories/MacOS/index.html","hash":"80e2de95af045f0157961a872fdfc19d6b4ed084","modified":1637200273265},{"_id":"public/categories/Python/index.html","hash":"9e9aa096c36cd59c3d03c768c3f45f0550295688","modified":1637200273265},{"_id":"public/categories/Python/page/2/index.html","hash":"67d414908227e75c80cc14c4551c7de387a2c45a","modified":1637200273265},{"_id":"public/categories/网站推荐/index.html","hash":"43970a89da18bc175b5063c8f841d375370ac686","modified":1637200273265},{"_id":"public/categories/建站/index.html","hash":"0dc8391d99e848a92673ed059983735d6a30be2a","modified":1637200273265},{"_id":"public/categories/正则表达式/index.html","hash":"240a0739bead04ab49034a0cb0c52077876c6259","modified":1637200273265},{"_id":"public/archives/index.html","hash":"965d9e23b1dde8cfd0f629ad2fd9dd41545cd2eb","modified":1637200273265},{"_id":"public/archives/page/2/index.html","hash":"21d5d866fd17fac520272ea82959af1368bc7f6a","modified":1637200273265},{"_id":"public/archives/page/3/index.html","hash":"b420ab054fa6d5a8bbe44e69689c1631858bdad5","modified":1637200273265},{"_id":"public/archives/2021/index.html","hash":"479097b2ef1bcf2dddb92320df88fa75a19d17da","modified":1637200273265},{"_id":"public/archives/2021/page/2/index.html","hash":"5b665dfd7f59d10e4f2622f854312eaedad65399","modified":1637200273265},{"_id":"public/archives/2021/page/3/index.html","hash":"eea9f6701b649a427d18ba4390d85da9c2e2fe8c","modified":1637200273265},{"_id":"public/archives/2021/10/index.html","hash":"cdb8302462eb9f547ad0db7066cbfdda8bf23a93","modified":1637200273265},{"_id":"public/archives/2021/11/index.html","hash":"3dcb9dd970a63833389ddb7fbbc7378b9222c39d","modified":1637200273265},{"_id":"public/archives/2021/11/page/2/index.html","hash":"068667162247d87995ec093376224676c21fc8df","modified":1637200273265},{"_id":"public/index.html","hash":"70cf5a25ea670e8df4db1273c3066a4d11ef243e","modified":1637200273265},{"_id":"public/page/2/index.html","hash":"86d494f924a4bc045b84d29a9acfecf2b52914ef","modified":1637200273265},{"_id":"public/page/3/index.html","hash":"490b29d63726582996dba9d2431a5f327aa1f27a","modified":1637200273265},{"_id":"public/tags/Linux/index.html","hash":"c72bae2c474e8aaa073a72617e5a15490c5999a9","modified":1637200273265},{"_id":"public/tags/Python/index.html","hash":"c5530bd307027ec4e4e9a2e72f1aca1e8e923027","modified":1637200273265},{"_id":"public/tags/Python/page/2/index.html","hash":"1a422fcb3ddacb41009fee29726c35916ff3073b","modified":1637200273265},{"_id":"public/tags/CentOS7/index.html","hash":"5efe490b7783a4f1cd4050114ecfe8de5e08e119","modified":1637200273265},{"_id":"public/tags/定时任务/index.html","hash":"7f3933322fe5523e1b2f74bedded2108c1794650","modified":1637200273265},{"_id":"public/tags/Crontabs/index.html","hash":"68f0d67e712e3ebc919d9e61ef920a3462498f43","modified":1637200273265},{"_id":"public/tags/软件/index.html","hash":"a17d9dc903c46597a22b7362998f091e870be1e6","modified":1637200273265},{"_id":"public/tags/Yum/index.html","hash":"d8cac841bec4e9becc0448b898964fb0a6faa461","modified":1637200273265},{"_id":"public/tags/FFmpeg/index.html","hash":"5eea50a24c58986b4e79bd6a80229ff08089520a","modified":1637200273265},{"_id":"public/tags/Chrome/index.html","hash":"34e000879bfe7493ba719dfe797551d9d5c018b7","modified":1637200273265},{"_id":"public/tags/Selenium/index.html","hash":"1bb6bc2aacb2e63b7a2f66d27266df0f4898ed47","modified":1637200273265},{"_id":"public/tags/Hexo/index.html","hash":"6512af8328b9414da2be881a31b16654ca59795f","modified":1637200273265},{"_id":"public/tags/备份/index.html","hash":"cde1a83928054c568a5206ae73fe8949ab618fa4","modified":1637200273265},{"_id":"public/tags/java/index.html","hash":"51e9eb829b8bc0cefab8a5b93d5931bc5c05ab7b","modified":1637200273265},{"_id":"public/tags/Tools/index.html","hash":"9e62a0de6b452239ac8de942784635121f6c7708","modified":1637200273265},{"_id":"public/tags/IDEA/index.html","hash":"dc4743cbe2b632c7727a16123eda8a21da29010f","modified":1637200273265},{"_id":"public/tags/破解/index.html","hash":"8ed68a1f4376485a8635b02b5aeb730b34f46db7","modified":1637200273265},{"_id":"public/tags/教程/index.html","hash":"b2cc15a294ddee98bf8211242b942bbd9445310f","modified":1637200273265},{"_id":"public/tags/环境变量/index.html","hash":"0dd3f57d1766d94bb8536369f4fc763c0bae2519","modified":1637200273265},{"_id":"public/tags/MacOS/index.html","hash":"28435387bb19e4454c0d9947093a0d7cbce4c8b0","modified":1637200273265},{"_id":"public/tags/笔记/index.html","hash":"bafb9702fc7249ef63bb78e73119ed72f6b4231f","modified":1637200273265},{"_id":"public/tags/Scrapy/index.html","hash":"e85e3bd06397f7a75a00487be40c5f0366dc873a","modified":1637200273265},{"_id":"public/tags/Requests/index.html","hash":"fe281ee072e8979b211c75c9f4ae39f5bf4be517","modified":1637200273265},{"_id":"public/tags/PyCharm/index.html","hash":"462f4e191b7a942c0d625f1a369ce1fc1ec201d0","modified":1637200273265},{"_id":"public/tags/工具/index.html","hash":"e1004fd6b60e7c2131d604447fe9ed5847f05eab","modified":1637200273265},{"_id":"public/tags/快捷键/index.html","hash":"05625cc35f54d9d0f359347c4741e1c34233388f","modified":1637200273265},{"_id":"public/tags/随机数/index.html","hash":"2c2139c4f471d635ab32bc498c5f1060891c3221","modified":1637200273265},{"_id":"public/tags/正则表达式/index.html","hash":"59d782421eea11efae55e4c77aee651c61de350d","modified":1637200273265},{"_id":"public/tags/python/index.html","hash":"c6470394be71f543caff4fbeff956a847a78281c","modified":1637200273265},{"_id":"public/tags/编码/index.html","hash":"056d0acafc122602455df3723d5cabc463e5db75","modified":1637200273265},{"_id":"public/tags/ascii/index.html","hash":"ce484d00ae118c02dadd1e0473bce419b5bd2111","modified":1637200273265},{"_id":"public/tags/URL编码解码/index.html","hash":"98531c608d3dd35a7093c69bc00a46ef4865ec75","modified":1637200273265},{"_id":"public/tags/platform/index.html","hash":"034820d9d8499f8c703848b681b498d995c66647","modified":1637200273265},{"_id":"public/tags/图像处理/index.html","hash":"281f7695dec6733bea9c3adae532a5b7f1cea147","modified":1637200273265},{"_id":"public/tags/PIL从入门到精通/index.html","hash":"a3e5462a861963b1c0423c6bf47f6c11f961e091","modified":1637200273265},{"_id":"public/tags/PIL/index.html","hash":"fb6558510383a13741f2bb6644c27edc0a107327","modified":1637200273265},{"_id":"public/tags/格式转换/index.html","hash":"1306d418bf00da6c88707159d8aee02a10bc21da","modified":1637200273265},{"_id":"public/tags/模式转换/index.html","hash":"02ed601f8d2bb7d73feec65f2c0c10aee7b62b5d","modified":1637200273265},{"_id":"public/tags/文件管理/index.html","hash":"20648f2d7fa1db5fc86c6a79b1b58449ab1239f4","modified":1637200273265},{"_id":"public/tags/文件处理/index.html","hash":"e5f2eb9514ebc2f9bbc2417d401dcce29f691622","modified":1637200273265},{"_id":"public/tags/音乐/index.html","hash":"a82c2e4917f1b9d8baf344edc3a93993a0e3c213","modified":1637200273265},{"_id":"public/tags/Music/index.html","hash":"09874add605ca4cc7ab96a4aa9878353f2d35e3e","modified":1637200273265},{"_id":"public/tags/unicode/index.html","hash":"3517b1ccedf41526d1b68e840634af3e5765af8d","modified":1637200273265},{"_id":"public/tags/面向对象/index.html","hash":"248e08ad602c4d2ac12d34e421ef8c8bd868277d","modified":1637200273265},{"_id":"public/tags/电子书/index.html","hash":"014948c35ef92fc98e9ce150420aea1d221284a6","modified":1637200273265},{"_id":"public/tags/网站推荐/index.html","hash":"4bff2662ef39d15bb797e7c76efd6bbf9822578b","modified":1637200273265},{"_id":"public/tags/宝塔面板/index.html","hash":"0bb15300297ec56374d90ac5d90b0eef3e967234","modified":1637200273265},{"_id":"public/tags/VPS/index.html","hash":"24e1ac6ea95128e166c4c4acad3cfce629807353","modified":1637200273265},{"_id":"public/tags/服务器/index.html","hash":"8554c83faa936cd35a4f132aae29d60acb510f44","modified":1637200273265},{"_id":"public/tags/eyeD3/index.html","hash":"1832633d77f3c05b66b21f7004ed72c31c51a0eb","modified":1637200273265},{"_id":"public/tags/Mp3/index.html","hash":"89eac4c05c68de330fbfebc8d07cdfe32ee49635","modified":1637200273265},{"_id":"public/tags/MarkDown/index.html","hash":"580e268d57dc4836b3af4c56767dd57bae93f9e7","modified":1637200273265},{"_id":"public/images/photo.jpeg","hash":"101426652eefc43cb7977755a7bb88f2d53c1235","modified":1637200273265},{"_id":"public/favicon.png","hash":"774fee8c6d0be9dbb010b20f36c06848d06e3da0","modified":1637200273265},{"_id":"public/medias/avatar.jpg","hash":"2a6287308628881ce27b9a7de53ba15c2be00d02","modified":1637200273265},{"_id":"public/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1637200273265},{"_id":"public/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1637200273265},{"_id":"public/medias/logo.png","hash":"d9095f5ea8719374d9d1ff020279426f5b2a1396","modified":1637200273265},{"_id":"public/medias/barrager/0.png","hash":"b30416fd3b3aec5af3fa90823a7e2e9c0af4cda8","modified":1637200273265},{"_id":"public/medias/barrager/1.png","hash":"b8c211690dba3addedfe7b928e3936cd487df0d6","modified":1637200273265},{"_id":"public/medias/barrager/2.png","hash":"52b2b13373fe611ad2327b9b40426d6dc05b69cd","modified":1637200273265},{"_id":"public/medias/barrager/close.png","hash":"045346df61ee01abe5018c5d9ba805d2831ce7b1","modified":1637200273265},{"_id":"public/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1637200273265},{"_id":"public/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1637200273265},{"_id":"public/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1637200273265},{"_id":"public/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1637200273265},{"_id":"public/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1637200273265},{"_id":"public/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1637200273265},{"_id":"public/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1637200273265},{"_id":"public/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1637200273265},{"_id":"public/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1637200273265},{"_id":"public/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1637200273265},{"_id":"public/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1637200273265},{"_id":"public/medias/featureimages_t/0.jpg","hash":"b4ba63457db38e56dd91c87ceaa07aed9852feaa","modified":1637200273265},{"_id":"public/medias/featureimages_t/1.jpg","hash":"a81096e94300f0dba3a18ced74d9345228685ec6","modified":1637200273265},{"_id":"public/medias/featureimages_t/11.jpg","hash":"2d58d350e305dd116e035dea7cd208be0faf6795","modified":1637200273265},{"_id":"public/medias/featureimages_t/13.jpg","hash":"d0880d29a18e67b1db830882ad8457f403e81735","modified":1637200273265},{"_id":"public/medias/featureimages_t/12.jpg","hash":"e57290e433711e60daa8cec479d0b7365329481c","modified":1637200273265},{"_id":"public/medias/featureimages_t/14.jpg","hash":"5d0e439c1e655a5c34c8f3acb2c7a0ab82da7f76","modified":1637200273265},{"_id":"public/medias/featureimages_t/15.jpg","hash":"71607660f5b0e28792a926edd706905e6f41c84f","modified":1637200273265},{"_id":"public/medias/featureimages_t/16.jpg","hash":"0c7e4d32efbcdd0a0cb8046747558c05e7f51059","modified":1637200273265},{"_id":"public/medias/featureimages_t/18.jpg","hash":"7bba9b0ed4ff90794f82ba40f9e9e5b8ada69375","modified":1637200273265},{"_id":"public/medias/featureimages_t/17.jpg","hash":"fb83293bc384d347818f97a869840c73e074e23e","modified":1637200273265},{"_id":"public/medias/featureimages_t/19.jpg","hash":"1961eb0c649e74e0a49c485ef727cab920d63c87","modified":1637200273265},{"_id":"public/medias/featureimages_t/20.jpg","hash":"9cfd58ef1a183b6266d26e4cda1843988d63b078","modified":1637200273265},{"_id":"public/medias/featureimages_t/2.jpg","hash":"d375f3bf786f6e7142ef66a1fc412c5af877df98","modified":1637200273265},{"_id":"public/medias/featureimages_t/21.jpg","hash":"18cbe3229ef6cda739f6349ec11f0480ab1fa11d","modified":1637200273265},{"_id":"public/medias/featureimages_t/23.jpg","hash":"67f9de2e9a063cbcc58b066850a09f5318f67b2e","modified":1637200273265},{"_id":"public/medias/featureimages_t/22.jpg","hash":"8d97d724d705ade0ac40880ff1f1bbf2f4dd9c20","modified":1637200273265},{"_id":"public/medias/featureimages_t/3.jpg","hash":"93f8c99a3d03ad84ee09397b07687a71177e4cc7","modified":1637200273265},{"_id":"public/medias/featureimages_t/4.jpg","hash":"3884abff0eac09e132c691170865140aed0a7500","modified":1637200273265},{"_id":"public/medias/featureimages_t/5.jpg","hash":"b4ba63457db38e56dd91c87ceaa07aed9852feaa","modified":1637200273265},{"_id":"public/medias/featureimages_t/7.jpg","hash":"4a58d00bb7e4c93298753ffb3bc3b18234d5f85e","modified":1637200273265},{"_id":"public/medias/featureimages_t/8.jpg","hash":"2d69e011e2084e98b48f77bc83b6eec160fe020c","modified":1637200273265},{"_id":"public/medias/featureimages_t/9.jpg","hash":"508ee51a4cbfbfe955193df466e109d5532d3db0","modified":1637200273265},{"_id":"public/medias/reward/alipay.jpg","hash":"1abc719b95d1b26f1f898e6b0a9b7609146e332f","modified":1637200273265},{"_id":"public/medias/reward/wechat.png","hash":"fe93385aa92fe328e01c8221a80b039be9e4e140","modified":1637200273265},{"_id":"public/libs/twikoo/twikoo.all.min.js.LICENSE.txt","hash":"1e286a31ef472fb864fe2b9502e87df9242df56b","modified":1637200273265},{"_id":"public/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1637200273265},{"_id":"public/medias/featureimages_t/6.jpg","hash":"1871340c076b099de8c9efd665d2b038f6da2695","modified":1637200273265},{"_id":"public/libs/awesome/webfonts/fa-regular-400.eot","hash":"439c8afd3373acb4a73135a34e220464a89cd5e2","modified":1637200273265},{"_id":"public/libs/awesome/webfonts/fa-regular-400.ttf","hash":"0f4bd02942a54a6b3200d9078adff88c2812e751","modified":1637200273265},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff","hash":"59439d3ad31d856d78ec3e2bd9f1eafa2c7a581c","modified":1637200273265},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f6f653b4ea8fc487bdb590d39d5a726258a55f40","modified":1637200273265},{"_id":"public/libs/lightGallery/fonts/lg.eot","hash":"54caf05a81e33d7bf04f2e420736ce6f1de5f936","modified":1637200273265},{"_id":"public/libs/lightGallery/fonts/lg.svg","hash":"9c6632aeec67d3e84a1434884aa801514ff8103b","modified":1637200273265},{"_id":"public/libs/lightGallery/fonts/lg.ttf","hash":"f6421c0c397311ae09f9257aa58bcd5e9720f493","modified":1637200273265},{"_id":"public/libs/lightGallery/fonts/lg.woff","hash":"3048de344dd5cad4624e0127e58eaae4b576f574","modified":1637200273265},{"_id":"public/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1637200273265},{"_id":"public/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1637200273265},{"_id":"public/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1637200273265},{"_id":"public/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1637200273265},{"_id":"public/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1637200273265},{"_id":"public/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1637200273265},{"_id":"public/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1637200273265},{"_id":"public/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1637200273265},{"_id":"public/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1637200273265},{"_id":"public/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1637200273265},{"_id":"public/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1637200273265},{"_id":"public/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1637200273265},{"_id":"public/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1637200273265},{"_id":"public/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1637200273265},{"_id":"public/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1637200273265},{"_id":"public/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1637200273265},{"_id":"public/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1637200273265},{"_id":"public/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1637200273265},{"_id":"public/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1637200273265},{"_id":"public/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1637200273265},{"_id":"public/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1637200273265},{"_id":"public/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1637200273265},{"_id":"public/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1637200273265},{"_id":"public/libs/aos/aos.js.map","hash":"2b02b5f0395e04f13cbf043741f856b6aead250f","modified":1637200273265},{"_id":"public/libs/awesome/webfonts/fa-brands-400.eot","hash":"22f9e7d5226408eb2d0a11e118257a3ca22b8670","modified":1637200273265},{"_id":"public/libs/awesome/webfonts/fa-brands-400.ttf","hash":"91cbeeaceb644a971241c08362898599d6d968ce","modified":1637200273265},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff","hash":"18838f5260317da3c5ed29bf844ac8a4f7ad0529","modified":1637200273265},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff2","hash":"a46bd47ff0a90b812aafafda587d095cdb844271","modified":1637200273265},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff2","hash":"9c081b88b106c6c04ecb895ba7ba7d3dcb3b55ac","modified":1637200273265},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff","hash":"92803b8753ceda573c6906774677c5a7081d2fbb","modified":1637200273265},{"_id":"public/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1637200273265},{"_id":"public/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1637200273265},{"_id":"public/medias/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1637200273265},{"_id":"public/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1637200273265},{"_id":"public/libs/awesome/webfonts/fa-solid-900.eot","hash":"cab8e84ae5682d1d556e234df9c790985888def8","modified":1637200273265},{"_id":"public/libs/awesome/webfonts/fa-solid-900.ttf","hash":"9521ed12274c2cbc910cea77657116fcf6545da3","modified":1637200273265},{"_id":"public/libs/awesome/webfonts/fa-regular-400.svg","hash":"3d3a49445343d80f3b553e3e3425b9a7bd49acaf","modified":1637200273265},{"_id":"public/css/barrager.css","hash":"862879d9313ed8d4c721fa32ef8f94ac2f0a28ae","modified":1637200273265},{"_id":"public/css/bb.css","hash":"aa15633888c7cf9baea8bb48d796c68b57cf14bf","modified":1637200273265},{"_id":"public/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1637200273265},{"_id":"public/css/my-gitalk.css","hash":"af18dd29e58642c18bab9b89541767b494c468dd","modified":1637200273265},{"_id":"public/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1637200273265},{"_id":"public/js/jquery.barrager.js","hash":"19c8b2498ca1083e537f7f443172970912107f83","modified":1637200273265},{"_id":"public/js/matery.js","hash":"b86de5fe3e9766b7ff80df12ea41c3a9e30825f7","modified":1637200273265},{"_id":"public/js/search.js","hash":"5caa2d6e3d34c334ac68dfaafc81a583d6123382","modified":1637200273265},{"_id":"public/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1637200273265},{"_id":"public/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1637200273265},{"_id":"public/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1637200273265},{"_id":"public/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1637200273265},{"_id":"public/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1637200273265},{"_id":"public/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1637200273265},{"_id":"public/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1637200273265},{"_id":"public/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1637200273265},{"_id":"public/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1637200273265},{"_id":"public/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1637200273265},{"_id":"public/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1637200273265},{"_id":"public/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1637200273265},{"_id":"public/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1637200273265},{"_id":"public/libs/minivaline/MiniValine.js","hash":"f7f6cdc1b22297e02334e304444e9a8351acb455","modified":1637200273265},{"_id":"public/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1637200273265},{"_id":"public/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1637200273265},{"_id":"public/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1637200273265},{"_id":"public/libs/tocbot/tocbot.css","hash":"9ab8ef576c9a57115194152e79cca79b0a41dd70","modified":1637200273265},{"_id":"public/libs/prism/prism.css","hash":"62e5474893dece076534352f564ceabd6e088a5a","modified":1637200273265},{"_id":"public/libs/tocbot/tocbot.min.js","hash":"5ec27317f0270b8cf6b884c6f12025700b9a565c","modified":1637200273265},{"_id":"public/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1637200273265},{"_id":"public/medias/featureimages_t/10.jpg","hash":"f50b095637991508f2c28d65727aeb0e77d381c8","modified":1637200273265},{"_id":"public/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1637200273265},{"_id":"public/libs/gitalk/gitalk.css","hash":"61d71cb30f5f34cbb1f2b5bc469784d6cb908c22","modified":1637200273265},{"_id":"public/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1637200273265},{"_id":"public/libs/masonry/masonry.pkgd.min.js","hash":"ff940b4ea68368ca0e4d5560cbb79fb147dfc3c5","modified":1637200273265},{"_id":"public/libs/lightGallery/css/lightgallery.min.css","hash":"1b7227237f9785c66062a4811508916518e4132c","modified":1637200273265},{"_id":"public/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1637200273265},{"_id":"public/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1637200273265},{"_id":"public/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1637200273265},{"_id":"public/css/matery.css","hash":"895a2a70a9bf48de9a2a668168aff99d60840cf2","modified":1637200273265},{"_id":"public/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1637200273265},{"_id":"public/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1637200273265},{"_id":"public/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1637200273265},{"_id":"public/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1637200273265},{"_id":"public/libs/lightGallery/js/lightgallery-all.min.js","hash":"9f5ef4bc8a0a3c746ca4f3c3e6d64493b1a977d8","modified":1637200273265},{"_id":"public/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1637200273265},{"_id":"public/libs/valine/Valine.min.js","hash":"6cbdbf91e1f046dd41267a5ff0691a1fccba99df","modified":1637200273265},{"_id":"public/libs/awesome/css/all.css","hash":"ecc41e32ad2696877a1656749841f3b5543bbe3d","modified":1637200273265},{"_id":"public/libs/jquery/jquery.min.js","hash":"2115753ca5fb7032aec498db7bb5dca624dbe6be","modified":1637200273265},{"_id":"public/libs/dplayer/DPlayer.min.js","hash":"c3bad7b265574fab0ae4d45867422ea1cb9d6599","modified":1637200273265},{"_id":"public/libs/awesome/webfonts/fa-brands-400.svg","hash":"5e2d2a159294576bea69cc3360efb5ffe110ab2d","modified":1637200273265},{"_id":"public/libs/materialize/materialize.min.css","hash":"a69d456e3345e7f59cd0d47d1b3e70fd4a496a05","modified":1637200273265},{"_id":"public/libs/valine/av-min.js","hash":"541efb9edc1ce425cbe3897cfc25803211fe6a05","modified":1637200273265},{"_id":"public/libs/awesome/webfonts/fa-solid-900.svg","hash":"7da88b19e1486f8c968d3cf5ab3f194f01ea17fd","modified":1637200273265},{"_id":"public/libs/materialize/materialize.min.js","hash":"c8b4c65651921d888cf5f27430dfe2ad190d35bf","modified":1637200273265},{"_id":"public/libs/twikoo/twikoo.all.min.js","hash":"c3f5f0a69b7864e7ef5bbf99fc774bec37947d7c","modified":1637200273265},{"_id":"public/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1637200273265},{"_id":"public/libs/gitalk/gitalk.min.js","hash":"564fc7c731d05fa70d71ef853a2c8cc7725739e2","modified":1637200273265}],"Category":[{"name":"Linux","_id":"ckw4ars4l0004tyox07kx7lt4"},{"name":"Hexo","_id":"ckw4ars58000otyox2w9ge6mg"},{"name":"工具","_id":"ckw4ars5c000vtyoxhvox92eh"},{"name":"MacOS","_id":"ckw4ars5k0017tyox2aed7yqc"},{"name":"Python","_id":"ckw4ars5o001ftyoxb8rr25r7"},{"name":"网站推荐","_id":"ckw4ars6j002ttyox65gu5szp"},{"name":"建站","_id":"ckw4ars6l0030tyoxhzjebc66"},{"name":"正则表达式","_id":"ckw4ars6m0035tyoxdcawg3hr"}],"Data":[{"_id":"friends","data":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}],"Page":[{"title":"404","date":"2018-09-30T09:25:30.000Z","type":"404","layout":"404","description":"Oops～，我崩溃了！找不到你想要的页面 :(","_content":"","source":"404/index.md","raw":"---\ntitle: 404\ndate: 2018-09-30 17:25:30\ntype: \"404\"\nlayout: \"404\"\ndescription: \"Oops～，我崩溃了！找不到你想要的页面 :(\"\n---","updated":"2021-10-02T15:00:13.886Z","path":"404/index.html","comments":1,"_id":"ckw4ars490000tyoxe6oa31v0","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"categories","date":"2018-09-30T09:25:30.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-09-30 17:25:30\ntype: \"categories\"\nlayout: \"categories\"\n---","updated":"2021-10-02T15:02:04.629Z","path":"categories/index.html","comments":1,"_id":"ckw4ars4i0002tyox4g6l7dyg","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"about","date":"2018-09-30T09:25:30.000Z","type":"about","layout":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2018-09-30 17:25:30\ntype: \"about\"\nlayout: \"about\"\n---","updated":"2021-10-02T15:02:36.985Z","path":"about/index.html","comments":1,"_id":"ckw4ars4o0006tyox5vvq25k8","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"friends","date":"2018-12-12T13:25:30.000Z","type":"friends","layout":"friends","_content":"","source":"friends/index.md","raw":"---\ntitle: friends\ndate: 2018-12-12 21:25:30\ntype: \"friends\"\nlayout: \"friends\"\n---","updated":"2021-10-02T15:05:51.540Z","path":"friends/index.html","comments":1,"_id":"ckw4ars4r0008tyox0yv52gpu","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"tags","date":"2021-10-02T14:59:03.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2021-10-02 22:59:03\ntype: \"tags\"\nlayout: \"tags\"\n---","updated":"2021-10-10T09:10:25.774Z","path":"tags/index.html","comments":1,"_id":"ckw4ars4t000atyox758i9gem","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""},{"title":"contact","date":"2021-10-02T15:02:50.000Z","type":"contact","layout":"contact","_content":"","source":"contact/index.md","raw":"---\ntitle: contact\ndate: 2021-10-02 23:02:50\ntype: \"contact\"\nlayout: \"contact\"\n---","updated":"2021-10-10T09:10:58.289Z","path":"contact/index.html","comments":1,"_id":"ckw4ars4y000etyox3uxga8xh","content":"","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":""}],"Post":[{"title":"CentOS7 yum安装python3.6","author":"Will Holmes","date":"2021-11-03T02:42:26.000Z","_content":"\n> CentOS7 使用yum 安装Python3 \n\n### 1.配epel源_阿里\n```bash \nwget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo\n```\n### 2.安装python3.6\n```bash \nyum install python36 -y\n```\n### 3.安装pip3\n```bash \n# 搜索pip3的安装包名称\nyum  whatprovides pip3\n\n# 安装pip3\nyum install python36-pip -y\n```\n依赖：python36-setuptools\n\n### 4.验证\n```bash \npython3 --version\n```\n### 5.查看指向\n```bash \nll /usr/bin/python\nll /usr/bin/python3\n```\n由上可知\npython 代表CentOS7系统默认的 python2.7；\npython3 代表新安装的 python3.6\n### 6.安装python开发工具\n```bash \nyum install python36-devel -y\n```\n\n### 引用\n\n[CentOS7 yum安装python3.6](https://blog.51cto.com/moerjinrong/2396290)","source":"_posts/CentOS7-yum安装python3-6.md","raw":"---\ntitle: CentOS7 yum安装python3.6\nauthor: Will Holmes\ncategories: Linux\ntags:\n  - Linux\n  - Python\ndate: 2021-11-03 10:42:26\n---\n\n> CentOS7 使用yum 安装Python3 \n\n### 1.配epel源_阿里\n```bash \nwget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo\n```\n### 2.安装python3.6\n```bash \nyum install python36 -y\n```\n### 3.安装pip3\n```bash \n# 搜索pip3的安装包名称\nyum  whatprovides pip3\n\n# 安装pip3\nyum install python36-pip -y\n```\n依赖：python36-setuptools\n\n### 4.验证\n```bash \npython3 --version\n```\n### 5.查看指向\n```bash \nll /usr/bin/python\nll /usr/bin/python3\n```\n由上可知\npython 代表CentOS7系统默认的 python2.7；\npython3 代表新安装的 python3.6\n### 6.安装python开发工具\n```bash \nyum install python36-devel -y\n```\n\n### 引用\n\n[CentOS7 yum安装python3.6](https://blog.51cto.com/moerjinrong/2396290)","slug":"CentOS7-yum安装python3-6","published":1,"updated":"2021-11-03T02:55:25.517Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckw4ars4d0001tyox8l0k3cyq","content":"<blockquote>\n<p>CentOS7 使用yum 安装Python3 </p>\n</blockquote>\n<h3 id=\"1-配epel源-阿里\"><a href=\"#1-配epel源-阿里\" class=\"headerlink\" title=\"1.配epel源_阿里\"></a>1.配epel源_阿里</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">wget</span> -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"2-安装python3-6\"><a href=\"#2-安装python3-6\" class=\"headerlink\" title=\"2.安装python3.6\"></a>2.安装python3.6</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">yum <span class=\"token function\">install</span> python36 -y<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"3-安装pip3\"><a href=\"#3-安装pip3\" class=\"headerlink\" title=\"3.安装pip3\"></a>3.安装pip3</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 搜索pip3的安装包名称</span>\nyum  whatprovides pip3\n\n<span class=\"token comment\"># 安装pip3</span>\nyum <span class=\"token function\">install</span> python36-pip -y<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>依赖：python36-setuptools</p>\n<h3 id=\"4-验证\"><a href=\"#4-验证\" class=\"headerlink\" title=\"4.验证\"></a>4.验证</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">python3 --version<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"5-查看指向\"><a href=\"#5-查看指向\" class=\"headerlink\" title=\"5.查看指向\"></a>5.查看指向</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ll /usr/bin/python\nll /usr/bin/python3<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>由上可知<br>python 代表CentOS7系统默认的 python2.7；<br>python3 代表新安装的 python3.6</p>\n<h3 id=\"6-安装python开发工具\"><a href=\"#6-安装python开发工具\" class=\"headerlink\" title=\"6.安装python开发工具\"></a>6.安装python开发工具</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">yum <span class=\"token function\">install</span> python36-devel -y<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h3><p><a href=\"https://blog.51cto.com/moerjinrong/2396290\">CentOS7 yum安装python3.6</a></p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<blockquote>\n<p>CentOS7 使用yum 安装Python3 </p>\n</blockquote>\n<h3 id=\"1-配epel源-阿里\"><a href=\"#1-配epel源-阿里\" class=\"headerlink\" title=\"1.配epel源_阿里\"></a>1.配epel源_阿里</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">wget</span> -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"2-安装python3-6\"><a href=\"#2-安装python3-6\" class=\"headerlink\" title=\"2.安装python3.6\"></a>2.安装python3.6</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">yum <span class=\"token function\">install</span> python36 -y<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"3-安装pip3\"><a href=\"#3-安装pip3\" class=\"headerlink\" title=\"3.安装pip3\"></a>3.安装pip3</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 搜索pip3的安装包名称</span>\nyum  whatprovides pip3\n\n<span class=\"token comment\"># 安装pip3</span>\nyum <span class=\"token function\">install</span> python36-pip -y<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>依赖：python36-setuptools</p>\n<h3 id=\"4-验证\"><a href=\"#4-验证\" class=\"headerlink\" title=\"4.验证\"></a>4.验证</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">python3 --version<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"5-查看指向\"><a href=\"#5-查看指向\" class=\"headerlink\" title=\"5.查看指向\"></a>5.查看指向</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ll /usr/bin/python\nll /usr/bin/python3<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>由上可知<br>python 代表CentOS7系统默认的 python2.7；<br>python3 代表新安装的 python3.6</p>\n<h3 id=\"6-安装python开发工具\"><a href=\"#6-安装python开发工具\" class=\"headerlink\" title=\"6.安装python开发工具\"></a>6.安装python开发工具</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">yum <span class=\"token function\">install</span> python36-devel -y<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h3><p><a href=\"https://blog.51cto.com/moerjinrong/2396290\">CentOS7 yum安装python3.6</a></p>\n"},{"title":"CentOS7 定时计划任务设置","author":"Will Holmes","date":"2021-11-06T20:38:29.000Z","_content":"\n\n## 概述\n\n就像再windows上有计划任务一样，centos7 自然也有计划任务，而且设置更为灵活，好用。再centos7 上可以利用crontab 来执行计划任务，\n依赖与 crond 的系统服务，这个服务是系统自带的，可以直接查看状态，启动，停止。  \n\n## 安装 crontabs服务并设置开机自启\n```bash \nyum install crontabs  \nsystemctl enable crond （设为开机启动）  \nsystemctl start crond（启动crond服务）  \nsystemctl status crond （查看状态） \n```\n\n\n## 设置用户自定义定时任务\n```bash \nvi /etc/crontab\n```\n \n可以看到： \n\n```bash \nExample of job definition:  \n.---------------- minute (0 - 59)  \n| .------------- hour (0 - 23)  \n| | .---------- day of month (1 - 31)  \n| | | .------- month (1 - 12) OR jan,feb,mar,apr ...  \n| | | | .---- day of week (0 - 6) (Sunday=0 or 7) OR\nsun,mon,tue,wed,thu,fri,sat  \n| | | | |  \n* * * * * user-name command to be executed  \n\n\n即：  \n分钟(0-59) 小时(0-23) 日(1-31) 月(11-12) 星期(0-6,0表示周日) 用户名 要执行的命令\n\n  * */30 * * * root /usr/local/mycommand.sh (每天，每30分钟执行一次 mycommand命令)\n\n  * * 3 * * * root /usr/local/mycommand.sh (每天凌晨三点，执行命令脚本，PS:这里由于第一个的分钟没有设置，那么就会每天凌晨3点的每分钟都执行一次命令)\n\n  * 0 3 * * * root /usr/local/mycommand.sh (这样就是每天凌晨三点整执行一次命令脚本)\n\n  * */10 11-13 * * * root /usr/local/mycommand.sh (每天11点到13点之间，每10分钟执行一次命令脚本，这一种用法也很常用)\n\n  * 10-30 * * * * root /usr/local/mycommand.sh (每小时的10-30分钟，每分钟执行一次命令脚本，共执行20次)\n\n  * 10,30 * * * * * root /usr/local/mycommand.sh (每小时的10,30分钟，分别执行一次命令脚本，共执行2次）\n```\n### 保存生效\n\n加载任务,使之生效：`crontab /etc/crontab`\n\n查看任务：`crontab -l`  \n$ crontab -u 用户名 -l （列出用户的定时任务列表）\n\nPS：特别注意，crond的任务计划，\n有并不会调用用户设置的环境变量，它有自己的环境变量，当你用到一些命令时，比如mysqldump等需要环境变量的命令，手工执行脚本时是正常的，但用crond执行的时候就会不行，这时你要么写完整的绝对路径，要么将环境变量添加到\n/etc/crontab 中。\n\n好了，计划任务就是这么简单了，但是计划任务，执行的语句如果是多条，则需要用药shell脚本，自己先写一个shell脚本，然后在计划任务中，执行这个脚本即可。至于shell脚本的写法，\n这里不赘述。\n\n","source":"_posts/CentOS7-定时计划任务设置.md","raw":"---\ntitle: CentOS7 定时计划任务设置\nauthor: Will Holmes\ncategories: Linux\ntags:\n  - CentOS7\n  - 定时任务\n  - Crontabs\ndate: 2021-11-07 04:38:29\n---\n\n\n## 概述\n\n就像再windows上有计划任务一样，centos7 自然也有计划任务，而且设置更为灵活，好用。再centos7 上可以利用crontab 来执行计划任务，\n依赖与 crond 的系统服务，这个服务是系统自带的，可以直接查看状态，启动，停止。  \n\n## 安装 crontabs服务并设置开机自启\n```bash \nyum install crontabs  \nsystemctl enable crond （设为开机启动）  \nsystemctl start crond（启动crond服务）  \nsystemctl status crond （查看状态） \n```\n\n\n## 设置用户自定义定时任务\n```bash \nvi /etc/crontab\n```\n \n可以看到： \n\n```bash \nExample of job definition:  \n.---------------- minute (0 - 59)  \n| .------------- hour (0 - 23)  \n| | .---------- day of month (1 - 31)  \n| | | .------- month (1 - 12) OR jan,feb,mar,apr ...  \n| | | | .---- day of week (0 - 6) (Sunday=0 or 7) OR\nsun,mon,tue,wed,thu,fri,sat  \n| | | | |  \n* * * * * user-name command to be executed  \n\n\n即：  \n分钟(0-59) 小时(0-23) 日(1-31) 月(11-12) 星期(0-6,0表示周日) 用户名 要执行的命令\n\n  * */30 * * * root /usr/local/mycommand.sh (每天，每30分钟执行一次 mycommand命令)\n\n  * * 3 * * * root /usr/local/mycommand.sh (每天凌晨三点，执行命令脚本，PS:这里由于第一个的分钟没有设置，那么就会每天凌晨3点的每分钟都执行一次命令)\n\n  * 0 3 * * * root /usr/local/mycommand.sh (这样就是每天凌晨三点整执行一次命令脚本)\n\n  * */10 11-13 * * * root /usr/local/mycommand.sh (每天11点到13点之间，每10分钟执行一次命令脚本，这一种用法也很常用)\n\n  * 10-30 * * * * root /usr/local/mycommand.sh (每小时的10-30分钟，每分钟执行一次命令脚本，共执行20次)\n\n  * 10,30 * * * * * root /usr/local/mycommand.sh (每小时的10,30分钟，分别执行一次命令脚本，共执行2次）\n```\n### 保存生效\n\n加载任务,使之生效：`crontab /etc/crontab`\n\n查看任务：`crontab -l`  \n$ crontab -u 用户名 -l （列出用户的定时任务列表）\n\nPS：特别注意，crond的任务计划，\n有并不会调用用户设置的环境变量，它有自己的环境变量，当你用到一些命令时，比如mysqldump等需要环境变量的命令，手工执行脚本时是正常的，但用crond执行的时候就会不行，这时你要么写完整的绝对路径，要么将环境变量添加到\n/etc/crontab 中。\n\n好了，计划任务就是这么简单了，但是计划任务，执行的语句如果是多条，则需要用药shell脚本，自己先写一个shell脚本，然后在计划任务中，执行这个脚本即可。至于shell脚本的写法，\n这里不赘述。\n\n","slug":"CentOS7-定时计划任务设置","published":1,"updated":"2021-11-06T20:42:59.402Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckw4ars4j0003tyoxapw2eipz","content":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>就像再windows上有计划任务一样，centos7 自然也有计划任务，而且设置更为灵活，好用。再centos7 上可以利用crontab 来执行计划任务，<br>依赖与 crond 的系统服务，这个服务是系统自带的，可以直接查看状态，启动，停止。  </p>\n<h2 id=\"安装-crontabs服务并设置开机自启\"><a href=\"#安装-crontabs服务并设置开机自启\" class=\"headerlink\" title=\"安装 crontabs服务并设置开机自启\"></a>安装 crontabs服务并设置开机自启</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">yum <span class=\"token function\">install</span> crontabs  \nsystemctl <span class=\"token builtin class-name\">enable</span> crond （设为开机启动）  \nsystemctl start crond（启动crond服务）  \nsystemctl status crond （查看状态） <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h2 id=\"设置用户自定义定时任务\"><a href=\"#设置用户自定义定时任务\" class=\"headerlink\" title=\"设置用户自定义定时任务\"></a>设置用户自定义定时任务</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">vi</span> /etc/crontab<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>可以看到： </p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">Example of job definition:  \n.---------------- minute <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> - <span class=\"token number\">59</span><span class=\"token punctuation\">)</span>  \n<span class=\"token operator\">|</span> .------------- hour <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> - <span class=\"token number\">23</span><span class=\"token punctuation\">)</span>  \n<span class=\"token operator\">|</span> <span class=\"token operator\">|</span> .---------- day of month <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> - <span class=\"token number\">31</span><span class=\"token punctuation\">)</span>  \n<span class=\"token operator\">|</span> <span class=\"token operator\">|</span> <span class=\"token operator\">|</span> .------- month <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> - <span class=\"token number\">12</span><span class=\"token punctuation\">)</span> OR jan,feb,mar,apr <span class=\"token punctuation\">..</span>.  \n<span class=\"token operator\">|</span> <span class=\"token operator\">|</span> <span class=\"token operator\">|</span> <span class=\"token operator\">|</span> .---- day of week <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> - <span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>Sunday<span class=\"token operator\">=</span><span class=\"token number\">0</span> or <span class=\"token number\">7</span><span class=\"token punctuation\">)</span> OR\nsun,mon,tue,wed,thu,fri,sat  \n<span class=\"token operator\">|</span> <span class=\"token operator\">|</span> <span class=\"token operator\">|</span> <span class=\"token operator\">|</span> <span class=\"token operator\">|</span>  \n* * * * * user-name <span class=\"token builtin class-name\">command</span> to be executed  \n\n\n即：  \n分钟<span class=\"token punctuation\">(</span><span class=\"token number\">0</span>-59<span class=\"token punctuation\">)</span> 小时<span class=\"token punctuation\">(</span><span class=\"token number\">0</span>-23<span class=\"token punctuation\">)</span> 日<span class=\"token punctuation\">(</span><span class=\"token number\">1</span>-31<span class=\"token punctuation\">)</span> 月<span class=\"token punctuation\">(</span><span class=\"token number\">11</span>-12<span class=\"token punctuation\">)</span> 星期<span class=\"token punctuation\">(</span><span class=\"token number\">0</span>-6,0表示周日<span class=\"token punctuation\">)</span> 用户名 要执行的命令\n\n  * */30 * * * root /usr/local/mycommand.sh <span class=\"token punctuation\">(</span>每天，每30分钟执行一次 mycommand命令<span class=\"token punctuation\">)</span>\n\n  * * <span class=\"token number\">3</span> * * * root /usr/local/mycommand.sh <span class=\"token punctuation\">(</span>每天凌晨三点，执行命令脚本，PS:这里由于第一个的分钟没有设置，那么就会每天凌晨3点的每分钟都执行一次命令<span class=\"token punctuation\">)</span>\n\n  * <span class=\"token number\">0</span> <span class=\"token number\">3</span> * * * root /usr/local/mycommand.sh <span class=\"token punctuation\">(</span>这样就是每天凌晨三点整执行一次命令脚本<span class=\"token punctuation\">)</span>\n\n  * */10 <span class=\"token number\">11</span>-13 * * * root /usr/local/mycommand.sh <span class=\"token punctuation\">(</span>每天11点到13点之间，每10分钟执行一次命令脚本，这一种用法也很常用<span class=\"token punctuation\">)</span>\n\n  * <span class=\"token number\">10</span>-30 * * * * root /usr/local/mycommand.sh <span class=\"token punctuation\">(</span>每小时的10-30分钟，每分钟执行一次命令脚本，共执行20次<span class=\"token punctuation\">)</span>\n\n  * <span class=\"token number\">10,30</span> * * * * * root /usr/local/mycommand.sh <span class=\"token punctuation\">(</span>每小时的10,30分钟，分别执行一次命令脚本，共执行2次）<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"保存生效\"><a href=\"#保存生效\" class=\"headerlink\" title=\"保存生效\"></a>保存生效</h3><p>加载任务,使之生效：<code>crontab /etc/crontab</code></p>\n<p>查看任务：<code>crontab -l</code><br>$ crontab -u 用户名 -l （列出用户的定时任务列表）</p>\n<p>PS：特别注意，crond的任务计划，<br>有并不会调用用户设置的环境变量，它有自己的环境变量，当你用到一些命令时，比如mysqldump等需要环境变量的命令，手工执行脚本时是正常的，但用crond执行的时候就会不行，这时你要么写完整的绝对路径，要么将环境变量添加到<br>/etc/crontab 中。</p>\n<p>好了，计划任务就是这么简单了，但是计划任务，执行的语句如果是多条，则需要用药shell脚本，自己先写一个shell脚本，然后在计划任务中，执行这个脚本即可。至于shell脚本的写法，<br>这里不赘述。</p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>就像再windows上有计划任务一样，centos7 自然也有计划任务，而且设置更为灵活，好用。再centos7 上可以利用crontab 来执行计划任务，<br>依赖与 crond 的系统服务，这个服务是系统自带的，可以直接查看状态，启动，停止。  </p>\n<h2 id=\"安装-crontabs服务并设置开机自启\"><a href=\"#安装-crontabs服务并设置开机自启\" class=\"headerlink\" title=\"安装 crontabs服务并设置开机自启\"></a>安装 crontabs服务并设置开机自启</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">yum <span class=\"token function\">install</span> crontabs  \nsystemctl <span class=\"token builtin class-name\">enable</span> crond （设为开机启动）  \nsystemctl start crond（启动crond服务）  \nsystemctl status crond （查看状态） <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h2 id=\"设置用户自定义定时任务\"><a href=\"#设置用户自定义定时任务\" class=\"headerlink\" title=\"设置用户自定义定时任务\"></a>设置用户自定义定时任务</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">vi</span> /etc/crontab<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>可以看到： </p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">Example of job definition:  \n.---------------- minute <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> - <span class=\"token number\">59</span><span class=\"token punctuation\">)</span>  \n<span class=\"token operator\">|</span> .------------- hour <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> - <span class=\"token number\">23</span><span class=\"token punctuation\">)</span>  \n<span class=\"token operator\">|</span> <span class=\"token operator\">|</span> .---------- day of month <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> - <span class=\"token number\">31</span><span class=\"token punctuation\">)</span>  \n<span class=\"token operator\">|</span> <span class=\"token operator\">|</span> <span class=\"token operator\">|</span> .------- month <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> - <span class=\"token number\">12</span><span class=\"token punctuation\">)</span> OR jan,feb,mar,apr <span class=\"token punctuation\">..</span>.  \n<span class=\"token operator\">|</span> <span class=\"token operator\">|</span> <span class=\"token operator\">|</span> <span class=\"token operator\">|</span> .---- day of week <span class=\"token punctuation\">(</span><span class=\"token number\">0</span> - <span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>Sunday<span class=\"token operator\">=</span><span class=\"token number\">0</span> or <span class=\"token number\">7</span><span class=\"token punctuation\">)</span> OR\nsun,mon,tue,wed,thu,fri,sat  \n<span class=\"token operator\">|</span> <span class=\"token operator\">|</span> <span class=\"token operator\">|</span> <span class=\"token operator\">|</span> <span class=\"token operator\">|</span>  \n* * * * * user-name <span class=\"token builtin class-name\">command</span> to be executed  \n\n\n即：  \n分钟<span class=\"token punctuation\">(</span><span class=\"token number\">0</span>-59<span class=\"token punctuation\">)</span> 小时<span class=\"token punctuation\">(</span><span class=\"token number\">0</span>-23<span class=\"token punctuation\">)</span> 日<span class=\"token punctuation\">(</span><span class=\"token number\">1</span>-31<span class=\"token punctuation\">)</span> 月<span class=\"token punctuation\">(</span><span class=\"token number\">11</span>-12<span class=\"token punctuation\">)</span> 星期<span class=\"token punctuation\">(</span><span class=\"token number\">0</span>-6,0表示周日<span class=\"token punctuation\">)</span> 用户名 要执行的命令\n\n  * */30 * * * root /usr/local/mycommand.sh <span class=\"token punctuation\">(</span>每天，每30分钟执行一次 mycommand命令<span class=\"token punctuation\">)</span>\n\n  * * <span class=\"token number\">3</span> * * * root /usr/local/mycommand.sh <span class=\"token punctuation\">(</span>每天凌晨三点，执行命令脚本，PS:这里由于第一个的分钟没有设置，那么就会每天凌晨3点的每分钟都执行一次命令<span class=\"token punctuation\">)</span>\n\n  * <span class=\"token number\">0</span> <span class=\"token number\">3</span> * * * root /usr/local/mycommand.sh <span class=\"token punctuation\">(</span>这样就是每天凌晨三点整执行一次命令脚本<span class=\"token punctuation\">)</span>\n\n  * */10 <span class=\"token number\">11</span>-13 * * * root /usr/local/mycommand.sh <span class=\"token punctuation\">(</span>每天11点到13点之间，每10分钟执行一次命令脚本，这一种用法也很常用<span class=\"token punctuation\">)</span>\n\n  * <span class=\"token number\">10</span>-30 * * * * root /usr/local/mycommand.sh <span class=\"token punctuation\">(</span>每小时的10-30分钟，每分钟执行一次命令脚本，共执行20次<span class=\"token punctuation\">)</span>\n\n  * <span class=\"token number\">10,30</span> * * * * * root /usr/local/mycommand.sh <span class=\"token punctuation\">(</span>每小时的10,30分钟，分别执行一次命令脚本，共执行2次）<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"保存生效\"><a href=\"#保存生效\" class=\"headerlink\" title=\"保存生效\"></a>保存生效</h3><p>加载任务,使之生效：<code>crontab /etc/crontab</code></p>\n<p>查看任务：<code>crontab -l</code><br>$ crontab -u 用户名 -l （列出用户的定时任务列表）</p>\n<p>PS：特别注意，crond的任务计划，<br>有并不会调用用户设置的环境变量，它有自己的环境变量，当你用到一些命令时，比如mysqldump等需要环境变量的命令，手工执行脚本时是正常的，但用crond执行的时候就会不行，这时你要么写完整的绝对路径，要么将环境变量添加到<br>/etc/crontab 中。</p>\n<p>好了，计划任务就是这么简单了，但是计划任务，执行的语句如果是多条，则需要用药shell脚本，自己先写一个shell脚本，然后在计划任务中，执行这个脚本即可。至于shell脚本的写法，<br>这里不赘述。</p>\n"},{"title":"CentOS使用yum安装ffmpeg工具","author":"Will Holmes","date":"2021-11-06T20:28:07.000Z","_content":"\n\n\n## 第一种方法\n\n### 安装ffmpeg\n```bash \nyum -y install ffmpeg\n```\n\n### 安装yasm\n```bash \nyum install -y yasm\n```\n\n### 查看是否安装成功\n```bash \nffmpeg -version\n```\n \n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200601162219387.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d1b19xaWFuZ3FpYW5n,size_16,color_FFFFFF,t_70)\n\n## 第二种方法\n\n### 升级系统epel-release软件包\n\n```bash\nyum install epel-release -y //安装第三方软件包\nyum update -y //更新系统软件包\nshutdown -r now  //也可以不重启\n  \n```\n**EPEL源-是什么?为什么安装？**\n\nEPEL (Extra Packages for Enterprise\nLinux)是基于Fedora的一个项目，为“红帽系”的操作系统提供额外的软件包，适用于RHEL、CentOS和Scientific Linux.\n\n### 安装Nux Dextop Yum 源\n\n由于CentOS没有官方FFmpeg rpm软件包。但是，我们可以使用第三方YUM源（Nux Dextop）完成此工作。\n\n#### 1) CentOS 7\n\n```bash\n\nrpm --import http://li.nux.ro/download/nux/RPM-GPG-KEY-nux.ro\nrpm -Uvh http://li.nux.ro/download/nux/dextop/el7/x86_64/nux-dextop-release-0-5.el7.nux.noarch.rpm\n  \n```\n#### 2) CentOS 6\n\n```bash\n\nrpm --import http://li.nux.ro/download/nux/RPM-GPG-KEY-nux.ro\nrpm -Uvh http://li.nux.ro/download/nux/dextop/el6/x86_64/nux-dextop-release-0-2.el6.nux.noarch.rpm\n    \n```\n### 安装FFmpeg 和 FFmpeg开发包\n```bash \nyum install ffmpeg ffmpeg-devel -y\n```\n\n### 测试是否安装成功\n```bash \nffmpeg 或 ffmpeg -version\n```\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200601172835203.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d1b19xaWFuZ3FpYW5n,size_16,color_FFFFFF,t_70)\n\n### 如果你想了解更多关于FFmpeg使用方面的资料\n```bash \nffmpeg -h \n```\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200601172909584.png?size_16,color_FFFFFF,t_70)\n\n","source":"_posts/CentOS使用yum安装ffmpeg工具.md","raw":"---\ntitle: CentOS使用yum安装ffmpeg工具\nauthor: Will Holmes\ncategories: Linux\ntags:\n  - 软件\n  - Linux\n  - Yum\n  - FFmpeg\ndate: 2021-11-07 04:28:07\n---\n\n\n\n## 第一种方法\n\n### 安装ffmpeg\n```bash \nyum -y install ffmpeg\n```\n\n### 安装yasm\n```bash \nyum install -y yasm\n```\n\n### 查看是否安装成功\n```bash \nffmpeg -version\n```\n \n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200601162219387.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d1b19xaWFuZ3FpYW5n,size_16,color_FFFFFF,t_70)\n\n## 第二种方法\n\n### 升级系统epel-release软件包\n\n```bash\nyum install epel-release -y //安装第三方软件包\nyum update -y //更新系统软件包\nshutdown -r now  //也可以不重启\n  \n```\n**EPEL源-是什么?为什么安装？**\n\nEPEL (Extra Packages for Enterprise\nLinux)是基于Fedora的一个项目，为“红帽系”的操作系统提供额外的软件包，适用于RHEL、CentOS和Scientific Linux.\n\n### 安装Nux Dextop Yum 源\n\n由于CentOS没有官方FFmpeg rpm软件包。但是，我们可以使用第三方YUM源（Nux Dextop）完成此工作。\n\n#### 1) CentOS 7\n\n```bash\n\nrpm --import http://li.nux.ro/download/nux/RPM-GPG-KEY-nux.ro\nrpm -Uvh http://li.nux.ro/download/nux/dextop/el7/x86_64/nux-dextop-release-0-5.el7.nux.noarch.rpm\n  \n```\n#### 2) CentOS 6\n\n```bash\n\nrpm --import http://li.nux.ro/download/nux/RPM-GPG-KEY-nux.ro\nrpm -Uvh http://li.nux.ro/download/nux/dextop/el6/x86_64/nux-dextop-release-0-2.el6.nux.noarch.rpm\n    \n```\n### 安装FFmpeg 和 FFmpeg开发包\n```bash \nyum install ffmpeg ffmpeg-devel -y\n```\n\n### 测试是否安装成功\n```bash \nffmpeg 或 ffmpeg -version\n```\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200601172835203.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d1b19xaWFuZ3FpYW5n,size_16,color_FFFFFF,t_70)\n\n### 如果你想了解更多关于FFmpeg使用方面的资料\n```bash \nffmpeg -h \n```\n\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200601172909584.png?size_16,color_FFFFFF,t_70)\n\n","slug":"CentOS使用yum安装ffmpeg工具","published":1,"updated":"2021-11-06T20:34:52.780Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckw4ars4p0007tyoxen41dp7a","content":"<h2 id=\"第一种方法\"><a href=\"#第一种方法\" class=\"headerlink\" title=\"第一种方法\"></a>第一种方法</h2><h3 id=\"安装ffmpeg\"><a href=\"#安装ffmpeg\" class=\"headerlink\" title=\"安装ffmpeg\"></a>安装ffmpeg</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">yum -y <span class=\"token function\">install</span> ffmpeg<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"安装yasm\"><a href=\"#安装yasm\" class=\"headerlink\" title=\"安装yasm\"></a>安装yasm</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">yum <span class=\"token function\">install</span> -y yasm<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"查看是否安装成功\"><a href=\"#查看是否安装成功\" class=\"headerlink\" title=\"查看是否安装成功\"></a>查看是否安装成功</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ffmpeg -version<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/20200601162219387.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d1b19xaWFuZ3FpYW5n,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"第二种方法\"><a href=\"#第二种方法\" class=\"headerlink\" title=\"第二种方法\"></a>第二种方法</h2><h3 id=\"升级系统epel-release软件包\"><a href=\"#升级系统epel-release软件包\" class=\"headerlink\" title=\"升级系统epel-release软件包\"></a>升级系统epel-release软件包</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">yum <span class=\"token function\">install</span> epel-release -y //安装第三方软件包\nyum update -y //更新系统软件包\n<span class=\"token function\">shutdown</span> -r now  //也可以不重启\n  <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>EPEL源-是什么?为什么安装？</strong></p>\n<p>EPEL (Extra Packages for Enterprise<br>Linux)是基于Fedora的一个项目，为“红帽系”的操作系统提供额外的软件包，适用于RHEL、CentOS和Scientific Linux.</p>\n<h3 id=\"安装Nux-Dextop-Yum-源\"><a href=\"#安装Nux-Dextop-Yum-源\" class=\"headerlink\" title=\"安装Nux Dextop Yum 源\"></a>安装Nux Dextop Yum 源</h3><p>由于CentOS没有官方FFmpeg rpm软件包。但是，我们可以使用第三方YUM源（Nux Dextop）完成此工作。</p>\n<h4 id=\"1-CentOS-7\"><a href=\"#1-CentOS-7\" class=\"headerlink\" title=\"1) CentOS 7\"></a>1) CentOS 7</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">\n<span class=\"token function\">rpm</span> --import http://li.nux.ro/download/nux/RPM-GPG-KEY-nux.ro\n<span class=\"token function\">rpm</span> -Uvh http://li.nux.ro/download/nux/dextop/el7/x86_64/nux-dextop-release-0-5.el7.nux.noarch.rpm\n  <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"2-CentOS-6\"><a href=\"#2-CentOS-6\" class=\"headerlink\" title=\"2) CentOS 6\"></a>2) CentOS 6</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">\n<span class=\"token function\">rpm</span> --import http://li.nux.ro/download/nux/RPM-GPG-KEY-nux.ro\n<span class=\"token function\">rpm</span> -Uvh http://li.nux.ro/download/nux/dextop/el6/x86_64/nux-dextop-release-0-2.el6.nux.noarch.rpm\n    <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"安装FFmpeg-和-FFmpeg开发包\"><a href=\"#安装FFmpeg-和-FFmpeg开发包\" class=\"headerlink\" title=\"安装FFmpeg 和 FFmpeg开发包\"></a>安装FFmpeg 和 FFmpeg开发包</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">yum <span class=\"token function\">install</span> ffmpeg ffmpeg-devel -y<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"测试是否安装成功\"><a href=\"#测试是否安装成功\" class=\"headerlink\" title=\"测试是否安装成功\"></a>测试是否安装成功</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ffmpeg 或 ffmpeg -version<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://img-blog.csdnimg.cn/20200601172835203.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d1b19xaWFuZ3FpYW5n,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"如果你想了解更多关于FFmpeg使用方面的资料\"><a href=\"#如果你想了解更多关于FFmpeg使用方面的资料\" class=\"headerlink\" title=\"如果你想了解更多关于FFmpeg使用方面的资料\"></a>如果你想了解更多关于FFmpeg使用方面的资料</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ffmpeg -h <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://img-blog.csdnimg.cn/20200601172909584.png?size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"第一种方法\"><a href=\"#第一种方法\" class=\"headerlink\" title=\"第一种方法\"></a>第一种方法</h2><h3 id=\"安装ffmpeg\"><a href=\"#安装ffmpeg\" class=\"headerlink\" title=\"安装ffmpeg\"></a>安装ffmpeg</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">yum -y <span class=\"token function\">install</span> ffmpeg<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"安装yasm\"><a href=\"#安装yasm\" class=\"headerlink\" title=\"安装yasm\"></a>安装yasm</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">yum <span class=\"token function\">install</span> -y yasm<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"查看是否安装成功\"><a href=\"#查看是否安装成功\" class=\"headerlink\" title=\"查看是否安装成功\"></a>查看是否安装成功</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ffmpeg -version<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://img-blog.csdnimg.cn/20200601162219387.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d1b19xaWFuZ3FpYW5n,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"第二种方法\"><a href=\"#第二种方法\" class=\"headerlink\" title=\"第二种方法\"></a>第二种方法</h2><h3 id=\"升级系统epel-release软件包\"><a href=\"#升级系统epel-release软件包\" class=\"headerlink\" title=\"升级系统epel-release软件包\"></a>升级系统epel-release软件包</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">yum <span class=\"token function\">install</span> epel-release -y //安装第三方软件包\nyum update -y //更新系统软件包\n<span class=\"token function\">shutdown</span> -r now  //也可以不重启\n  <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>EPEL源-是什么?为什么安装？</strong></p>\n<p>EPEL (Extra Packages for Enterprise<br>Linux)是基于Fedora的一个项目，为“红帽系”的操作系统提供额外的软件包，适用于RHEL、CentOS和Scientific Linux.</p>\n<h3 id=\"安装Nux-Dextop-Yum-源\"><a href=\"#安装Nux-Dextop-Yum-源\" class=\"headerlink\" title=\"安装Nux Dextop Yum 源\"></a>安装Nux Dextop Yum 源</h3><p>由于CentOS没有官方FFmpeg rpm软件包。但是，我们可以使用第三方YUM源（Nux Dextop）完成此工作。</p>\n<h4 id=\"1-CentOS-7\"><a href=\"#1-CentOS-7\" class=\"headerlink\" title=\"1) CentOS 7\"></a>1) CentOS 7</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">\n<span class=\"token function\">rpm</span> --import http://li.nux.ro/download/nux/RPM-GPG-KEY-nux.ro\n<span class=\"token function\">rpm</span> -Uvh http://li.nux.ro/download/nux/dextop/el7/x86_64/nux-dextop-release-0-5.el7.nux.noarch.rpm\n  <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"2-CentOS-6\"><a href=\"#2-CentOS-6\" class=\"headerlink\" title=\"2) CentOS 6\"></a>2) CentOS 6</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">\n<span class=\"token function\">rpm</span> --import http://li.nux.ro/download/nux/RPM-GPG-KEY-nux.ro\n<span class=\"token function\">rpm</span> -Uvh http://li.nux.ro/download/nux/dextop/el6/x86_64/nux-dextop-release-0-2.el6.nux.noarch.rpm\n    <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"安装FFmpeg-和-FFmpeg开发包\"><a href=\"#安装FFmpeg-和-FFmpeg开发包\" class=\"headerlink\" title=\"安装FFmpeg 和 FFmpeg开发包\"></a>安装FFmpeg 和 FFmpeg开发包</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">yum <span class=\"token function\">install</span> ffmpeg ffmpeg-devel -y<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"测试是否安装成功\"><a href=\"#测试是否安装成功\" class=\"headerlink\" title=\"测试是否安装成功\"></a>测试是否安装成功</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ffmpeg 或 ffmpeg -version<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://img-blog.csdnimg.cn/20200601172835203.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2d1b19xaWFuZ3FpYW5n,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"如果你想了解更多关于FFmpeg使用方面的资料\"><a href=\"#如果你想了解更多关于FFmpeg使用方面的资料\" class=\"headerlink\" title=\"如果你想了解更多关于FFmpeg使用方面的资料\"></a>如果你想了解更多关于FFmpeg使用方面的资料</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ffmpeg -h <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://img-blog.csdnimg.cn/20200601172909584.png?size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n"},{"title":"Centos7 安装Chrome无GUI运行selenium chromedriver","author":"Will Holmes","date":"2021-11-03T02:24:18.000Z","_content":"\n### 1. 安装chrome\n首先安装google的epel源\n```bash \nvi /etc/yum.repos.d/google.repo\n```\n``` \n[google]\nname=Google-x86_64\nbaseurl=http://dl.google.com/linux/rpm/stable/x86_64\nenabled=1\ngpgcheck=0\ngpgkey=https://dl-ssl.google.com/linux/linux_signing_key.pub \n```\n\n```bash \nyum update && yum install google-chrome-stable\n```\n\n\n### 2.chromedriver下载\nhttps://npm.taobao.org/mirrors/chromedriver/\n\n找到chrome对应的chromedriver 版本，并下载\n```bash \nwget https://chromedriver.storage.googleapis.com/74.0.3729.6/chromedriver_linux64.zip\n```\n将下载的chromedriver 放到脚本同级目录调用\n\n### 3. 为chromedriver授权\n```bash \nchmod 755 chromedriver\n```\n\n### 测试代码 \n```python \nfrom selenium import webdriver\nfrom selenium.webdriver.chrome.options import Options\n\nchrome_options = Options()\nchrome_options.add_argument(\"--headless\")\nchrome_options.add_argument('--disable-gpu')\nchrome_options.add_argument('--no-sandbox')    # 禁止沙箱模式，否则肯能会报错遇到chrome异常\nurl=\"https://www.west.cn/login.asp\"\nbrower=webdriver.Chrome(executable_path=\"./chromedriver\", chrome_options=chrome_options)\nbrower.get(url)\nprint(brower.current_url)\nbrower.get(\"https://www.west.cn/Manager/\")\nprint(brower.current_url)\nbrower.quit()\n```\n\n### 引用\n[centos7无GUI运行selenium chromedriver 亲测可用！](https://www.cnblogs.com/huchong/p/10796823.html)\n\n","source":"_posts/Centos7-安装Chrome无GUI运行selenium-chromedriver.md","raw":"---\ntitle: Centos7 安装Chrome无GUI运行selenium chromedriver\nauthor: Will Holmes\ncategories: Linux\ntags:\n  - Linux\n  - Chrome\n  - Python\n  - Selenium\ndate: 2021-11-03 10:24:18\n---\n\n### 1. 安装chrome\n首先安装google的epel源\n```bash \nvi /etc/yum.repos.d/google.repo\n```\n``` \n[google]\nname=Google-x86_64\nbaseurl=http://dl.google.com/linux/rpm/stable/x86_64\nenabled=1\ngpgcheck=0\ngpgkey=https://dl-ssl.google.com/linux/linux_signing_key.pub \n```\n\n```bash \nyum update && yum install google-chrome-stable\n```\n\n\n### 2.chromedriver下载\nhttps://npm.taobao.org/mirrors/chromedriver/\n\n找到chrome对应的chromedriver 版本，并下载\n```bash \nwget https://chromedriver.storage.googleapis.com/74.0.3729.6/chromedriver_linux64.zip\n```\n将下载的chromedriver 放到脚本同级目录调用\n\n### 3. 为chromedriver授权\n```bash \nchmod 755 chromedriver\n```\n\n### 测试代码 \n```python \nfrom selenium import webdriver\nfrom selenium.webdriver.chrome.options import Options\n\nchrome_options = Options()\nchrome_options.add_argument(\"--headless\")\nchrome_options.add_argument('--disable-gpu')\nchrome_options.add_argument('--no-sandbox')    # 禁止沙箱模式，否则肯能会报错遇到chrome异常\nurl=\"https://www.west.cn/login.asp\"\nbrower=webdriver.Chrome(executable_path=\"./chromedriver\", chrome_options=chrome_options)\nbrower.get(url)\nprint(brower.current_url)\nbrower.get(\"https://www.west.cn/Manager/\")\nprint(brower.current_url)\nbrower.quit()\n```\n\n### 引用\n[centos7无GUI运行selenium chromedriver 亲测可用！](https://www.cnblogs.com/huchong/p/10796823.html)\n\n","slug":"Centos7-安装Chrome无GUI运行selenium-chromedriver","published":1,"updated":"2021-11-03T02:30:07.811Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckw4ars4s0009tyox70cwfxb2","content":"<h3 id=\"1-安装chrome\"><a href=\"#1-安装chrome\" class=\"headerlink\" title=\"1. 安装chrome\"></a>1. 安装chrome</h3><p>首先安装google的epel源</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">vi</span> /etc/yum.repos.d/google.repo<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">[google]\nname&#x3D;Google-x86_64\nbaseurl&#x3D;http:&#x2F;&#x2F;dl.google.com&#x2F;linux&#x2F;rpm&#x2F;stable&#x2F;x86_64\nenabled&#x3D;1\ngpgcheck&#x3D;0\ngpgkey&#x3D;https:&#x2F;&#x2F;dl-ssl.google.com&#x2F;linux&#x2F;linux_signing_key.pub <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">yum update <span class=\"token operator\">&amp;&amp;</span> yum <span class=\"token function\">install</span> google-chrome-stable<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n<h3 id=\"2-chromedriver下载\"><a href=\"#2-chromedriver下载\" class=\"headerlink\" title=\"2.chromedriver下载\"></a>2.chromedriver下载</h3><p><a href=\"https://npm.taobao.org/mirrors/chromedriver/\">https://npm.taobao.org/mirrors/chromedriver/</a></p>\n<p>找到chrome对应的chromedriver 版本，并下载</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">wget</span> https://chromedriver.storage.googleapis.com/74.0.3729.6/chromedriver_linux64.zip<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>将下载的chromedriver 放到脚本同级目录调用</p>\n<h3 id=\"3-为chromedriver授权\"><a href=\"#3-为chromedriver授权\" class=\"headerlink\" title=\"3. 为chromedriver授权\"></a>3. 为chromedriver授权</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">chmod</span> <span class=\"token number\">755</span> chromedriver<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"测试代码\"><a href=\"#测试代码\" class=\"headerlink\" title=\"测试代码\"></a>测试代码</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> selenium <span class=\"token keyword\">import</span> webdriver\n<span class=\"token keyword\">from</span> selenium<span class=\"token punctuation\">.</span>webdriver<span class=\"token punctuation\">.</span>chrome<span class=\"token punctuation\">.</span>options <span class=\"token keyword\">import</span> Options\n\nchrome_options <span class=\"token operator\">=</span> Options<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nchrome_options<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">\"--headless\"</span><span class=\"token punctuation\">)</span>\nchrome_options<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--disable-gpu'</span><span class=\"token punctuation\">)</span>\nchrome_options<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--no-sandbox'</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\"># 禁止沙箱模式，否则肯能会报错遇到chrome异常</span>\nurl<span class=\"token operator\">=</span><span class=\"token string\">\"https://www.west.cn/login.asp\"</span>\nbrower<span class=\"token operator\">=</span>webdriver<span class=\"token punctuation\">.</span>Chrome<span class=\"token punctuation\">(</span>executable_path<span class=\"token operator\">=</span><span class=\"token string\">\"./chromedriver\"</span><span class=\"token punctuation\">,</span> chrome_options<span class=\"token operator\">=</span>chrome_options<span class=\"token punctuation\">)</span>\nbrower<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>brower<span class=\"token punctuation\">.</span>current_url<span class=\"token punctuation\">)</span>\nbrower<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"https://www.west.cn/Manager/\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>brower<span class=\"token punctuation\">.</span>current_url<span class=\"token punctuation\">)</span>\nbrower<span class=\"token punctuation\">.</span>quit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h3><p><a href=\"https://www.cnblogs.com/huchong/p/10796823.html\">centos7无GUI运行selenium chromedriver 亲测可用！</a></p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h3 id=\"1-安装chrome\"><a href=\"#1-安装chrome\" class=\"headerlink\" title=\"1. 安装chrome\"></a>1. 安装chrome</h3><p>首先安装google的epel源</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">vi</span> /etc/yum.repos.d/google.repo<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">[google]\nname&#x3D;Google-x86_64\nbaseurl&#x3D;http:&#x2F;&#x2F;dl.google.com&#x2F;linux&#x2F;rpm&#x2F;stable&#x2F;x86_64\nenabled&#x3D;1\ngpgcheck&#x3D;0\ngpgkey&#x3D;https:&#x2F;&#x2F;dl-ssl.google.com&#x2F;linux&#x2F;linux_signing_key.pub <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">yum update <span class=\"token operator\">&amp;&amp;</span> yum <span class=\"token function\">install</span> google-chrome-stable<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n<h3 id=\"2-chromedriver下载\"><a href=\"#2-chromedriver下载\" class=\"headerlink\" title=\"2.chromedriver下载\"></a>2.chromedriver下载</h3><p><a href=\"https://npm.taobao.org/mirrors/chromedriver/\">https://npm.taobao.org/mirrors/chromedriver/</a></p>\n<p>找到chrome对应的chromedriver 版本，并下载</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">wget</span> https://chromedriver.storage.googleapis.com/74.0.3729.6/chromedriver_linux64.zip<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>将下载的chromedriver 放到脚本同级目录调用</p>\n<h3 id=\"3-为chromedriver授权\"><a href=\"#3-为chromedriver授权\" class=\"headerlink\" title=\"3. 为chromedriver授权\"></a>3. 为chromedriver授权</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">chmod</span> <span class=\"token number\">755</span> chromedriver<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"测试代码\"><a href=\"#测试代码\" class=\"headerlink\" title=\"测试代码\"></a>测试代码</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> selenium <span class=\"token keyword\">import</span> webdriver\n<span class=\"token keyword\">from</span> selenium<span class=\"token punctuation\">.</span>webdriver<span class=\"token punctuation\">.</span>chrome<span class=\"token punctuation\">.</span>options <span class=\"token keyword\">import</span> Options\n\nchrome_options <span class=\"token operator\">=</span> Options<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nchrome_options<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">\"--headless\"</span><span class=\"token punctuation\">)</span>\nchrome_options<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--disable-gpu'</span><span class=\"token punctuation\">)</span>\nchrome_options<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--no-sandbox'</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\"># 禁止沙箱模式，否则肯能会报错遇到chrome异常</span>\nurl<span class=\"token operator\">=</span><span class=\"token string\">\"https://www.west.cn/login.asp\"</span>\nbrower<span class=\"token operator\">=</span>webdriver<span class=\"token punctuation\">.</span>Chrome<span class=\"token punctuation\">(</span>executable_path<span class=\"token operator\">=</span><span class=\"token string\">\"./chromedriver\"</span><span class=\"token punctuation\">,</span> chrome_options<span class=\"token operator\">=</span>chrome_options<span class=\"token punctuation\">)</span>\nbrower<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>brower<span class=\"token punctuation\">.</span>current_url<span class=\"token punctuation\">)</span>\nbrower<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">\"https://www.west.cn/Manager/\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>brower<span class=\"token punctuation\">.</span>current_url<span class=\"token punctuation\">)</span>\nbrower<span class=\"token punctuation\">.</span>quit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h3><p><a href=\"https://www.cnblogs.com/huchong/p/10796823.html\">centos7无GUI运行selenium chromedriver 亲测可用！</a></p>\n"},{"title":"Hexo 博客备份与恢复","author":"Will Holmes","date":"2021-11-15T04:55:46.000Z","_content":"\n# Hexo 博客备份与恢复\n\n本文旨在解决在不同电脑上都能维护博客或配置、发布的内容丢失可恢复的问题。\n观察部署到仓库的内容，我们可以看到上传的内容是 `public` 文件夹下的所有内容。事实上 `hexo-deploy-git` 插件是通过拷贝 `public` 文件夹内容到 `.deploy_git` 文件夹下，然后提交推送到远程分支上实现了网站文件的部署。\n那我们的备份思路也可以这样，上传目录下的其他所有文件就可以了，同时我们不能修改博客的发布分支，因此考虑备份其他所有文件到新分支中。\n最简单直接的方法就是在仓库创建一个新的分支，把本地所有的内容都上传到该分支上。但这样会备份一部分不必要的文件，例如 `public` 文件夹内容，它可以再次生成，就没有必要备份。\n那具体要备份哪些文件呢？\n## 备份\n### 备份的文件列表\n我们先看下，现在博客文件夹都有什么内容：\n\n\n```\n.\n├──_config.yml\n├── db.json\n├── node_modules\n├── package.json\n├── package-lock.json\n├── public\n├── scaffolds\n├── source\n└── themes \n\t├── next \n\t└── landscape\n```\n这几个文件或文件夹的内容分别是：\n1. `_config.yml` 文件：站点配置文件，很多功能、插件需要修改该配置文件应用生效。\n2. `node_modules` 文件夹：包含依赖的模块。\n3. `package.json` 文件：依赖的模块列表。说明见：[package.json:Specifics of npm’s package.json handling](https://www.npmjs.cn/files/package.json/)\n4. `package-lock.json` 文件：依赖的模块安装记录。说明见：[npm-package-locks:An explanation of npm lockfiles](https://www.npmjs.cn/files/package-locks/)\n5. `public` 文件夹：包含生成的网页静态文件。\n6. `scaffolds` 文件夹：包含创建的文章、分类、标签界面的模板。博客的定制修改会对模板进行修改。\n7. `source` 文件夹：包含生成网页所需要的源文件，包括包含我们心血的 Markdown 文稿，这也是最重要的内容。\n8. `themes` 文件夹：其中 `landscape` 是默认的主题，其他文件夹是克隆下来时的主题。\n我们可以参考 Hexo 初始化使用的仓库的备份列表，它的仓库是 [hexojs/hexo-starter](https://github.com/hexojs/hexo-starter)。我们看下它备份了哪些内容：\n\n\n```\nscaffolds\nsource\nthemes\n.gitignore\n.gitmodules\n_config.yml\npackage.json\n```\n\n比对一下，它抛弃了：\n1. `node_modules` & `package-lock.json`：这两部分内容，只要保留 `package.json`，执行 `npm install` 就可以下载、生成。\n2. `public`：执行 `hexo g` 即可根据源文件生成网页内容。\n这些可重新生成的文件都可以不上传，因为它们只要使用特定的命令操作即可恢复。\n它增加了 `.gitmodules`，那它的作用又是什么呢？其实 `hexojs/hexo-starter` 是通过 Git 的 Submodule 功能来下载主题模块，本身仓库并不备份主题文件。考虑下我们需要如何备份主题文件目录，有两个方案：\n1. 一个方案是将其内容全部上传进行备份，这样可以保证原主题的更新不会影响你原先配置的效果。\n2. 另一个方案是像 `hexo-starter` 仓库一样通过 Git 的 Submodule 功能来管理，这样可以进行主题的更新。\n这里我选择和 Hexo 初始化仓库一样使用 Git 子模块的方式进行主题的备份处理。不过通过子模块管理的方式我们恢复时仅会同步到 Next 主题的原文件，没法直接同步我们对主题配置文件或其他文件的修改，因为我们没有权限提交修改到 Next 仓库中。因此我创建了了个 `themes_custom` 文件夹来存放对应主题的修改的备份，这样子我们同步之后，只需要对比一下内容手动把这些配置应用过去就可以快速完成对主题的配置。\n最终备份文件列表如下：\n\n```\nscaffolds\nsource\nthemes\nthemes_custom/next\n.gitignore\n.gitmodules\n_config.yml\npackage.json\n```\n### 具体操作\n有了方案之后，我们备份的具体操作如下：\n1. 先修改 `.gitignore` 文件，查看之后由于原文件已经忽略了 `public` 和 `node_modules` 文件夹，因此仅需要添加 `package-lock.json` 到忽略清单中。\n2. 我们可以删除不使用的主题 `landscape` 或者把主题路径添加到忽略列表中。\n3. 创建 `themes_custom/next` 文件夹，将对主题进行的配件修改的文件拷贝一份到这里\n4. 执行以下命令，在本地创建备份仓库：\n\n```bash\n$ cd blog\n$ git init\n#已初始化空的 Git 仓库于 blog/.git/\n$ git submodule add https://github.com/theme-next/hexo-theme-next.git themes/next\n#添加位于 'themes/next' 的现存仓库到索引\n$ git add .$ git commit -m \"init blog backup\"\n```\n\n1. 将备份内容 push 到远程仓库的备份分支 `hexo` 上：\n\n```bash\n$ git branch -m master hexo\n$ git remote add origin https://github.com/Mupceet/mupceet.github.io.git\n$ git push -u origin hexo:hexo\n```\n 这里，我对分支进行了重命名以减少记忆负担\n经过以上步骤，我们就备份了所有必要的文件。后续更新博客也要及时地将这些文件进行提交并上传完成备份。\n## 恢复\n有了备份之后，在另一台电脑上创建博客，或者是恢复备份时，就可以直接使用我们备份的内容进行操作。\n1. 环境准备\n 具体见 [Hexo 博客搭建与主题配置（零基础版）](https://mupceet.com/2019/08/build-blog-based-on-hexo/)一文。\n2. 克隆备份的内容\n\n```bash\n$ git clone --recursive -b hexo https://github.com/Mupceet/mupceet.github.io.git blog\n```\n1. 下载 npm 依赖模块\n\n```bash\n$ cd blog$ npm install\n```\n\n1. 恢复主题配置\n 将 `themes_custom` 文件夹中对主题的配置的修改恢复到对应的主题文件夹中，这里建议使用对比的方式对其进行修改，而不是直接覆盖，这样就完成了主题的配置。\n5. 克隆原博客内容\n\n```bash\n$ cd blog$ git clone https://github.com/Mupceet/mupceet.github.io.git .deploy\\_git\n```\n\n1. 正常更新博客\n\n```bash\n$ hexo g\n$ hexo s\n$ hexo d\n```\n可以看到，使用备份文件恢复博客的环境是非常简单的，强烈建议大家搭建好博客之后增加一个备份操作。","source":"_posts/Hexo 博客备份与恢复.md","raw":"---\ntitle: Hexo 博客备份与恢复 \nauthor: Will Holmes\ncategories: Hexo\ntags:\n\t- Hexo\n\t- 备份\ndate: 2021-11-15 12:55:46\n---\n\n# Hexo 博客备份与恢复\n\n本文旨在解决在不同电脑上都能维护博客或配置、发布的内容丢失可恢复的问题。\n观察部署到仓库的内容，我们可以看到上传的内容是 `public` 文件夹下的所有内容。事实上 `hexo-deploy-git` 插件是通过拷贝 `public` 文件夹内容到 `.deploy_git` 文件夹下，然后提交推送到远程分支上实现了网站文件的部署。\n那我们的备份思路也可以这样，上传目录下的其他所有文件就可以了，同时我们不能修改博客的发布分支，因此考虑备份其他所有文件到新分支中。\n最简单直接的方法就是在仓库创建一个新的分支，把本地所有的内容都上传到该分支上。但这样会备份一部分不必要的文件，例如 `public` 文件夹内容，它可以再次生成，就没有必要备份。\n那具体要备份哪些文件呢？\n## 备份\n### 备份的文件列表\n我们先看下，现在博客文件夹都有什么内容：\n\n\n```\n.\n├──_config.yml\n├── db.json\n├── node_modules\n├── package.json\n├── package-lock.json\n├── public\n├── scaffolds\n├── source\n└── themes \n\t├── next \n\t└── landscape\n```\n这几个文件或文件夹的内容分别是：\n1. `_config.yml` 文件：站点配置文件，很多功能、插件需要修改该配置文件应用生效。\n2. `node_modules` 文件夹：包含依赖的模块。\n3. `package.json` 文件：依赖的模块列表。说明见：[package.json:Specifics of npm’s package.json handling](https://www.npmjs.cn/files/package.json/)\n4. `package-lock.json` 文件：依赖的模块安装记录。说明见：[npm-package-locks:An explanation of npm lockfiles](https://www.npmjs.cn/files/package-locks/)\n5. `public` 文件夹：包含生成的网页静态文件。\n6. `scaffolds` 文件夹：包含创建的文章、分类、标签界面的模板。博客的定制修改会对模板进行修改。\n7. `source` 文件夹：包含生成网页所需要的源文件，包括包含我们心血的 Markdown 文稿，这也是最重要的内容。\n8. `themes` 文件夹：其中 `landscape` 是默认的主题，其他文件夹是克隆下来时的主题。\n我们可以参考 Hexo 初始化使用的仓库的备份列表，它的仓库是 [hexojs/hexo-starter](https://github.com/hexojs/hexo-starter)。我们看下它备份了哪些内容：\n\n\n```\nscaffolds\nsource\nthemes\n.gitignore\n.gitmodules\n_config.yml\npackage.json\n```\n\n比对一下，它抛弃了：\n1. `node_modules` & `package-lock.json`：这两部分内容，只要保留 `package.json`，执行 `npm install` 就可以下载、生成。\n2. `public`：执行 `hexo g` 即可根据源文件生成网页内容。\n这些可重新生成的文件都可以不上传，因为它们只要使用特定的命令操作即可恢复。\n它增加了 `.gitmodules`，那它的作用又是什么呢？其实 `hexojs/hexo-starter` 是通过 Git 的 Submodule 功能来下载主题模块，本身仓库并不备份主题文件。考虑下我们需要如何备份主题文件目录，有两个方案：\n1. 一个方案是将其内容全部上传进行备份，这样可以保证原主题的更新不会影响你原先配置的效果。\n2. 另一个方案是像 `hexo-starter` 仓库一样通过 Git 的 Submodule 功能来管理，这样可以进行主题的更新。\n这里我选择和 Hexo 初始化仓库一样使用 Git 子模块的方式进行主题的备份处理。不过通过子模块管理的方式我们恢复时仅会同步到 Next 主题的原文件，没法直接同步我们对主题配置文件或其他文件的修改，因为我们没有权限提交修改到 Next 仓库中。因此我创建了了个 `themes_custom` 文件夹来存放对应主题的修改的备份，这样子我们同步之后，只需要对比一下内容手动把这些配置应用过去就可以快速完成对主题的配置。\n最终备份文件列表如下：\n\n```\nscaffolds\nsource\nthemes\nthemes_custom/next\n.gitignore\n.gitmodules\n_config.yml\npackage.json\n```\n### 具体操作\n有了方案之后，我们备份的具体操作如下：\n1. 先修改 `.gitignore` 文件，查看之后由于原文件已经忽略了 `public` 和 `node_modules` 文件夹，因此仅需要添加 `package-lock.json` 到忽略清单中。\n2. 我们可以删除不使用的主题 `landscape` 或者把主题路径添加到忽略列表中。\n3. 创建 `themes_custom/next` 文件夹，将对主题进行的配件修改的文件拷贝一份到这里\n4. 执行以下命令，在本地创建备份仓库：\n\n```bash\n$ cd blog\n$ git init\n#已初始化空的 Git 仓库于 blog/.git/\n$ git submodule add https://github.com/theme-next/hexo-theme-next.git themes/next\n#添加位于 'themes/next' 的现存仓库到索引\n$ git add .$ git commit -m \"init blog backup\"\n```\n\n1. 将备份内容 push 到远程仓库的备份分支 `hexo` 上：\n\n```bash\n$ git branch -m master hexo\n$ git remote add origin https://github.com/Mupceet/mupceet.github.io.git\n$ git push -u origin hexo:hexo\n```\n 这里，我对分支进行了重命名以减少记忆负担\n经过以上步骤，我们就备份了所有必要的文件。后续更新博客也要及时地将这些文件进行提交并上传完成备份。\n## 恢复\n有了备份之后，在另一台电脑上创建博客，或者是恢复备份时，就可以直接使用我们备份的内容进行操作。\n1. 环境准备\n 具体见 [Hexo 博客搭建与主题配置（零基础版）](https://mupceet.com/2019/08/build-blog-based-on-hexo/)一文。\n2. 克隆备份的内容\n\n```bash\n$ git clone --recursive -b hexo https://github.com/Mupceet/mupceet.github.io.git blog\n```\n1. 下载 npm 依赖模块\n\n```bash\n$ cd blog$ npm install\n```\n\n1. 恢复主题配置\n 将 `themes_custom` 文件夹中对主题的配置的修改恢复到对应的主题文件夹中，这里建议使用对比的方式对其进行修改，而不是直接覆盖，这样就完成了主题的配置。\n5. 克隆原博客内容\n\n```bash\n$ cd blog$ git clone https://github.com/Mupceet/mupceet.github.io.git .deploy\\_git\n```\n\n1. 正常更新博客\n\n```bash\n$ hexo g\n$ hexo s\n$ hexo d\n```\n可以看到，使用备份文件恢复博客的环境是非常简单的，强烈建议大家搭建好博客之后增加一个备份操作。","slug":"Hexo 博客备份与恢复","published":1,"updated":"2021-11-15T05:08:13.682Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckw4ars4u000btyox22up726p","content":"<h1 id=\"Hexo-博客备份与恢复\"><a href=\"#Hexo-博客备份与恢复\" class=\"headerlink\" title=\"Hexo 博客备份与恢复\"></a>Hexo 博客备份与恢复</h1><p>本文旨在解决在不同电脑上都能维护博客或配置、发布的内容丢失可恢复的问题。<br>观察部署到仓库的内容，我们可以看到上传的内容是 <code>public</code> 文件夹下的所有内容。事实上 <code>hexo-deploy-git</code> 插件是通过拷贝 <code>public</code> 文件夹内容到 <code>.deploy_git</code> 文件夹下，然后提交推送到远程分支上实现了网站文件的部署。<br>那我们的备份思路也可以这样，上传目录下的其他所有文件就可以了，同时我们不能修改博客的发布分支，因此考虑备份其他所有文件到新分支中。<br>最简单直接的方法就是在仓库创建一个新的分支，把本地所有的内容都上传到该分支上。但这样会备份一部分不必要的文件，例如 <code>public</code> 文件夹内容，它可以再次生成，就没有必要备份。<br>那具体要备份哪些文件呢？</p>\n<h2 id=\"备份\"><a href=\"#备份\" class=\"headerlink\" title=\"备份\"></a>备份</h2><h3 id=\"备份的文件列表\"><a href=\"#备份的文件列表\" class=\"headerlink\" title=\"备份的文件列表\"></a>备份的文件列表</h3><p>我们先看下，现在博客文件夹都有什么内容：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">.\n├──_config.yml\n├── db.json\n├── node_modules\n├── package.json\n├── package-lock.json\n├── public\n├── scaffolds\n├── source\n└── themes \n\t├── next \n\t└── landscape<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这几个文件或文件夹的内容分别是：</p>\n<ol>\n<li><code>_config.yml</code> 文件：站点配置文件，很多功能、插件需要修改该配置文件应用生效。</li>\n<li><code>node_modules</code> 文件夹：包含依赖的模块。</li>\n<li><code>package.json</code> 文件：依赖的模块列表。说明见：<a href=\"https://www.npmjs.cn/files/package.json/\">package.json:Specifics of npm’s package.json handling</a></li>\n<li><code>package-lock.json</code> 文件：依赖的模块安装记录。说明见：<a href=\"https://www.npmjs.cn/files/package-locks/\">npm-package-locks:An explanation of npm lockfiles</a></li>\n<li><code>public</code> 文件夹：包含生成的网页静态文件。</li>\n<li><code>scaffolds</code> 文件夹：包含创建的文章、分类、标签界面的模板。博客的定制修改会对模板进行修改。</li>\n<li><code>source</code> 文件夹：包含生成网页所需要的源文件，包括包含我们心血的 Markdown 文稿，这也是最重要的内容。</li>\n<li><code>themes</code> 文件夹：其中 <code>landscape</code> 是默认的主题，其他文件夹是克隆下来时的主题。<br>我们可以参考 Hexo 初始化使用的仓库的备份列表，它的仓库是 <a href=\"https://github.com/hexojs/hexo-starter\">hexojs/hexo-starter</a>。我们看下它备份了哪些内容：</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">scaffolds\nsource\nthemes\n.gitignore\n.gitmodules\n_config.yml\npackage.json<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>比对一下，它抛弃了：</p>\n<ol>\n<li><code>node_modules</code> &amp; <code>package-lock.json</code>：这两部分内容，只要保留 <code>package.json</code>，执行 <code>npm install</code> 就可以下载、生成。</li>\n<li><code>public</code>：执行 <code>hexo g</code> 即可根据源文件生成网页内容。<br>这些可重新生成的文件都可以不上传，因为它们只要使用特定的命令操作即可恢复。<br>它增加了 <code>.gitmodules</code>，那它的作用又是什么呢？其实 <code>hexojs/hexo-starter</code> 是通过 Git 的 Submodule 功能来下载主题模块，本身仓库并不备份主题文件。考虑下我们需要如何备份主题文件目录，有两个方案：</li>\n<li>一个方案是将其内容全部上传进行备份，这样可以保证原主题的更新不会影响你原先配置的效果。</li>\n<li>另一个方案是像 <code>hexo-starter</code> 仓库一样通过 Git 的 Submodule 功能来管理，这样可以进行主题的更新。<br>这里我选择和 Hexo 初始化仓库一样使用 Git 子模块的方式进行主题的备份处理。不过通过子模块管理的方式我们恢复时仅会同步到 Next 主题的原文件，没法直接同步我们对主题配置文件或其他文件的修改，因为我们没有权限提交修改到 Next 仓库中。因此我创建了了个 <code>themes_custom</code> 文件夹来存放对应主题的修改的备份，这样子我们同步之后，只需要对比一下内容手动把这些配置应用过去就可以快速完成对主题的配置。<br>最终备份文件列表如下：</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">scaffolds\nsource\nthemes\nthemes_custom&#x2F;next\n.gitignore\n.gitmodules\n_config.yml\npackage.json<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"具体操作\"><a href=\"#具体操作\" class=\"headerlink\" title=\"具体操作\"></a>具体操作</h3><p>有了方案之后，我们备份的具体操作如下：</p>\n<ol>\n<li>先修改 <code>.gitignore</code> 文件，查看之后由于原文件已经忽略了 <code>public</code> 和 <code>node_modules</code> 文件夹，因此仅需要添加 <code>package-lock.json</code> 到忽略清单中。</li>\n<li>我们可以删除不使用的主题 <code>landscape</code> 或者把主题路径添加到忽略列表中。</li>\n<li>创建 <code>themes_custom/next</code> 文件夹，将对主题进行的配件修改的文件拷贝一份到这里</li>\n<li>执行以下命令，在本地创建备份仓库：</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">cd</span> blog\n$ <span class=\"token function\">git</span> init\n<span class=\"token comment\">#已初始化空的 Git 仓库于 blog/.git/</span>\n$ <span class=\"token function\">git</span> submodule <span class=\"token function\">add</span> https://github.com/theme-next/hexo-theme-next.git themes/next\n<span class=\"token comment\">#添加位于 'themes/next' 的现存仓库到索引</span>\n$ <span class=\"token function\">git</span> <span class=\"token function\">add</span> .$ <span class=\"token function\">git</span> commit -m <span class=\"token string\">\"init blog backup\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol>\n<li>将备份内容 push 到远程仓库的备份分支 <code>hexo</code> 上：</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> branch -m master hexo\n$ <span class=\"token function\">git</span> remote <span class=\"token function\">add</span> origin https://github.com/Mupceet/mupceet.github.io.git\n$ <span class=\"token function\">git</span> push -u origin hexo:hexo<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p> 这里，我对分支进行了重命名以减少记忆负担<br>经过以上步骤，我们就备份了所有必要的文件。后续更新博客也要及时地将这些文件进行提交并上传完成备份。</p>\n<h2 id=\"恢复\"><a href=\"#恢复\" class=\"headerlink\" title=\"恢复\"></a>恢复</h2><p>有了备份之后，在另一台电脑上创建博客，或者是恢复备份时，就可以直接使用我们备份的内容进行操作。</p>\n<ol>\n<li>环境准备<br>具体见 <a href=\"https://mupceet.com/2019/08/build-blog-based-on-hexo/\">Hexo 博客搭建与主题配置（零基础版）</a>一文。</li>\n<li>克隆备份的内容</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> clone --recursive -b hexo https://github.com/Mupceet/mupceet.github.io.git blog<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ol>\n<li>下载 npm 依赖模块</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">cd</span> blog$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ol>\n<li>恢复主题配置<br>将 <code>themes_custom</code> 文件夹中对主题的配置的修改恢复到对应的主题文件夹中，这里建议使用对比的方式对其进行修改，而不是直接覆盖，这样就完成了主题的配置。</li>\n<li>克隆原博客内容</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">cd</span> blog$ <span class=\"token function\">git</span> clone https://github.com/Mupceet/mupceet.github.io.git .deploy<span class=\"token punctuation\">\\</span>_git<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ol>\n<li>正常更新博客</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo g\n$ hexo s\n$ hexo d<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>可以看到，使用备份文件恢复博客的环境是非常简单的，强烈建议大家搭建好博客之后增加一个备份操作。</p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"Hexo-博客备份与恢复\"><a href=\"#Hexo-博客备份与恢复\" class=\"headerlink\" title=\"Hexo 博客备份与恢复\"></a>Hexo 博客备份与恢复</h1><p>本文旨在解决在不同电脑上都能维护博客或配置、发布的内容丢失可恢复的问题。<br>观察部署到仓库的内容，我们可以看到上传的内容是 <code>public</code> 文件夹下的所有内容。事实上 <code>hexo-deploy-git</code> 插件是通过拷贝 <code>public</code> 文件夹内容到 <code>.deploy_git</code> 文件夹下，然后提交推送到远程分支上实现了网站文件的部署。<br>那我们的备份思路也可以这样，上传目录下的其他所有文件就可以了，同时我们不能修改博客的发布分支，因此考虑备份其他所有文件到新分支中。<br>最简单直接的方法就是在仓库创建一个新的分支，把本地所有的内容都上传到该分支上。但这样会备份一部分不必要的文件，例如 <code>public</code> 文件夹内容，它可以再次生成，就没有必要备份。<br>那具体要备份哪些文件呢？</p>\n<h2 id=\"备份\"><a href=\"#备份\" class=\"headerlink\" title=\"备份\"></a>备份</h2><h3 id=\"备份的文件列表\"><a href=\"#备份的文件列表\" class=\"headerlink\" title=\"备份的文件列表\"></a>备份的文件列表</h3><p>我们先看下，现在博客文件夹都有什么内容：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">.\n├──_config.yml\n├── db.json\n├── node_modules\n├── package.json\n├── package-lock.json\n├── public\n├── scaffolds\n├── source\n└── themes \n\t├── next \n\t└── landscape<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这几个文件或文件夹的内容分别是：</p>\n<ol>\n<li><code>_config.yml</code> 文件：站点配置文件，很多功能、插件需要修改该配置文件应用生效。</li>\n<li><code>node_modules</code> 文件夹：包含依赖的模块。</li>\n<li><code>package.json</code> 文件：依赖的模块列表。说明见：<a href=\"https://www.npmjs.cn/files/package.json/\">package.json:Specifics of npm’s package.json handling</a></li>\n<li><code>package-lock.json</code> 文件：依赖的模块安装记录。说明见：<a href=\"https://www.npmjs.cn/files/package-locks/\">npm-package-locks:An explanation of npm lockfiles</a></li>\n<li><code>public</code> 文件夹：包含生成的网页静态文件。</li>\n<li><code>scaffolds</code> 文件夹：包含创建的文章、分类、标签界面的模板。博客的定制修改会对模板进行修改。</li>\n<li><code>source</code> 文件夹：包含生成网页所需要的源文件，包括包含我们心血的 Markdown 文稿，这也是最重要的内容。</li>\n<li><code>themes</code> 文件夹：其中 <code>landscape</code> 是默认的主题，其他文件夹是克隆下来时的主题。<br>我们可以参考 Hexo 初始化使用的仓库的备份列表，它的仓库是 <a href=\"https://github.com/hexojs/hexo-starter\">hexojs/hexo-starter</a>。我们看下它备份了哪些内容：</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">scaffolds\nsource\nthemes\n.gitignore\n.gitmodules\n_config.yml\npackage.json<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>比对一下，它抛弃了：</p>\n<ol>\n<li><code>node_modules</code> &amp; <code>package-lock.json</code>：这两部分内容，只要保留 <code>package.json</code>，执行 <code>npm install</code> 就可以下载、生成。</li>\n<li><code>public</code>：执行 <code>hexo g</code> 即可根据源文件生成网页内容。<br>这些可重新生成的文件都可以不上传，因为它们只要使用特定的命令操作即可恢复。<br>它增加了 <code>.gitmodules</code>，那它的作用又是什么呢？其实 <code>hexojs/hexo-starter</code> 是通过 Git 的 Submodule 功能来下载主题模块，本身仓库并不备份主题文件。考虑下我们需要如何备份主题文件目录，有两个方案：</li>\n<li>一个方案是将其内容全部上传进行备份，这样可以保证原主题的更新不会影响你原先配置的效果。</li>\n<li>另一个方案是像 <code>hexo-starter</code> 仓库一样通过 Git 的 Submodule 功能来管理，这样可以进行主题的更新。<br>这里我选择和 Hexo 初始化仓库一样使用 Git 子模块的方式进行主题的备份处理。不过通过子模块管理的方式我们恢复时仅会同步到 Next 主题的原文件，没法直接同步我们对主题配置文件或其他文件的修改，因为我们没有权限提交修改到 Next 仓库中。因此我创建了了个 <code>themes_custom</code> 文件夹来存放对应主题的修改的备份，这样子我们同步之后，只需要对比一下内容手动把这些配置应用过去就可以快速完成对主题的配置。<br>最终备份文件列表如下：</li>\n</ol>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">scaffolds\nsource\nthemes\nthemes_custom&#x2F;next\n.gitignore\n.gitmodules\n_config.yml\npackage.json<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"具体操作\"><a href=\"#具体操作\" class=\"headerlink\" title=\"具体操作\"></a>具体操作</h3><p>有了方案之后，我们备份的具体操作如下：</p>\n<ol>\n<li>先修改 <code>.gitignore</code> 文件，查看之后由于原文件已经忽略了 <code>public</code> 和 <code>node_modules</code> 文件夹，因此仅需要添加 <code>package-lock.json</code> 到忽略清单中。</li>\n<li>我们可以删除不使用的主题 <code>landscape</code> 或者把主题路径添加到忽略列表中。</li>\n<li>创建 <code>themes_custom/next</code> 文件夹，将对主题进行的配件修改的文件拷贝一份到这里</li>\n<li>执行以下命令，在本地创建备份仓库：</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">cd</span> blog\n$ <span class=\"token function\">git</span> init\n<span class=\"token comment\">#已初始化空的 Git 仓库于 blog/.git/</span>\n$ <span class=\"token function\">git</span> submodule <span class=\"token function\">add</span> https://github.com/theme-next/hexo-theme-next.git themes/next\n<span class=\"token comment\">#添加位于 'themes/next' 的现存仓库到索引</span>\n$ <span class=\"token function\">git</span> <span class=\"token function\">add</span> .$ <span class=\"token function\">git</span> commit -m <span class=\"token string\">\"init blog backup\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ol>\n<li>将备份内容 push 到远程仓库的备份分支 <code>hexo</code> 上：</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> branch -m master hexo\n$ <span class=\"token function\">git</span> remote <span class=\"token function\">add</span> origin https://github.com/Mupceet/mupceet.github.io.git\n$ <span class=\"token function\">git</span> push -u origin hexo:hexo<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p> 这里，我对分支进行了重命名以减少记忆负担<br>经过以上步骤，我们就备份了所有必要的文件。后续更新博客也要及时地将这些文件进行提交并上传完成备份。</p>\n<h2 id=\"恢复\"><a href=\"#恢复\" class=\"headerlink\" title=\"恢复\"></a>恢复</h2><p>有了备份之后，在另一台电脑上创建博客，或者是恢复备份时，就可以直接使用我们备份的内容进行操作。</p>\n<ol>\n<li>环境准备<br>具体见 <a href=\"https://mupceet.com/2019/08/build-blog-based-on-hexo/\">Hexo 博客搭建与主题配置（零基础版）</a>一文。</li>\n<li>克隆备份的内容</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> clone --recursive -b hexo https://github.com/Mupceet/mupceet.github.io.git blog<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ol>\n<li>下载 npm 依赖模块</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">cd</span> blog$ <span class=\"token function\">npm</span> <span class=\"token function\">install</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ol>\n<li>恢复主题配置<br>将 <code>themes_custom</code> 文件夹中对主题的配置的修改恢复到对应的主题文件夹中，这里建议使用对比的方式对其进行修改，而不是直接覆盖，这样就完成了主题的配置。</li>\n<li>克隆原博客内容</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">cd</span> blog$ <span class=\"token function\">git</span> clone https://github.com/Mupceet/mupceet.github.io.git .deploy<span class=\"token punctuation\">\\</span>_git<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ol>\n<li>正常更新博客</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo g\n$ hexo s\n$ hexo d<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>可以看到，使用备份文件恢复博客的环境是非常简单的，强烈建议大家搭建好博客之后增加一个备份操作。</p>\n"},{"title":"IDEA导入/导出Live templates或者其他设置","author":"Will Holmes","date":"2021-11-06T20:21:42.000Z","_content":"\n\n# IDEA导入/导出live templates或者其他设置\n\n### 导出\n\n  1. 在菜单栏选择 `File` | `Manage IDE Settings` | `Export Settings`\n\n  2. 在打开的导出弹窗中，选择需要导出的项目，如果我们只需要导出 **Live templates** ，那就只选择 **Live templates** 即可，然后选择一个需要导出的位置并设置一个存储的文件名（默认是settings.zip）\n\n  3. 点击 **OK** 进行导出，导出的文件可以导入到其他IDEA中进行使用\n\n### 导入\n\n  1. 在菜单栏选择 `File` | `Manage IDE Settings` | `Import Settings`\n\n  2. 选择之前导出的配置文件，点击 **OK**\n\n  3. 在弹出的窗口中选择需要导入的项目，例如 **Live templates** 然后点击 **OK**\n\n  4. 重启IDEA使新配置生效\n\n### 参考\n\n> [Share live templates](https://www.jetbrains.com/help/idea/sharing-live-\n> templates.html#export)\n\n","source":"_posts/IDEA导入-导出Live templates或者其他设置.md","raw":"---\ntitle: IDEA导入/导出Live templates或者其他设置\nauthor: Will Holmes\ncategories: 工具\ntags:\n  - java\n  - Tools\n  - IDEA\ndate: 2021-11-07 04:21:42\n---\n\n\n# IDEA导入/导出live templates或者其他设置\n\n### 导出\n\n  1. 在菜单栏选择 `File` | `Manage IDE Settings` | `Export Settings`\n\n  2. 在打开的导出弹窗中，选择需要导出的项目，如果我们只需要导出 **Live templates** ，那就只选择 **Live templates** 即可，然后选择一个需要导出的位置并设置一个存储的文件名（默认是settings.zip）\n\n  3. 点击 **OK** 进行导出，导出的文件可以导入到其他IDEA中进行使用\n\n### 导入\n\n  1. 在菜单栏选择 `File` | `Manage IDE Settings` | `Import Settings`\n\n  2. 选择之前导出的配置文件，点击 **OK**\n\n  3. 在弹出的窗口中选择需要导入的项目，例如 **Live templates** 然后点击 **OK**\n\n  4. 重启IDEA使新配置生效\n\n### 参考\n\n> [Share live templates](https://www.jetbrains.com/help/idea/sharing-live-\n> templates.html#export)\n\n","slug":"IDEA导入-导出Live templates或者其他设置","published":1,"updated":"2021-11-06T20:23:00.355Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckw4ars4z000ftyox38vwewhz","content":"<h1 id=\"IDEA导入-导出live-templates或者其他设置\"><a href=\"#IDEA导入-导出live-templates或者其他设置\" class=\"headerlink\" title=\"IDEA导入/导出live templates或者其他设置\"></a>IDEA导入/导出live templates或者其他设置</h1><h3 id=\"导出\"><a href=\"#导出\" class=\"headerlink\" title=\"导出\"></a>导出</h3><ol>\n<li><p>在菜单栏选择 <code>File</code> | <code>Manage IDE Settings</code> | <code>Export Settings</code></p>\n</li>\n<li><p>在打开的导出弹窗中，选择需要导出的项目，如果我们只需要导出 <strong>Live templates</strong> ，那就只选择 <strong>Live templates</strong> 即可，然后选择一个需要导出的位置并设置一个存储的文件名（默认是settings.zip）</p>\n</li>\n<li><p>点击 <strong>OK</strong> 进行导出，导出的文件可以导入到其他IDEA中进行使用</p>\n</li>\n</ol>\n<h3 id=\"导入\"><a href=\"#导入\" class=\"headerlink\" title=\"导入\"></a>导入</h3><ol>\n<li><p>在菜单栏选择 <code>File</code> | <code>Manage IDE Settings</code> | <code>Import Settings</code></p>\n</li>\n<li><p>选择之前导出的配置文件，点击 <strong>OK</strong></p>\n</li>\n<li><p>在弹出的窗口中选择需要导入的项目，例如 <strong>Live templates</strong> 然后点击 <strong>OK</strong></p>\n</li>\n<li><p>重启IDEA使新配置生效</p>\n</li>\n</ol>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><blockquote>\n<p>[Share live templates](<a href=\"https://www.jetbrains.com/help/idea/sharing-live-\">https://www.jetbrains.com/help/idea/sharing-live-</a><br>templates.html#export)</p>\n</blockquote>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"IDEA导入-导出live-templates或者其他设置\"><a href=\"#IDEA导入-导出live-templates或者其他设置\" class=\"headerlink\" title=\"IDEA导入/导出live templates或者其他设置\"></a>IDEA导入/导出live templates或者其他设置</h1><h3 id=\"导出\"><a href=\"#导出\" class=\"headerlink\" title=\"导出\"></a>导出</h3><ol>\n<li><p>在菜单栏选择 <code>File</code> | <code>Manage IDE Settings</code> | <code>Export Settings</code></p>\n</li>\n<li><p>在打开的导出弹窗中，选择需要导出的项目，如果我们只需要导出 <strong>Live templates</strong> ，那就只选择 <strong>Live templates</strong> 即可，然后选择一个需要导出的位置并设置一个存储的文件名（默认是settings.zip）</p>\n</li>\n<li><p>点击 <strong>OK</strong> 进行导出，导出的文件可以导入到其他IDEA中进行使用</p>\n</li>\n</ol>\n<h3 id=\"导入\"><a href=\"#导入\" class=\"headerlink\" title=\"导入\"></a>导入</h3><ol>\n<li><p>在菜单栏选择 <code>File</code> | <code>Manage IDE Settings</code> | <code>Import Settings</code></p>\n</li>\n<li><p>选择之前导出的配置文件，点击 <strong>OK</strong></p>\n</li>\n<li><p>在弹出的窗口中选择需要导入的项目，例如 <strong>Live templates</strong> 然后点击 <strong>OK</strong></p>\n</li>\n<li><p>重启IDEA使新配置生效</p>\n</li>\n</ol>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><blockquote>\n<p>[Share live templates](<a href=\"https://www.jetbrains.com/help/idea/sharing-live-\">https://www.jetbrains.com/help/idea/sharing-live-</a><br>templates.html#export)</p>\n</blockquote>\n"},{"title":"Intellij IDEA破解补丁FineAgent，可破解至2099","author":"Will Holmes","date":"2021-11-18T01:33:41.000Z","_content":"\n有网友问我，IDEA 产品能否永久激活呢？目前，我在网上逛了一圈，又发现某大佬开发了一款新的破解补丁，叫**FineAgent**，如下图所示：\n![IDEA破解成功](http://img.javatiku.cn/20210812172447.png \"IDEA破解成功\")\n\n# 说明\n* 本教程适用于**JetBrains 全系列产品，可放心使用；\n* 本教程适用于 **Windows**/**Mac**/**Linux** 系统；\n* 本教程适用于 **JetBrains 全系列产品**，包括 **IntelliJ IDEA**、**APPCode**、**CLion**、**DataGrip**、**GoLand**、**PhpStorm**、**PyCharm**、**Rider**、**RubyMine** 和 **WebStorm**。\n\n# 教程演示\n下面的教程演示使用的是 **Windows** 系统，安装的 **IDEA 版本为 2021.2**。\n\n### 1、下载自己需要的IDEA\nIDEA 老版本下载地址：<https://www.jetbrains.com/zh-cn/idea/download/other.html>\n\n### 2、安装IDEA\n这个操作就easy了，我们按照常规的安装方式安装就行，我就不详细说了。\n如果你真的不会的话，那说明你确实不太适合做程序员~\n\n### 3、重置IDEA并点击试用\n1）如果你的IDEA是新安装的，可以直接点击 **试用**，跳过这一步接下来的操作。\n![IDEA试用](http://img.javatiku.cn/20210424231958.png \"IDEA试用\")\n2）如果你的电脑之前安装过IDEA且超过试用期（还在试用期的可以忽略该步骤），可以直接通过我这里提供的重置脚本进行重置就行，其原理是删除jetbrains全系列产品软件试用相关目录（其他配置不受影响）。\n![IDEA重置脚本](http://img.javatiku.cn/20210423185059.png \"IDEA重置脚本\")\nIDEA重置脚本安全可靠，大家可以看看下面的源码哈：\n![IDEA重置脚本](http://img.javatiku.cn/20210423185142.png \"IDEA重置脚本\")\n重置IDEA之后，打开IDEA，点击试用，按照图示选择试用。\n![IDEA试用](http://img.javatiku.cn/20210424231958.png \"IDEA试用\")\n**说明：最新的 IDEA 2021.2.3 版本 IDEA 界面发生了变化，取消了直接试用 30 天的按钮，需要我们先注册一个 JetBrains（这里我用的 GitHub 账号注册的）**，如下:\n![IDEA试用](http://www.javatiku.cn/usr/img/4816dd4fc758afa9e0e4e717059ed162.png \"IDEA试用\")\n注册账号并登录后，就可以试用 IDEA 了：\n![IDEA试用](http://www.javatiku.cn/usr/img/96f2e7b62949112c63fe5eb498bd2d64.png \"IDEA试用\")\n\n### 4、下载破解补丁\n该破解方法需要用到的文件都准备好了，通过下方的网盘链接下载就行。\n\n\n###### [蓝奏云下载](https://wwe.lanzoui.com/iWZ0Nwm96od)\n\n压缩包目录结构：\n```\nFineAgent.zip\n|---激活码\n|---FineAgent.jar\nreset_script.zip\n```\n\n\n### 5、安装破解补丁\n如果你之前安装过 IDEA, 那么修改过的 hosts 文件要还原回去、引用过的补丁要移除掉等, 不然可能会有各种奇奇怪怪的问题。\n打开IDEA，你可以在Help -> Eidt Custom VM Options... ，参考如下图所示:\n![安装破解补丁](http://img.javatiku.cn/20210812172939.png \"安装破解补丁\")\n由于我把压缩包内的`FineAgent.jar`直接放在D盘的根目录，所以一定要先清除vmoptions文件内其它的`-javaagent:xxx`配置（否则会存在IDEA打不开的情况），然后再在最后一行加上如下代码：\n```\n-javaagent:d:/FineAgent.jar\n```\n![IDEA破解教程](http://img.javatiku.cn/20210812173210.png \"IDEA破解教程\")\n\n### 6、重启IDEA\n安装完成后，重启 idea。\n\n### 7、通过指定的注册码来激活IDEA\n重启后，便会提示你输入激活码，激活码在压缩包内 `ActivationCode.txt` ，这时，你可以用压缩包内的激活码进行激活，如下图\n![IDEA激活码](http://img.javatiku.cn/20210812173504.png \"IDEA激活码\")\n此时，点击Activate，便激活成功了。\n\n### 8、如何验证是否激活成功呢？\n你直接进入 IDEA 主界面，在上方的菜单栏点击 `Help` -> `Register` 查看当前激活状态。\n![IDEA破解教程](http://img.javatiku.cn/20210812173753.png \"IDEA破解教程\")\n这时候你就可以看到，已经激活至 2099 年啦，爽歪歪~\n![IDEA破解教程](http://img.javatiku.cn/20210812173856.png \"IDEA破解教程\")\n\n### 为何IDEA打不开？\n一个最主要的原因是：你在`vmoptions`文件配置的路径不对。\n如果你想打开IDEA，那么需要找到以`vmoptions`后缀结尾的文件(一般位于`C:\\Users\\用户名\\AppData\\Roaming\\JetBrains\\IntelliJIdea2021.2`目录下)，找到 `idea64.exe.vmoptions`，打开之后，删除 -javaagent:xxx的信息，即可打开，虽然IDEA能打开了，但是很不幸你未破解成功！\n要想重新破解，那么请重复上述步骤！！！\n希望本教程对你有所帮助！\n\n\n### 引用\n[http://www.javatiku.cn/idea/5.html](http://www.javatiku.cn/idea/5.html)","source":"_posts/Intellij IDEA破解教程，IDEA破解补丁FineAgent，可破解至 2099 年.md","raw":"---\ntitle: Intellij IDEA破解补丁FineAgent，可破解至2099\nauthor: Will Holmes\ncategories: 工具\ntags:\n - IDEA\n - 破解\n - 教程\ndate: 2021-11-18 09:33:41\n---\n\n有网友问我，IDEA 产品能否永久激活呢？目前，我在网上逛了一圈，又发现某大佬开发了一款新的破解补丁，叫**FineAgent**，如下图所示：\n![IDEA破解成功](http://img.javatiku.cn/20210812172447.png \"IDEA破解成功\")\n\n# 说明\n* 本教程适用于**JetBrains 全系列产品，可放心使用；\n* 本教程适用于 **Windows**/**Mac**/**Linux** 系统；\n* 本教程适用于 **JetBrains 全系列产品**，包括 **IntelliJ IDEA**、**APPCode**、**CLion**、**DataGrip**、**GoLand**、**PhpStorm**、**PyCharm**、**Rider**、**RubyMine** 和 **WebStorm**。\n\n# 教程演示\n下面的教程演示使用的是 **Windows** 系统，安装的 **IDEA 版本为 2021.2**。\n\n### 1、下载自己需要的IDEA\nIDEA 老版本下载地址：<https://www.jetbrains.com/zh-cn/idea/download/other.html>\n\n### 2、安装IDEA\n这个操作就easy了，我们按照常规的安装方式安装就行，我就不详细说了。\n如果你真的不会的话，那说明你确实不太适合做程序员~\n\n### 3、重置IDEA并点击试用\n1）如果你的IDEA是新安装的，可以直接点击 **试用**，跳过这一步接下来的操作。\n![IDEA试用](http://img.javatiku.cn/20210424231958.png \"IDEA试用\")\n2）如果你的电脑之前安装过IDEA且超过试用期（还在试用期的可以忽略该步骤），可以直接通过我这里提供的重置脚本进行重置就行，其原理是删除jetbrains全系列产品软件试用相关目录（其他配置不受影响）。\n![IDEA重置脚本](http://img.javatiku.cn/20210423185059.png \"IDEA重置脚本\")\nIDEA重置脚本安全可靠，大家可以看看下面的源码哈：\n![IDEA重置脚本](http://img.javatiku.cn/20210423185142.png \"IDEA重置脚本\")\n重置IDEA之后，打开IDEA，点击试用，按照图示选择试用。\n![IDEA试用](http://img.javatiku.cn/20210424231958.png \"IDEA试用\")\n**说明：最新的 IDEA 2021.2.3 版本 IDEA 界面发生了变化，取消了直接试用 30 天的按钮，需要我们先注册一个 JetBrains（这里我用的 GitHub 账号注册的）**，如下:\n![IDEA试用](http://www.javatiku.cn/usr/img/4816dd4fc758afa9e0e4e717059ed162.png \"IDEA试用\")\n注册账号并登录后，就可以试用 IDEA 了：\n![IDEA试用](http://www.javatiku.cn/usr/img/96f2e7b62949112c63fe5eb498bd2d64.png \"IDEA试用\")\n\n### 4、下载破解补丁\n该破解方法需要用到的文件都准备好了，通过下方的网盘链接下载就行。\n\n\n###### [蓝奏云下载](https://wwe.lanzoui.com/iWZ0Nwm96od)\n\n压缩包目录结构：\n```\nFineAgent.zip\n|---激活码\n|---FineAgent.jar\nreset_script.zip\n```\n\n\n### 5、安装破解补丁\n如果你之前安装过 IDEA, 那么修改过的 hosts 文件要还原回去、引用过的补丁要移除掉等, 不然可能会有各种奇奇怪怪的问题。\n打开IDEA，你可以在Help -> Eidt Custom VM Options... ，参考如下图所示:\n![安装破解补丁](http://img.javatiku.cn/20210812172939.png \"安装破解补丁\")\n由于我把压缩包内的`FineAgent.jar`直接放在D盘的根目录，所以一定要先清除vmoptions文件内其它的`-javaagent:xxx`配置（否则会存在IDEA打不开的情况），然后再在最后一行加上如下代码：\n```\n-javaagent:d:/FineAgent.jar\n```\n![IDEA破解教程](http://img.javatiku.cn/20210812173210.png \"IDEA破解教程\")\n\n### 6、重启IDEA\n安装完成后，重启 idea。\n\n### 7、通过指定的注册码来激活IDEA\n重启后，便会提示你输入激活码，激活码在压缩包内 `ActivationCode.txt` ，这时，你可以用压缩包内的激活码进行激活，如下图\n![IDEA激活码](http://img.javatiku.cn/20210812173504.png \"IDEA激活码\")\n此时，点击Activate，便激活成功了。\n\n### 8、如何验证是否激活成功呢？\n你直接进入 IDEA 主界面，在上方的菜单栏点击 `Help` -> `Register` 查看当前激活状态。\n![IDEA破解教程](http://img.javatiku.cn/20210812173753.png \"IDEA破解教程\")\n这时候你就可以看到，已经激活至 2099 年啦，爽歪歪~\n![IDEA破解教程](http://img.javatiku.cn/20210812173856.png \"IDEA破解教程\")\n\n### 为何IDEA打不开？\n一个最主要的原因是：你在`vmoptions`文件配置的路径不对。\n如果你想打开IDEA，那么需要找到以`vmoptions`后缀结尾的文件(一般位于`C:\\Users\\用户名\\AppData\\Roaming\\JetBrains\\IntelliJIdea2021.2`目录下)，找到 `idea64.exe.vmoptions`，打开之后，删除 -javaagent:xxx的信息，即可打开，虽然IDEA能打开了，但是很不幸你未破解成功！\n要想重新破解，那么请重复上述步骤！！！\n希望本教程对你有所帮助！\n\n\n### 引用\n[http://www.javatiku.cn/idea/5.html](http://www.javatiku.cn/idea/5.html)","slug":"Intellij IDEA破解教程，IDEA破解补丁FineAgent，可破解至 2099 年","published":1,"updated":"2021-11-18T01:49:39.556Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckw4ars52000gtyox0z0sakm7","content":"<p>有网友问我，IDEA 产品能否永久激活呢？目前，我在网上逛了一圈，又发现某大佬开发了一款新的破解补丁，叫<strong>FineAgent</strong>，如下图所示：<br><img src=\"http://img.javatiku.cn/20210812172447.png\" alt=\"IDEA破解成功\" title=\"IDEA破解成功\"></p>\n<h1 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h1><ul>\n<li>本教程适用于**JetBrains 全系列产品，可放心使用；</li>\n<li>本教程适用于 <strong>Windows</strong>/<strong>Mac</strong>/<strong>Linux</strong> 系统；</li>\n<li>本教程适用于 <strong>JetBrains 全系列产品</strong>，包括 <strong>IntelliJ IDEA</strong>、<strong>APPCode</strong>、<strong>CLion</strong>、<strong>DataGrip</strong>、<strong>GoLand</strong>、<strong>PhpStorm</strong>、<strong>PyCharm</strong>、<strong>Rider</strong>、<strong>RubyMine</strong> 和 <strong>WebStorm</strong>。</li>\n</ul>\n<h1 id=\"教程演示\"><a href=\"#教程演示\" class=\"headerlink\" title=\"教程演示\"></a>教程演示</h1><p>下面的教程演示使用的是 <strong>Windows</strong> 系统，安装的 <strong>IDEA 版本为 2021.2</strong>。</p>\n<h3 id=\"1、下载自己需要的IDEA\"><a href=\"#1、下载自己需要的IDEA\" class=\"headerlink\" title=\"1、下载自己需要的IDEA\"></a>1、下载自己需要的IDEA</h3><p>IDEA 老版本下载地址：<a href=\"https://www.jetbrains.com/zh-cn/idea/download/other.html\">https://www.jetbrains.com/zh-cn/idea/download/other.html</a></p>\n<h3 id=\"2、安装IDEA\"><a href=\"#2、安装IDEA\" class=\"headerlink\" title=\"2、安装IDEA\"></a>2、安装IDEA</h3><p>这个操作就easy了，我们按照常规的安装方式安装就行，我就不详细说了。<br>如果你真的不会的话，那说明你确实不太适合做程序员~</p>\n<h3 id=\"3、重置IDEA并点击试用\"><a href=\"#3、重置IDEA并点击试用\" class=\"headerlink\" title=\"3、重置IDEA并点击试用\"></a>3、重置IDEA并点击试用</h3><p>1）如果你的IDEA是新安装的，可以直接点击 <strong>试用</strong>，跳过这一步接下来的操作。<br><img src=\"http://img.javatiku.cn/20210424231958.png\" alt=\"IDEA试用\" title=\"IDEA试用\"><br>2）如果你的电脑之前安装过IDEA且超过试用期（还在试用期的可以忽略该步骤），可以直接通过我这里提供的重置脚本进行重置就行，其原理是删除jetbrains全系列产品软件试用相关目录（其他配置不受影响）。<br><img src=\"http://img.javatiku.cn/20210423185059.png\" alt=\"IDEA重置脚本\" title=\"IDEA重置脚本\"><br>IDEA重置脚本安全可靠，大家可以看看下面的源码哈：<br><img src=\"http://img.javatiku.cn/20210423185142.png\" alt=\"IDEA重置脚本\" title=\"IDEA重置脚本\"><br>重置IDEA之后，打开IDEA，点击试用，按照图示选择试用。<br><img src=\"http://img.javatiku.cn/20210424231958.png\" alt=\"IDEA试用\" title=\"IDEA试用\"><br><strong>说明：最新的 IDEA 2021.2.3 版本 IDEA 界面发生了变化，取消了直接试用 30 天的按钮，需要我们先注册一个 JetBrains（这里我用的 GitHub 账号注册的）</strong>，如下:<br><img src=\"http://www.javatiku.cn/usr/img/4816dd4fc758afa9e0e4e717059ed162.png\" alt=\"IDEA试用\" title=\"IDEA试用\"><br>注册账号并登录后，就可以试用 IDEA 了：<br><img src=\"http://www.javatiku.cn/usr/img/96f2e7b62949112c63fe5eb498bd2d64.png\" alt=\"IDEA试用\" title=\"IDEA试用\"></p>\n<h3 id=\"4、下载破解补丁\"><a href=\"#4、下载破解补丁\" class=\"headerlink\" title=\"4、下载破解补丁\"></a>4、下载破解补丁</h3><p>该破解方法需要用到的文件都准备好了，通过下方的网盘链接下载就行。</p>\n<h6 id=\"蓝奏云下载\"><a href=\"#蓝奏云下载\" class=\"headerlink\" title=\"蓝奏云下载\"></a><a href=\"https://wwe.lanzoui.com/iWZ0Nwm96od\">蓝奏云下载</a></h6><p>压缩包目录结构：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">FineAgent.zip\n|---激活码\n|---FineAgent.jar\nreset_script.zip<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h3 id=\"5、安装破解补丁\"><a href=\"#5、安装破解补丁\" class=\"headerlink\" title=\"5、安装破解补丁\"></a>5、安装破解补丁</h3><p>如果你之前安装过 IDEA, 那么修改过的 hosts 文件要还原回去、引用过的补丁要移除掉等, 不然可能会有各种奇奇怪怪的问题。<br>打开IDEA，你可以在Help -&gt; Eidt Custom VM Options… ，参考如下图所示:<br><img src=\"http://img.javatiku.cn/20210812172939.png\" alt=\"安装破解补丁\" title=\"安装破解补丁\"><br>由于我把压缩包内的<code>FineAgent.jar</code>直接放在D盘的根目录，所以一定要先清除vmoptions文件内其它的<code>-javaagent:xxx</code>配置（否则会存在IDEA打不开的情况），然后再在最后一行加上如下代码：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">-javaagent:d:&#x2F;FineAgent.jar<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"http://img.javatiku.cn/20210812173210.png\" alt=\"IDEA破解教程\" title=\"IDEA破解教程\"></p>\n<h3 id=\"6、重启IDEA\"><a href=\"#6、重启IDEA\" class=\"headerlink\" title=\"6、重启IDEA\"></a>6、重启IDEA</h3><p>安装完成后，重启 idea。</p>\n<h3 id=\"7、通过指定的注册码来激活IDEA\"><a href=\"#7、通过指定的注册码来激活IDEA\" class=\"headerlink\" title=\"7、通过指定的注册码来激活IDEA\"></a>7、通过指定的注册码来激活IDEA</h3><p>重启后，便会提示你输入激活码，激活码在压缩包内 <code>ActivationCode.txt</code> ，这时，你可以用压缩包内的激活码进行激活，如下图<br><img src=\"http://img.javatiku.cn/20210812173504.png\" alt=\"IDEA激活码\" title=\"IDEA激活码\"><br>此时，点击Activate，便激活成功了。</p>\n<h3 id=\"8、如何验证是否激活成功呢？\"><a href=\"#8、如何验证是否激活成功呢？\" class=\"headerlink\" title=\"8、如何验证是否激活成功呢？\"></a>8、如何验证是否激活成功呢？</h3><p>你直接进入 IDEA 主界面，在上方的菜单栏点击 <code>Help</code> -&gt; <code>Register</code> 查看当前激活状态。<br><img src=\"http://img.javatiku.cn/20210812173753.png\" alt=\"IDEA破解教程\" title=\"IDEA破解教程\"><br>这时候你就可以看到，已经激活至 2099 年啦，爽歪歪~<br><img src=\"http://img.javatiku.cn/20210812173856.png\" alt=\"IDEA破解教程\" title=\"IDEA破解教程\"></p>\n<h3 id=\"为何IDEA打不开？\"><a href=\"#为何IDEA打不开？\" class=\"headerlink\" title=\"为何IDEA打不开？\"></a>为何IDEA打不开？</h3><p>一个最主要的原因是：你在<code>vmoptions</code>文件配置的路径不对。<br>如果你想打开IDEA，那么需要找到以<code>vmoptions</code>后缀结尾的文件(一般位于<code>C:\\Users\\用户名\\AppData\\Roaming\\JetBrains\\IntelliJIdea2021.2</code>目录下)，找到 <code>idea64.exe.vmoptions</code>，打开之后，删除 -javaagent:xxx的信息，即可打开，虽然IDEA能打开了，但是很不幸你未破解成功！<br>要想重新破解，那么请重复上述步骤！！！<br>希望本教程对你有所帮助！</p>\n<h3 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h3><p><a href=\"http://www.javatiku.cn/idea/5.html\">http://www.javatiku.cn/idea/5.html</a></p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>有网友问我，IDEA 产品能否永久激活呢？目前，我在网上逛了一圈，又发现某大佬开发了一款新的破解补丁，叫<strong>FineAgent</strong>，如下图所示：<br><img src=\"http://img.javatiku.cn/20210812172447.png\" alt=\"IDEA破解成功\" title=\"IDEA破解成功\"></p>\n<h1 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h1><ul>\n<li>本教程适用于**JetBrains 全系列产品，可放心使用；</li>\n<li>本教程适用于 <strong>Windows</strong>/<strong>Mac</strong>/<strong>Linux</strong> 系统；</li>\n<li>本教程适用于 <strong>JetBrains 全系列产品</strong>，包括 <strong>IntelliJ IDEA</strong>、<strong>APPCode</strong>、<strong>CLion</strong>、<strong>DataGrip</strong>、<strong>GoLand</strong>、<strong>PhpStorm</strong>、<strong>PyCharm</strong>、<strong>Rider</strong>、<strong>RubyMine</strong> 和 <strong>WebStorm</strong>。</li>\n</ul>\n<h1 id=\"教程演示\"><a href=\"#教程演示\" class=\"headerlink\" title=\"教程演示\"></a>教程演示</h1><p>下面的教程演示使用的是 <strong>Windows</strong> 系统，安装的 <strong>IDEA 版本为 2021.2</strong>。</p>\n<h3 id=\"1、下载自己需要的IDEA\"><a href=\"#1、下载自己需要的IDEA\" class=\"headerlink\" title=\"1、下载自己需要的IDEA\"></a>1、下载自己需要的IDEA</h3><p>IDEA 老版本下载地址：<a href=\"https://www.jetbrains.com/zh-cn/idea/download/other.html\">https://www.jetbrains.com/zh-cn/idea/download/other.html</a></p>\n<h3 id=\"2、安装IDEA\"><a href=\"#2、安装IDEA\" class=\"headerlink\" title=\"2、安装IDEA\"></a>2、安装IDEA</h3><p>这个操作就easy了，我们按照常规的安装方式安装就行，我就不详细说了。<br>如果你真的不会的话，那说明你确实不太适合做程序员~</p>\n<h3 id=\"3、重置IDEA并点击试用\"><a href=\"#3、重置IDEA并点击试用\" class=\"headerlink\" title=\"3、重置IDEA并点击试用\"></a>3、重置IDEA并点击试用</h3><p>1）如果你的IDEA是新安装的，可以直接点击 <strong>试用</strong>，跳过这一步接下来的操作。<br><img src=\"http://img.javatiku.cn/20210424231958.png\" alt=\"IDEA试用\" title=\"IDEA试用\"><br>2）如果你的电脑之前安装过IDEA且超过试用期（还在试用期的可以忽略该步骤），可以直接通过我这里提供的重置脚本进行重置就行，其原理是删除jetbrains全系列产品软件试用相关目录（其他配置不受影响）。<br><img src=\"http://img.javatiku.cn/20210423185059.png\" alt=\"IDEA重置脚本\" title=\"IDEA重置脚本\"><br>IDEA重置脚本安全可靠，大家可以看看下面的源码哈：<br><img src=\"http://img.javatiku.cn/20210423185142.png\" alt=\"IDEA重置脚本\" title=\"IDEA重置脚本\"><br>重置IDEA之后，打开IDEA，点击试用，按照图示选择试用。<br><img src=\"http://img.javatiku.cn/20210424231958.png\" alt=\"IDEA试用\" title=\"IDEA试用\"><br><strong>说明：最新的 IDEA 2021.2.3 版本 IDEA 界面发生了变化，取消了直接试用 30 天的按钮，需要我们先注册一个 JetBrains（这里我用的 GitHub 账号注册的）</strong>，如下:<br><img src=\"http://www.javatiku.cn/usr/img/4816dd4fc758afa9e0e4e717059ed162.png\" alt=\"IDEA试用\" title=\"IDEA试用\"><br>注册账号并登录后，就可以试用 IDEA 了：<br><img src=\"http://www.javatiku.cn/usr/img/96f2e7b62949112c63fe5eb498bd2d64.png\" alt=\"IDEA试用\" title=\"IDEA试用\"></p>\n<h3 id=\"4、下载破解补丁\"><a href=\"#4、下载破解补丁\" class=\"headerlink\" title=\"4、下载破解补丁\"></a>4、下载破解补丁</h3><p>该破解方法需要用到的文件都准备好了，通过下方的网盘链接下载就行。</p>\n<h6 id=\"蓝奏云下载\"><a href=\"#蓝奏云下载\" class=\"headerlink\" title=\"蓝奏云下载\"></a><a href=\"https://wwe.lanzoui.com/iWZ0Nwm96od\">蓝奏云下载</a></h6><p>压缩包目录结构：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">FineAgent.zip\n|---激活码\n|---FineAgent.jar\nreset_script.zip<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h3 id=\"5、安装破解补丁\"><a href=\"#5、安装破解补丁\" class=\"headerlink\" title=\"5、安装破解补丁\"></a>5、安装破解补丁</h3><p>如果你之前安装过 IDEA, 那么修改过的 hosts 文件要还原回去、引用过的补丁要移除掉等, 不然可能会有各种奇奇怪怪的问题。<br>打开IDEA，你可以在Help -&gt; Eidt Custom VM Options… ，参考如下图所示:<br><img src=\"http://img.javatiku.cn/20210812172939.png\" alt=\"安装破解补丁\" title=\"安装破解补丁\"><br>由于我把压缩包内的<code>FineAgent.jar</code>直接放在D盘的根目录，所以一定要先清除vmoptions文件内其它的<code>-javaagent:xxx</code>配置（否则会存在IDEA打不开的情况），然后再在最后一行加上如下代码：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">-javaagent:d:&#x2F;FineAgent.jar<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"http://img.javatiku.cn/20210812173210.png\" alt=\"IDEA破解教程\" title=\"IDEA破解教程\"></p>\n<h3 id=\"6、重启IDEA\"><a href=\"#6、重启IDEA\" class=\"headerlink\" title=\"6、重启IDEA\"></a>6、重启IDEA</h3><p>安装完成后，重启 idea。</p>\n<h3 id=\"7、通过指定的注册码来激活IDEA\"><a href=\"#7、通过指定的注册码来激活IDEA\" class=\"headerlink\" title=\"7、通过指定的注册码来激活IDEA\"></a>7、通过指定的注册码来激活IDEA</h3><p>重启后，便会提示你输入激活码，激活码在压缩包内 <code>ActivationCode.txt</code> ，这时，你可以用压缩包内的激活码进行激活，如下图<br><img src=\"http://img.javatiku.cn/20210812173504.png\" alt=\"IDEA激活码\" title=\"IDEA激活码\"><br>此时，点击Activate，便激活成功了。</p>\n<h3 id=\"8、如何验证是否激活成功呢？\"><a href=\"#8、如何验证是否激活成功呢？\" class=\"headerlink\" title=\"8、如何验证是否激活成功呢？\"></a>8、如何验证是否激活成功呢？</h3><p>你直接进入 IDEA 主界面，在上方的菜单栏点击 <code>Help</code> -&gt; <code>Register</code> 查看当前激活状态。<br><img src=\"http://img.javatiku.cn/20210812173753.png\" alt=\"IDEA破解教程\" title=\"IDEA破解教程\"><br>这时候你就可以看到，已经激活至 2099 年啦，爽歪歪~<br><img src=\"http://img.javatiku.cn/20210812173856.png\" alt=\"IDEA破解教程\" title=\"IDEA破解教程\"></p>\n<h3 id=\"为何IDEA打不开？\"><a href=\"#为何IDEA打不开？\" class=\"headerlink\" title=\"为何IDEA打不开？\"></a>为何IDEA打不开？</h3><p>一个最主要的原因是：你在<code>vmoptions</code>文件配置的路径不对。<br>如果你想打开IDEA，那么需要找到以<code>vmoptions</code>后缀结尾的文件(一般位于<code>C:\\Users\\用户名\\AppData\\Roaming\\JetBrains\\IntelliJIdea2021.2</code>目录下)，找到 <code>idea64.exe.vmoptions</code>，打开之后，删除 -javaagent:xxx的信息，即可打开，虽然IDEA能打开了，但是很不幸你未破解成功！<br>要想重新破解，那么请重复上述步骤！！！<br>希望本教程对你有所帮助！</p>\n<h3 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h3><p><a href=\"http://www.javatiku.cn/idea/5.html\">http://www.javatiku.cn/idea/5.html</a></p>\n"},{"title":"Linux环境变量的设置和查看方法","author":"Will Holmes","date":"2021-11-17T02:06:03.000Z","_content":"\n# Linux环境变量的设置和查看方法\n \n```bash\n$ echo $HOME\n/home/redbooks\n```\n1. 设置一个新的环境变量hello\n\n```bash\n$ export HELLO=\"Hello!\"\n$ echo $HELLO\nHello!\n```\n2. 使用env命令显示所有的环境变量\n```bash\n$ env\nHOSTNAME=redbooks.safe.org\nPVM\\_RSH=/usr/bin/rsh\nShell=/bin/bash\nTERM=xterm\nHISTSIZE=1000\n...\n```\n4. 使用set命令显示所有本地定义的Shell变量\n```bash\n$ set\nBASH=/bin/bash\nBASH\\_VERSINFO=([0]=\"2\"[1]=\"05b\"[2]=\"0\"[3]=\"1\"[4]=\"release\"[5]=\"i386-redhat-linux-gnu\")\nBASH\\_VERSION='2.05b.0(1)-release'\nCOLORS=/etc/DIR\\_COLORS.xterm\nCOLUMNS=80\nDIRSTACK=()\nDISPLAY=:0.0\n...\n```\n5. 使用unset命令来清除环境变量\n```bash\nset可以设置某个环境变量的值。清除环境变量的值用unset命令。如果未指定值，则该变量值将被设为NULL。示例如下：\n$ export TEST=\"Test...\" #增加一个环境变量TEST\n$ env|grep TEST #此命令有输入，证明环境变量TEST已经存在了\nTEST=Test...\n$ unset $TEST #删除环境变量TEST\n$ env|grep TEST #此命令没有输出，证明环境变量TEST已经存在了\n```\n6. 使用readonly命令设置只读变量\n```bash\n如果使用了readonly命令的话，变量就不可以被修改或清除了。示例如下：\n$ export TEST=\"Test...\" #增加一个环境变量TEST\n$ readonly TEST #将环境变量TEST设为只读\n$ unset TEST #会发现此变量不能被删除\n-bash: unset: TEST: cannot unset: readonly variable\n$ TEST=\"New\" #会发现此也变量不能被修改\n-bash: TEST: readonly variable\n环境变量的设置位于/etc/profile文件\n如果需要增加新的环境变量可以添加下属行\nexport path=$path:/path1:/path2:/pahtN\n```\n　　-----------------------------------------------------------------------------------------------------------------------\n\n## 　　1.Linux的变量种类\n　　按变量的生存周期来划分，Linux变量可分为两类：\n\n　1.1 永久的：需要修改配置文件，变量永久生效。\n\n　1.2 临时的：使用export命令声明即可，变量在关闭shell时失效。\n## 　　2.设置变量的三种方法\n2.1 在/etc/profile文件中添加变量【对所有用户生效(永久的)】\n　　用VI在文件/etc/profile文件中增加变量，该变量将会对Linux下所有用户有效，并且是“永久的”。\n\n　　例如：编辑/etc/profile文件，添加CLASSPATH变量\n\n　　# vi /etc/profile\n\n　　export CLASSPATH=./JAVA\\_HOME/lib;$JAVA\\_HOME/jre/lib\n\n　　注：修改文件后要想马上生效还要运行# source /etc/profile不然只能在下次重进此用户时生效。\n\n2.2 在用户目录下的.bash\\_profile文件中增加变量【对单一用户生效(永久的)】\n\n　　用VI在用户目录下的.bash\\_profile文件中增加变量，改变量仅会对当前用户有效，并且是“永久的”。\n\n　　例如：编辑guok用户目录(/home/guok)下的.bash\\_profile\n\n　　$ vi /home/guok/.bash.profile\n\n　　添加如下内容：\n\n　　export CLASSPATH=./JAVA\\_HOME/lib;$JAVA\\_HOME/jre/lib\n\n　　注：修改文件后要想马上生效还要运行$ source /home/guok/.bash\\_profile不然只能在下次重进此用户时生效。\n2.3 直接运行export命令定义变量【只对当前shell(BASH)有效(临时的)】\n\n　　在shell的命令行下直接使用[export 变量名=变量值] 定义变量，该变量只在当前的shell(BASH)或其子shell(BASH)下是有效的，shell关闭了，变量也就失效了，再打开新shell时就没有这个变量，需要使用的话还需要重新定义。\n\n## 　　3.环境变量的查看\n\n3.1 使用echo命令查看单个环境变量。例如：\necho $PATH\n\n3.2 使用env查看所有环境变量。例如：\n\tenv\n3.3 使用set查看所有本地定义的环境变量。\n\n　　unset可以删除指定的环境变量。\n\n### 　　4.常用的环境变量\n\n　　PATH 决定了shell将到哪些目录中寻找命令或程序\n\n　　HOME 当前用户主目录\n\n　　HISTSIZE　历史记录数\n\n　　LOGNAME 当前用户的登录名\n\n　　HOSTNAME　指主机的名称\n\n　　SHELL 　　当前用户Shell类型\n\n　　LANGUGE 　语言相关的环境变量，多语言可以修改此环境变量\n\n　　MAIL　　　当前用户的邮件存放目录\n\n　　PS1　　　基本提示符，对于root用户是#，对于普通用户是$ \n","source":"_posts/Linux环境变量的设置和查看方法.md","raw":"---\ntitle: Linux环境变量的设置和查看方法\nauthor: Will Holmes\ncategories: Linux\ntags:\n\t- Linux\n\t- 环境变量\ndate: 2021-11-17 10:06:03\n---\n\n# Linux环境变量的设置和查看方法\n \n```bash\n$ echo $HOME\n/home/redbooks\n```\n1. 设置一个新的环境变量hello\n\n```bash\n$ export HELLO=\"Hello!\"\n$ echo $HELLO\nHello!\n```\n2. 使用env命令显示所有的环境变量\n```bash\n$ env\nHOSTNAME=redbooks.safe.org\nPVM\\_RSH=/usr/bin/rsh\nShell=/bin/bash\nTERM=xterm\nHISTSIZE=1000\n...\n```\n4. 使用set命令显示所有本地定义的Shell变量\n```bash\n$ set\nBASH=/bin/bash\nBASH\\_VERSINFO=([0]=\"2\"[1]=\"05b\"[2]=\"0\"[3]=\"1\"[4]=\"release\"[5]=\"i386-redhat-linux-gnu\")\nBASH\\_VERSION='2.05b.0(1)-release'\nCOLORS=/etc/DIR\\_COLORS.xterm\nCOLUMNS=80\nDIRSTACK=()\nDISPLAY=:0.0\n...\n```\n5. 使用unset命令来清除环境变量\n```bash\nset可以设置某个环境变量的值。清除环境变量的值用unset命令。如果未指定值，则该变量值将被设为NULL。示例如下：\n$ export TEST=\"Test...\" #增加一个环境变量TEST\n$ env|grep TEST #此命令有输入，证明环境变量TEST已经存在了\nTEST=Test...\n$ unset $TEST #删除环境变量TEST\n$ env|grep TEST #此命令没有输出，证明环境变量TEST已经存在了\n```\n6. 使用readonly命令设置只读变量\n```bash\n如果使用了readonly命令的话，变量就不可以被修改或清除了。示例如下：\n$ export TEST=\"Test...\" #增加一个环境变量TEST\n$ readonly TEST #将环境变量TEST设为只读\n$ unset TEST #会发现此变量不能被删除\n-bash: unset: TEST: cannot unset: readonly variable\n$ TEST=\"New\" #会发现此也变量不能被修改\n-bash: TEST: readonly variable\n环境变量的设置位于/etc/profile文件\n如果需要增加新的环境变量可以添加下属行\nexport path=$path:/path1:/path2:/pahtN\n```\n　　-----------------------------------------------------------------------------------------------------------------------\n\n## 　　1.Linux的变量种类\n　　按变量的生存周期来划分，Linux变量可分为两类：\n\n　1.1 永久的：需要修改配置文件，变量永久生效。\n\n　1.2 临时的：使用export命令声明即可，变量在关闭shell时失效。\n## 　　2.设置变量的三种方法\n2.1 在/etc/profile文件中添加变量【对所有用户生效(永久的)】\n　　用VI在文件/etc/profile文件中增加变量，该变量将会对Linux下所有用户有效，并且是“永久的”。\n\n　　例如：编辑/etc/profile文件，添加CLASSPATH变量\n\n　　# vi /etc/profile\n\n　　export CLASSPATH=./JAVA\\_HOME/lib;$JAVA\\_HOME/jre/lib\n\n　　注：修改文件后要想马上生效还要运行# source /etc/profile不然只能在下次重进此用户时生效。\n\n2.2 在用户目录下的.bash\\_profile文件中增加变量【对单一用户生效(永久的)】\n\n　　用VI在用户目录下的.bash\\_profile文件中增加变量，改变量仅会对当前用户有效，并且是“永久的”。\n\n　　例如：编辑guok用户目录(/home/guok)下的.bash\\_profile\n\n　　$ vi /home/guok/.bash.profile\n\n　　添加如下内容：\n\n　　export CLASSPATH=./JAVA\\_HOME/lib;$JAVA\\_HOME/jre/lib\n\n　　注：修改文件后要想马上生效还要运行$ source /home/guok/.bash\\_profile不然只能在下次重进此用户时生效。\n2.3 直接运行export命令定义变量【只对当前shell(BASH)有效(临时的)】\n\n　　在shell的命令行下直接使用[export 变量名=变量值] 定义变量，该变量只在当前的shell(BASH)或其子shell(BASH)下是有效的，shell关闭了，变量也就失效了，再打开新shell时就没有这个变量，需要使用的话还需要重新定义。\n\n## 　　3.环境变量的查看\n\n3.1 使用echo命令查看单个环境变量。例如：\necho $PATH\n\n3.2 使用env查看所有环境变量。例如：\n\tenv\n3.3 使用set查看所有本地定义的环境变量。\n\n　　unset可以删除指定的环境变量。\n\n### 　　4.常用的环境变量\n\n　　PATH 决定了shell将到哪些目录中寻找命令或程序\n\n　　HOME 当前用户主目录\n\n　　HISTSIZE　历史记录数\n\n　　LOGNAME 当前用户的登录名\n\n　　HOSTNAME　指主机的名称\n\n　　SHELL 　　当前用户Shell类型\n\n　　LANGUGE 　语言相关的环境变量，多语言可以修改此环境变量\n\n　　MAIL　　　当前用户的邮件存放目录\n\n　　PS1　　　基本提示符，对于root用户是#，对于普通用户是$ \n","slug":"Linux环境变量的设置和查看方法","published":1,"updated":"2021-11-17T02:21:27.463Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckw4ars55000ktyoxbv8r5ubr","content":"<h1 id=\"Linux环境变量的设置和查看方法\"><a href=\"#Linux环境变量的设置和查看方法\" class=\"headerlink\" title=\"Linux环境变量的设置和查看方法\"></a>Linux环境变量的设置和查看方法</h1><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> <span class=\"token environment constant\">$HOME</span>\n/home/redbooks<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<ol>\n<li>设置一个新的环境变量hello</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">HELLO</span><span class=\"token operator\">=</span><span class=\"token string\">\"Hello!\"</span>\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$HELLO</span>\nHello<span class=\"token operator\">!</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<ol start=\"2\">\n<li>使用env命令显示所有的环境变量<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">env</span>\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">HOSTNAME</span></span><span class=\"token operator\">=</span>redbooks.safe.org\nPVM<span class=\"token punctuation\">\\</span>_RSH<span class=\"token operator\">=</span>/usr/bin/rsh\n<span class=\"token assign-left variable\">Shell</span><span class=\"token operator\">=</span>/bin/bash\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">TERM</span></span><span class=\"token operator\">=</span>xterm\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">HISTSIZE</span></span><span class=\"token operator\">=</span><span class=\"token number\">1000</span>\n<span class=\"token punctuation\">..</span>.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>使用set命令显示所有本地定义的Shell变量<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">set</span>\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">BASH</span></span><span class=\"token operator\">=</span>/bin/bash\n<span class=\"token environment constant\">BASH</span><span class=\"token punctuation\">\\</span>_VERSINFO<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"05b\"</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"release\"</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"i386-redhat-linux-gnu\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token environment constant\">BASH</span><span class=\"token punctuation\">\\</span>_VERSION<span class=\"token operator\">=</span><span class=\"token string\">'2.05b.0(1)-release'</span>\n<span class=\"token assign-left variable\">COLORS</span><span class=\"token operator\">=</span>/etc/DIR<span class=\"token punctuation\">\\</span>_COLORS.xterm\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">COLUMNS</span></span><span class=\"token operator\">=</span><span class=\"token number\">80</span>\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">DIRSTACK</span></span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">DISPLAY</span></span><span class=\"token operator\">=</span>:0.0\n<span class=\"token punctuation\">..</span>.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>使用unset命令来清除环境变量<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">set可以设置某个环境变量的值。清除环境变量的值用unset命令。如果未指定值，则该变量值将被设为NULL。示例如下：\n$ <span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">TEST</span><span class=\"token operator\">=</span><span class=\"token string\">\"Test...\"</span> <span class=\"token comment\">#增加一个环境变量TEST</span>\n$ <span class=\"token function\">env</span><span class=\"token operator\">|</span><span class=\"token function\">grep</span> TEST <span class=\"token comment\">#此命令有输入，证明环境变量TEST已经存在了</span>\n<span class=\"token assign-left variable\">TEST</span><span class=\"token operator\">=</span>Test<span class=\"token punctuation\">..</span>.\n$ <span class=\"token builtin class-name\">unset</span> <span class=\"token variable\">$TEST</span> <span class=\"token comment\">#删除环境变量TEST</span>\n$ <span class=\"token function\">env</span><span class=\"token operator\">|</span><span class=\"token function\">grep</span> TEST <span class=\"token comment\">#此命令没有输出，证明环境变量TEST已经存在了</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>使用readonly命令设置只读变量<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">如果使用了readonly命令的话，变量就不可以被修改或清除了。示例如下：\n$ <span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">TEST</span><span class=\"token operator\">=</span><span class=\"token string\">\"Test...\"</span> <span class=\"token comment\">#增加一个环境变量TEST</span>\n$ <span class=\"token builtin class-name\">readonly</span> TEST <span class=\"token comment\">#将环境变量TEST设为只读</span>\n$ <span class=\"token builtin class-name\">unset</span> TEST <span class=\"token comment\">#会发现此变量不能被删除</span>\n-bash: unset: TEST: cannot unset: <span class=\"token builtin class-name\">readonly</span> variable\n$ <span class=\"token assign-left variable\">TEST</span><span class=\"token operator\">=</span><span class=\"token string\">\"New\"</span> <span class=\"token comment\">#会发现此也变量不能被修改</span>\n-bash: TEST: <span class=\"token builtin class-name\">readonly</span> variable\n环境变量的设置位于/etc/profile文件\n如果需要增加新的环境变量可以添加下属行\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">path</span><span class=\"token operator\">=</span><span class=\"token variable\">$path</span>:/path1:/path2:/pahtN<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n　　———————————————————————————————————————–</li>\n</ol>\n<h2 id=\"1-Linux的变量种类\"><a href=\"#1-Linux的变量种类\" class=\"headerlink\" title=\"1.Linux的变量种类\"></a>1.Linux的变量种类</h2><p>　　按变量的生存周期来划分，Linux变量可分为两类：</p>\n<p>　1.1 永久的：需要修改配置文件，变量永久生效。</p>\n<p>　1.2 临时的：使用export命令声明即可，变量在关闭shell时失效。</p>\n<h2 id=\"2-设置变量的三种方法\"><a href=\"#2-设置变量的三种方法\" class=\"headerlink\" title=\"2.设置变量的三种方法\"></a>2.设置变量的三种方法</h2><p>2.1 在/etc/profile文件中添加变量【对所有用户生效(永久的)】<br>　　用VI在文件/etc/profile文件中增加变量，该变量将会对Linux下所有用户有效，并且是“永久的”。</p>\n<p>　　例如：编辑/etc/profile文件，添加CLASSPATH变量</p>\n<p>　　# vi /etc/profile</p>\n<p>　　export CLASSPATH=./JAVA_HOME/lib;$JAVA_HOME/jre/lib</p>\n<p>　　注：修改文件后要想马上生效还要运行# source /etc/profile不然只能在下次重进此用户时生效。</p>\n<p>2.2 在用户目录下的.bash_profile文件中增加变量【对单一用户生效(永久的)】</p>\n<p>　　用VI在用户目录下的.bash_profile文件中增加变量，改变量仅会对当前用户有效，并且是“永久的”。</p>\n<p>　　例如：编辑guok用户目录(/home/guok)下的.bash_profile</p>\n<p>　　$ vi /home/guok/.bash.profile</p>\n<p>　　添加如下内容：</p>\n<p>　　export CLASSPATH=./JAVA_HOME/lib;$JAVA_HOME/jre/lib</p>\n<p>　　注：修改文件后要想马上生效还要运行$ source /home/guok/.bash_profile不然只能在下次重进此用户时生效。<br>2.3 直接运行export命令定义变量【只对当前shell(BASH)有效(临时的)】</p>\n<p>　　在shell的命令行下直接使用[export 变量名=变量值] 定义变量，该变量只在当前的shell(BASH)或其子shell(BASH)下是有效的，shell关闭了，变量也就失效了，再打开新shell时就没有这个变量，需要使用的话还需要重新定义。</p>\n<h2 id=\"3-环境变量的查看\"><a href=\"#3-环境变量的查看\" class=\"headerlink\" title=\"3.环境变量的查看\"></a>3.环境变量的查看</h2><p>3.1 使用echo命令查看单个环境变量。例如：<br>echo $PATH</p>\n<p>3.2 使用env查看所有环境变量。例如：<br>    env<br>3.3 使用set查看所有本地定义的环境变量。</p>\n<p>　　unset可以删除指定的环境变量。</p>\n<h3 id=\"4-常用的环境变量\"><a href=\"#4-常用的环境变量\" class=\"headerlink\" title=\"4.常用的环境变量\"></a>4.常用的环境变量</h3><p>　　PATH 决定了shell将到哪些目录中寻找命令或程序</p>\n<p>　　HOME 当前用户主目录</p>\n<p>　　HISTSIZE　历史记录数</p>\n<p>　　LOGNAME 当前用户的登录名</p>\n<p>　　HOSTNAME　指主机的名称</p>\n<p>　　SHELL 　　当前用户Shell类型</p>\n<p>　　LANGUGE 　语言相关的环境变量，多语言可以修改此环境变量</p>\n<p>　　MAIL　　　当前用户的邮件存放目录</p>\n<p>　　PS1　　　基本提示符，对于root用户是#，对于普通用户是$ </p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"Linux环境变量的设置和查看方法\"><a href=\"#Linux环境变量的设置和查看方法\" class=\"headerlink\" title=\"Linux环境变量的设置和查看方法\"></a>Linux环境变量的设置和查看方法</h1><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> <span class=\"token environment constant\">$HOME</span>\n/home/redbooks<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<ol>\n<li>设置一个新的环境变量hello</li>\n</ol>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">HELLO</span><span class=\"token operator\">=</span><span class=\"token string\">\"Hello!\"</span>\n$ <span class=\"token builtin class-name\">echo</span> <span class=\"token variable\">$HELLO</span>\nHello<span class=\"token operator\">!</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<ol start=\"2\">\n<li>使用env命令显示所有的环境变量<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token function\">env</span>\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">HOSTNAME</span></span><span class=\"token operator\">=</span>redbooks.safe.org\nPVM<span class=\"token punctuation\">\\</span>_RSH<span class=\"token operator\">=</span>/usr/bin/rsh\n<span class=\"token assign-left variable\">Shell</span><span class=\"token operator\">=</span>/bin/bash\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">TERM</span></span><span class=\"token operator\">=</span>xterm\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">HISTSIZE</span></span><span class=\"token operator\">=</span><span class=\"token number\">1000</span>\n<span class=\"token punctuation\">..</span>.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>使用set命令显示所有本地定义的Shell变量<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">set</span>\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">BASH</span></span><span class=\"token operator\">=</span>/bin/bash\n<span class=\"token environment constant\">BASH</span><span class=\"token punctuation\">\\</span>_VERSINFO<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"05b\"</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"release\"</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"i386-redhat-linux-gnu\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token environment constant\">BASH</span><span class=\"token punctuation\">\\</span>_VERSION<span class=\"token operator\">=</span><span class=\"token string\">'2.05b.0(1)-release'</span>\n<span class=\"token assign-left variable\">COLORS</span><span class=\"token operator\">=</span>/etc/DIR<span class=\"token punctuation\">\\</span>_COLORS.xterm\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">COLUMNS</span></span><span class=\"token operator\">=</span><span class=\"token number\">80</span>\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">DIRSTACK</span></span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">DISPLAY</span></span><span class=\"token operator\">=</span>:0.0\n<span class=\"token punctuation\">..</span>.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>使用unset命令来清除环境变量<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">set可以设置某个环境变量的值。清除环境变量的值用unset命令。如果未指定值，则该变量值将被设为NULL。示例如下：\n$ <span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">TEST</span><span class=\"token operator\">=</span><span class=\"token string\">\"Test...\"</span> <span class=\"token comment\">#增加一个环境变量TEST</span>\n$ <span class=\"token function\">env</span><span class=\"token operator\">|</span><span class=\"token function\">grep</span> TEST <span class=\"token comment\">#此命令有输入，证明环境变量TEST已经存在了</span>\n<span class=\"token assign-left variable\">TEST</span><span class=\"token operator\">=</span>Test<span class=\"token punctuation\">..</span>.\n$ <span class=\"token builtin class-name\">unset</span> <span class=\"token variable\">$TEST</span> <span class=\"token comment\">#删除环境变量TEST</span>\n$ <span class=\"token function\">env</span><span class=\"token operator\">|</span><span class=\"token function\">grep</span> TEST <span class=\"token comment\">#此命令没有输出，证明环境变量TEST已经存在了</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n<li>使用readonly命令设置只读变量<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">如果使用了readonly命令的话，变量就不可以被修改或清除了。示例如下：\n$ <span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">TEST</span><span class=\"token operator\">=</span><span class=\"token string\">\"Test...\"</span> <span class=\"token comment\">#增加一个环境变量TEST</span>\n$ <span class=\"token builtin class-name\">readonly</span> TEST <span class=\"token comment\">#将环境变量TEST设为只读</span>\n$ <span class=\"token builtin class-name\">unset</span> TEST <span class=\"token comment\">#会发现此变量不能被删除</span>\n-bash: unset: TEST: cannot unset: <span class=\"token builtin class-name\">readonly</span> variable\n$ <span class=\"token assign-left variable\">TEST</span><span class=\"token operator\">=</span><span class=\"token string\">\"New\"</span> <span class=\"token comment\">#会发现此也变量不能被修改</span>\n-bash: TEST: <span class=\"token builtin class-name\">readonly</span> variable\n环境变量的设置位于/etc/profile文件\n如果需要增加新的环境变量可以添加下属行\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">path</span><span class=\"token operator\">=</span><span class=\"token variable\">$path</span>:/path1:/path2:/pahtN<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n　　———————————————————————————————————————–</li>\n</ol>\n<h2 id=\"1-Linux的变量种类\"><a href=\"#1-Linux的变量种类\" class=\"headerlink\" title=\"1.Linux的变量种类\"></a>1.Linux的变量种类</h2><p>　　按变量的生存周期来划分，Linux变量可分为两类：</p>\n<p>　1.1 永久的：需要修改配置文件，变量永久生效。</p>\n<p>　1.2 临时的：使用export命令声明即可，变量在关闭shell时失效。</p>\n<h2 id=\"2-设置变量的三种方法\"><a href=\"#2-设置变量的三种方法\" class=\"headerlink\" title=\"2.设置变量的三种方法\"></a>2.设置变量的三种方法</h2><p>2.1 在/etc/profile文件中添加变量【对所有用户生效(永久的)】<br>　　用VI在文件/etc/profile文件中增加变量，该变量将会对Linux下所有用户有效，并且是“永久的”。</p>\n<p>　　例如：编辑/etc/profile文件，添加CLASSPATH变量</p>\n<p>　　# vi /etc/profile</p>\n<p>　　export CLASSPATH=./JAVA_HOME/lib;$JAVA_HOME/jre/lib</p>\n<p>　　注：修改文件后要想马上生效还要运行# source /etc/profile不然只能在下次重进此用户时生效。</p>\n<p>2.2 在用户目录下的.bash_profile文件中增加变量【对单一用户生效(永久的)】</p>\n<p>　　用VI在用户目录下的.bash_profile文件中增加变量，改变量仅会对当前用户有效，并且是“永久的”。</p>\n<p>　　例如：编辑guok用户目录(/home/guok)下的.bash_profile</p>\n<p>　　$ vi /home/guok/.bash.profile</p>\n<p>　　添加如下内容：</p>\n<p>　　export CLASSPATH=./JAVA_HOME/lib;$JAVA_HOME/jre/lib</p>\n<p>　　注：修改文件后要想马上生效还要运行$ source /home/guok/.bash_profile不然只能在下次重进此用户时生效。<br>2.3 直接运行export命令定义变量【只对当前shell(BASH)有效(临时的)】</p>\n<p>　　在shell的命令行下直接使用[export 变量名=变量值] 定义变量，该变量只在当前的shell(BASH)或其子shell(BASH)下是有效的，shell关闭了，变量也就失效了，再打开新shell时就没有这个变量，需要使用的话还需要重新定义。</p>\n<h2 id=\"3-环境变量的查看\"><a href=\"#3-环境变量的查看\" class=\"headerlink\" title=\"3.环境变量的查看\"></a>3.环境变量的查看</h2><p>3.1 使用echo命令查看单个环境变量。例如：<br>echo $PATH</p>\n<p>3.2 使用env查看所有环境变量。例如：<br>    env<br>3.3 使用set查看所有本地定义的环境变量。</p>\n<p>　　unset可以删除指定的环境变量。</p>\n<h3 id=\"4-常用的环境变量\"><a href=\"#4-常用的环境变量\" class=\"headerlink\" title=\"4.常用的环境变量\"></a>4.常用的环境变量</h3><p>　　PATH 决定了shell将到哪些目录中寻找命令或程序</p>\n<p>　　HOME 当前用户主目录</p>\n<p>　　HISTSIZE　历史记录数</p>\n<p>　　LOGNAME 当前用户的登录名</p>\n<p>　　HOSTNAME　指主机的名称</p>\n<p>　　SHELL 　　当前用户Shell类型</p>\n<p>　　LANGUGE 　语言相关的环境变量，多语言可以修改此环境变量</p>\n<p>　　MAIL　　　当前用户的邮件存放目录</p>\n<p>　　PS1　　　基本提示符，对于root用户是#，对于普通用户是$ </p>\n"},{"title":"MacOS提示“打不开xxx,因为Apple无法检查其是否包含恶意软件...”","author":"Will Holmes","date":"2021-11-15T05:16:49.000Z","_content":"\n>当你的mac提示“打不开xxx,因为Apple无法检查其是否包含恶意软件...”时，一般是由于你下载了非App Store且不受苹果信任的开发者的软件，怎么解决呢？\n\n[![](https://i.loli.net/2020/05/09/dl7ghqj4ranTvwF.png \"MacOS提示“打不开xxx,因为Apple无法检查其是否包含恶意软件...”\")](https://i.loli.net/2020/05/09/dl7ghqj4ranTvwF.png)\n\n>其实很简单，只需要在设置-安全性与隐私-通用-允许从以下位置下载的应用-勾选“任何来源”，这时候有朋友就会说了，只有前两项怎么办？\n\n[![](https://i.loli.net/2020/05/09/KqWfNwoO7RlDvs9.png \"MacOS提示“打不开xxx,因为Apple无法检查其是否包含恶意软件...”\")](https://i.loli.net/2020/05/09/KqWfNwoO7RlDvs9.png)\n\n>其实这个选项在最近几个macOS版本中被隐藏了（具体版本未考究），只需要通过命令就可以打开\n### 操作步骤：\n1、在启动台-其他文件夹-终端，打开\n2、输入命令：\n```bash\nsudo spctl --master-disable #复制粘贴进去\n```\n执行回车，然后输入电脑密码再回车即可（输密码是看不到的，直接输入就可以了）\n[![](https://i.loli.net/2020/05/09/QWvHcPUFT1IizGY.png \"MacOS提示“打不开xxx,因为Apple无法检查其是否包含恶意软件...”\")](https://i.loli.net/2020/05/09/QWvHcPUFT1IizGY.png)\n之后就可以看到“任何来源”选项已经勾选，此时软件已经可以正常打开了。\n**PS：关闭显示“任何来源”的命令是**\n```bash\nsudo spctl --master-enable\n```\n操作方法与上面同\n","source":"_posts/MacOS提示“打不开xxx,因为Apple无法检查其是否包含恶意软件...”.md","raw":"---\ntitle: MacOS提示“打不开xxx,因为Apple无法检查其是否包含恶意软件...”\nauthor: Will Holmes\ncategories: MacOS\ntags:\n\t-MacOS\ndate: 2021-11-15 13:16:49\n---\n\n>当你的mac提示“打不开xxx,因为Apple无法检查其是否包含恶意软件...”时，一般是由于你下载了非App Store且不受苹果信任的开发者的软件，怎么解决呢？\n\n[![](https://i.loli.net/2020/05/09/dl7ghqj4ranTvwF.png \"MacOS提示“打不开xxx,因为Apple无法检查其是否包含恶意软件...”\")](https://i.loli.net/2020/05/09/dl7ghqj4ranTvwF.png)\n\n>其实很简单，只需要在设置-安全性与隐私-通用-允许从以下位置下载的应用-勾选“任何来源”，这时候有朋友就会说了，只有前两项怎么办？\n\n[![](https://i.loli.net/2020/05/09/KqWfNwoO7RlDvs9.png \"MacOS提示“打不开xxx,因为Apple无法检查其是否包含恶意软件...”\")](https://i.loli.net/2020/05/09/KqWfNwoO7RlDvs9.png)\n\n>其实这个选项在最近几个macOS版本中被隐藏了（具体版本未考究），只需要通过命令就可以打开\n### 操作步骤：\n1、在启动台-其他文件夹-终端，打开\n2、输入命令：\n```bash\nsudo spctl --master-disable #复制粘贴进去\n```\n执行回车，然后输入电脑密码再回车即可（输密码是看不到的，直接输入就可以了）\n[![](https://i.loli.net/2020/05/09/QWvHcPUFT1IizGY.png \"MacOS提示“打不开xxx,因为Apple无法检查其是否包含恶意软件...”\")](https://i.loli.net/2020/05/09/QWvHcPUFT1IizGY.png)\n之后就可以看到“任何来源”选项已经勾选，此时软件已经可以正常打开了。\n**PS：关闭显示“任何来源”的命令是**\n```bash\nsudo spctl --master-enable\n```\n操作方法与上面同\n","slug":"MacOS提示“打不开xxx,因为Apple无法检查其是否包含恶意软件...”","published":1,"updated":"2021-11-15T05:21:18.388Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckw4ars57000ntyoxgw4afik8","content":"<blockquote>\n<p>当你的mac提示“打不开xxx,因为Apple无法检查其是否包含恶意软件…”时，一般是由于你下载了非App Store且不受苹果信任的开发者的软件，怎么解决呢？</p>\n</blockquote>\n<p><a href=\"https://i.loli.net/2020/05/09/dl7ghqj4ranTvwF.png\"><img src=\"https://i.loli.net/2020/05/09/dl7ghqj4ranTvwF.png\" title=\"MacOS提示“打不开xxx,因为Apple无法检查其是否包含恶意软件...”\"></a></p>\n<blockquote>\n<p>其实很简单，只需要在设置-安全性与隐私-通用-允许从以下位置下载的应用-勾选“任何来源”，这时候有朋友就会说了，只有前两项怎么办？</p>\n</blockquote>\n<p><a href=\"https://i.loli.net/2020/05/09/KqWfNwoO7RlDvs9.png\"><img src=\"https://i.loli.net/2020/05/09/KqWfNwoO7RlDvs9.png\" title=\"MacOS提示“打不开xxx,因为Apple无法检查其是否包含恶意软件...”\"></a></p>\n<blockquote>\n<p>其实这个选项在最近几个macOS版本中被隐藏了（具体版本未考究），只需要通过命令就可以打开</p>\n</blockquote>\n<h3 id=\"操作步骤：\"><a href=\"#操作步骤：\" class=\"headerlink\" title=\"操作步骤：\"></a>操作步骤：</h3><p>1、在启动台-其他文件夹-终端，打开<br>2、输入命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> spctl --master-disable <span class=\"token comment\">#复制粘贴进去</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>执行回车，然后输入电脑密码再回车即可（输密码是看不到的，直接输入就可以了）<br><a href=\"https://i.loli.net/2020/05/09/QWvHcPUFT1IizGY.png\"><img src=\"https://i.loli.net/2020/05/09/QWvHcPUFT1IizGY.png\" title=\"MacOS提示“打不开xxx,因为Apple无法检查其是否包含恶意软件...”\"></a><br>之后就可以看到“任何来源”选项已经勾选，此时软件已经可以正常打开了。<br><strong>PS：关闭显示“任何来源”的命令是</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> spctl --master-enable<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>操作方法与上面同</p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<blockquote>\n<p>当你的mac提示“打不开xxx,因为Apple无法检查其是否包含恶意软件…”时，一般是由于你下载了非App Store且不受苹果信任的开发者的软件，怎么解决呢？</p>\n</blockquote>\n<p><a href=\"https://i.loli.net/2020/05/09/dl7ghqj4ranTvwF.png\"><img src=\"https://i.loli.net/2020/05/09/dl7ghqj4ranTvwF.png\" title=\"MacOS提示“打不开xxx,因为Apple无法检查其是否包含恶意软件...”\"></a></p>\n<blockquote>\n<p>其实很简单，只需要在设置-安全性与隐私-通用-允许从以下位置下载的应用-勾选“任何来源”，这时候有朋友就会说了，只有前两项怎么办？</p>\n</blockquote>\n<p><a href=\"https://i.loli.net/2020/05/09/KqWfNwoO7RlDvs9.png\"><img src=\"https://i.loli.net/2020/05/09/KqWfNwoO7RlDvs9.png\" title=\"MacOS提示“打不开xxx,因为Apple无法检查其是否包含恶意软件...”\"></a></p>\n<blockquote>\n<p>其实这个选项在最近几个macOS版本中被隐藏了（具体版本未考究），只需要通过命令就可以打开</p>\n</blockquote>\n<h3 id=\"操作步骤：\"><a href=\"#操作步骤：\" class=\"headerlink\" title=\"操作步骤：\"></a>操作步骤：</h3><p>1、在启动台-其他文件夹-终端，打开<br>2、输入命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> spctl --master-disable <span class=\"token comment\">#复制粘贴进去</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>执行回车，然后输入电脑密码再回车即可（输密码是看不到的，直接输入就可以了）<br><a href=\"https://i.loli.net/2020/05/09/QWvHcPUFT1IizGY.png\"><img src=\"https://i.loli.net/2020/05/09/QWvHcPUFT1IizGY.png\" title=\"MacOS提示“打不开xxx,因为Apple无法检查其是否包含恶意软件...”\"></a><br>之后就可以看到“任何来源”选项已经勾选，此时软件已经可以正常打开了。<br><strong>PS：关闭显示“任何来源”的命令是</strong></p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> spctl --master-enable<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>操作方法与上面同</p>\n"},{"title":"Python Scrapy框架笔记","date":"2021-10-10T08:04:59.000Z","author":"小伟","_content":"# Python Scrapy 使用笔记\n\n## 安装 Scrapy\n使用pip安装\n```bash\npip install Scrapy\n```\n\n## 开始使用\n\n### 创建项目\nscrapy startproject 项目名称\n```bash\nscrapy startproject tutorial\n```\n#### 目录结构\n```\ntutorial/\n    scrapy.cfg\n    tutorial/\n        __init__.py\n        items.py\n        pipelines.py\n        settings.py\n        spiders/\n            __init__.py\n            ...\n```\n##### 文件说明\n- scrapy.cfg: 项目的配置文件\n- tutorial/: 该项目的python模块。之后您将在此加入代码。\n- tutorial/items.py: 项目中的item文件.\n- tutorial/pipelines.py: 项目中的pipelines文件.\n- tutorial/settings.py: 项目的设置文件.\n- tutorial/spiders/: 放置spider代码的目录.\n\n\n### 编写爬虫\n\n为了创建一个Spider，您必须继承 scrapy.Spider 类， 且定义以下三个属性:\n\n- name: 用于区别Spider。 该名字必须是唯一的，您不可以为不同的Spider设定相同的名字。\n- start_urls: 包含了Spider在启动时进行爬取的url列表。 因此，第一个被获取到的页面将是其中之一。 后续的URL则从初始的URL获取到的数据中提取。\n- parse() 是spider的一个方法。 被调用时，每个初始URL完成下载后生成的 Response 对象将会作为唯一的参数传递给该函数。 该方法负责解析返回的数据(response data)，提取数据(生成item)以及生成需要进一步处理的URL的 Request 对象。\n\n```python\nimport scrapy\n\nclass DmozSpider(scrapy.Spider):\n    name = \"dmoz\"\n    allowed_domains = [\"dmoz.org\"]\n    start_urls = [\n        \"http://www.dmoz.org/Computers/Programming/Languages/Python/Books/\",\n        \"http://www.dmoz.org/Computers/Programming/Languages/Python/Resources/\"\n    ]\n\n    def parse(self, response):\n        filename = response.url.split(\"/\")[-2]\n        with open(filename, 'wb') as f:\n            f.write(response.body)\n```\n\n### 开始爬虫\n进入项目的根目录，执行下列命令启动spider:\nscrapy crawl name属性的名字\n```bash \nscrapy crawl dmoz\n```","source":"_posts/Python-Scrapy-框架笔记.md","raw":"---\ntitle: Python Scrapy框架笔记\ndate: 2021-10-10 16:04:59\nauthor: 小伟\ncategories: Python\ntags:\n  - Python\n  - 笔记\n  - Scrapy\n---\n# Python Scrapy 使用笔记\n\n## 安装 Scrapy\n使用pip安装\n```bash\npip install Scrapy\n```\n\n## 开始使用\n\n### 创建项目\nscrapy startproject 项目名称\n```bash\nscrapy startproject tutorial\n```\n#### 目录结构\n```\ntutorial/\n    scrapy.cfg\n    tutorial/\n        __init__.py\n        items.py\n        pipelines.py\n        settings.py\n        spiders/\n            __init__.py\n            ...\n```\n##### 文件说明\n- scrapy.cfg: 项目的配置文件\n- tutorial/: 该项目的python模块。之后您将在此加入代码。\n- tutorial/items.py: 项目中的item文件.\n- tutorial/pipelines.py: 项目中的pipelines文件.\n- tutorial/settings.py: 项目的设置文件.\n- tutorial/spiders/: 放置spider代码的目录.\n\n\n### 编写爬虫\n\n为了创建一个Spider，您必须继承 scrapy.Spider 类， 且定义以下三个属性:\n\n- name: 用于区别Spider。 该名字必须是唯一的，您不可以为不同的Spider设定相同的名字。\n- start_urls: 包含了Spider在启动时进行爬取的url列表。 因此，第一个被获取到的页面将是其中之一。 后续的URL则从初始的URL获取到的数据中提取。\n- parse() 是spider的一个方法。 被调用时，每个初始URL完成下载后生成的 Response 对象将会作为唯一的参数传递给该函数。 该方法负责解析返回的数据(response data)，提取数据(生成item)以及生成需要进一步处理的URL的 Request 对象。\n\n```python\nimport scrapy\n\nclass DmozSpider(scrapy.Spider):\n    name = \"dmoz\"\n    allowed_domains = [\"dmoz.org\"]\n    start_urls = [\n        \"http://www.dmoz.org/Computers/Programming/Languages/Python/Books/\",\n        \"http://www.dmoz.org/Computers/Programming/Languages/Python/Resources/\"\n    ]\n\n    def parse(self, response):\n        filename = response.url.split(\"/\")[-2]\n        with open(filename, 'wb') as f:\n            f.write(response.body)\n```\n\n### 开始爬虫\n进入项目的根目录，执行下列命令启动spider:\nscrapy crawl name属性的名字\n```bash \nscrapy crawl dmoz\n```","slug":"Python-Scrapy-框架笔记","published":1,"updated":"2021-10-10T08:58:59.044Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckw4ars59000styoxf1lzawvd","content":"<h1 id=\"Python-Scrapy-使用笔记\"><a href=\"#Python-Scrapy-使用笔记\" class=\"headerlink\" title=\"Python Scrapy 使用笔记\"></a>Python Scrapy 使用笔记</h1><h2 id=\"安装-Scrapy\"><a href=\"#安装-Scrapy\" class=\"headerlink\" title=\"安装 Scrapy\"></a>安装 Scrapy</h2><p>使用pip安装</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pip <span class=\"token function\">install</span> Scrapy<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"开始使用\"><a href=\"#开始使用\" class=\"headerlink\" title=\"开始使用\"></a>开始使用</h2><h3 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h3><p>scrapy startproject 项目名称</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">scrapy startproject tutorial<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">tutorial&#x2F;\n    scrapy.cfg\n    tutorial&#x2F;\n        __init__.py\n        items.py\n        pipelines.py\n        settings.py\n        spiders&#x2F;\n            __init__.py\n            ...<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"文件说明\"><a href=\"#文件说明\" class=\"headerlink\" title=\"文件说明\"></a>文件说明</h5><ul>\n<li>scrapy.cfg: 项目的配置文件</li>\n<li>tutorial/: 该项目的python模块。之后您将在此加入代码。</li>\n<li>tutorial/items.py: 项目中的item文件.</li>\n<li>tutorial/pipelines.py: 项目中的pipelines文件.</li>\n<li>tutorial/settings.py: 项目的设置文件.</li>\n<li>tutorial/spiders/: 放置spider代码的目录.</li>\n</ul>\n<h3 id=\"编写爬虫\"><a href=\"#编写爬虫\" class=\"headerlink\" title=\"编写爬虫\"></a>编写爬虫</h3><p>为了创建一个Spider，您必须继承 scrapy.Spider 类， 且定义以下三个属性:</p>\n<ul>\n<li>name: 用于区别Spider。 该名字必须是唯一的，您不可以为不同的Spider设定相同的名字。</li>\n<li>start_urls: 包含了Spider在启动时进行爬取的url列表。 因此，第一个被获取到的页面将是其中之一。 后续的URL则从初始的URL获取到的数据中提取。</li>\n<li>parse() 是spider的一个方法。 被调用时，每个初始URL完成下载后生成的 Response 对象将会作为唯一的参数传递给该函数。 该方法负责解析返回的数据(response data)，提取数据(生成item)以及生成需要进一步处理的URL的 Request 对象。</li>\n</ul>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> scrapy\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">DmozSpider</span><span class=\"token punctuation\">(</span>scrapy<span class=\"token punctuation\">.</span>Spider<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    name <span class=\"token operator\">=</span> <span class=\"token string\">\"dmoz\"</span>\n    allowed_domains <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"dmoz.org\"</span><span class=\"token punctuation\">]</span>\n    start_urls <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">\"http://www.dmoz.org/Computers/Programming/Languages/Python/Books/\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"http://www.dmoz.org/Computers/Programming/Languages/Python/Resources/\"</span>\n    <span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        filename <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span> <span class=\"token string\">'wb'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n            f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"开始爬虫\"><a href=\"#开始爬虫\" class=\"headerlink\" title=\"开始爬虫\"></a>开始爬虫</h3><p>进入项目的根目录，执行下列命令启动spider:<br>scrapy crawl name属性的名字</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">scrapy crawl dmoz<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"Python-Scrapy-使用笔记\"><a href=\"#Python-Scrapy-使用笔记\" class=\"headerlink\" title=\"Python Scrapy 使用笔记\"></a>Python Scrapy 使用笔记</h1><h2 id=\"安装-Scrapy\"><a href=\"#安装-Scrapy\" class=\"headerlink\" title=\"安装 Scrapy\"></a>安装 Scrapy</h2><p>使用pip安装</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pip <span class=\"token function\">install</span> Scrapy<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"开始使用\"><a href=\"#开始使用\" class=\"headerlink\" title=\"开始使用\"></a>开始使用</h2><h3 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h3><p>scrapy startproject 项目名称</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">scrapy startproject tutorial<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h4><pre class=\"line-numbers language-none\"><code class=\"language-none\">tutorial&#x2F;\n    scrapy.cfg\n    tutorial&#x2F;\n        __init__.py\n        items.py\n        pipelines.py\n        settings.py\n        spiders&#x2F;\n            __init__.py\n            ...<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"文件说明\"><a href=\"#文件说明\" class=\"headerlink\" title=\"文件说明\"></a>文件说明</h5><ul>\n<li>scrapy.cfg: 项目的配置文件</li>\n<li>tutorial/: 该项目的python模块。之后您将在此加入代码。</li>\n<li>tutorial/items.py: 项目中的item文件.</li>\n<li>tutorial/pipelines.py: 项目中的pipelines文件.</li>\n<li>tutorial/settings.py: 项目的设置文件.</li>\n<li>tutorial/spiders/: 放置spider代码的目录.</li>\n</ul>\n<h3 id=\"编写爬虫\"><a href=\"#编写爬虫\" class=\"headerlink\" title=\"编写爬虫\"></a>编写爬虫</h3><p>为了创建一个Spider，您必须继承 scrapy.Spider 类， 且定义以下三个属性:</p>\n<ul>\n<li>name: 用于区别Spider。 该名字必须是唯一的，您不可以为不同的Spider设定相同的名字。</li>\n<li>start_urls: 包含了Spider在启动时进行爬取的url列表。 因此，第一个被获取到的页面将是其中之一。 后续的URL则从初始的URL获取到的数据中提取。</li>\n<li>parse() 是spider的一个方法。 被调用时，每个初始URL完成下载后生成的 Response 对象将会作为唯一的参数传递给该函数。 该方法负责解析返回的数据(response data)，提取数据(生成item)以及生成需要进一步处理的URL的 Request 对象。</li>\n</ul>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> scrapy\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">DmozSpider</span><span class=\"token punctuation\">(</span>scrapy<span class=\"token punctuation\">.</span>Spider<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    name <span class=\"token operator\">=</span> <span class=\"token string\">\"dmoz\"</span>\n    allowed_domains <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"dmoz.org\"</span><span class=\"token punctuation\">]</span>\n    start_urls <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">\"http://www.dmoz.org/Computers/Programming/Languages/Python/Books/\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token string\">\"http://www.dmoz.org/Computers/Programming/Languages/Python/Resources/\"</span>\n    <span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        filename <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span>url<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span> <span class=\"token string\">'wb'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n            f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"开始爬虫\"><a href=\"#开始爬虫\" class=\"headerlink\" title=\"开始爬虫\"></a>开始爬虫</h3><p>进入项目的根目录，执行下列命令启动spider:<br>scrapy crawl name属性的名字</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">scrapy crawl dmoz<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>"},{"title":"Python requests库session会话保存","author":"Will Holmes","date":"2021-10-17T15:03:03.000Z","_content":"\n> Python爬虫 requests库使用session会话保存cookies继续请求\n\n```python \nimport requests\n\n# 通过Session类新建一个会话\nsession = requests.Session()\npost_url = 'https://passport.weibo.cn/sso/login'\n# 往下使用requests的地方，直接使用session即可，session就会保存服务器发送过来的cookie信息\nheaders = {\n    'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.108 Safari/537.36',\n    'Referer': 'https://passport.weibo.cn/signin/login?entry=mweibo&r=http%3A%2F%2Fweibo.cn%2F&backTitle=%CE%A2%B2%A9&vt=',\n\n}\ndata = {\n    'username': '17312345678', # 账号\n    'password': 'password', # 密码\n    'savestate': '1',\n    'r': '',\n    'ec': '0',\n    'pagerefer': 'http://weibo.cn/',\n    'entry': 'mweibo',\n    'wentry': '',\n    'loginfrom': '',\n    'client_id': '',\n    'code': '',\n    'qq': '',\n    'mainpageflag': '1',\n    'hff': '',\n    'hfp': '',\n}\n\nr = session.post(url=post_url, data=data, headers=headers)\n\n# 上面的session会保存会话，往下发送请求，直接使用session即可\nurl = 'https://weibo.cn/6388179289/info'\nheaders1 = {\n    'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.108 Safari/537.36',\n}\nr = session.get(url=url, headers=headers1)\nprint(r.text)\n\n```\n\n\n## 引用\n原文链接：https://blog.csdn.net/haeasringnar/article/details/82558729","source":"_posts/Python-requests库session会话保存.md","raw":"---\ntitle: Python requests库session会话保存\nauthor: Will Holmes\ncategories: Python\ntags:\n  - Python\n  - Requests\ndate: 2021-10-17 23:03:03\n---\n\n> Python爬虫 requests库使用session会话保存cookies继续请求\n\n```python \nimport requests\n\n# 通过Session类新建一个会话\nsession = requests.Session()\npost_url = 'https://passport.weibo.cn/sso/login'\n# 往下使用requests的地方，直接使用session即可，session就会保存服务器发送过来的cookie信息\nheaders = {\n    'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.108 Safari/537.36',\n    'Referer': 'https://passport.weibo.cn/signin/login?entry=mweibo&r=http%3A%2F%2Fweibo.cn%2F&backTitle=%CE%A2%B2%A9&vt=',\n\n}\ndata = {\n    'username': '17312345678', # 账号\n    'password': 'password', # 密码\n    'savestate': '1',\n    'r': '',\n    'ec': '0',\n    'pagerefer': 'http://weibo.cn/',\n    'entry': 'mweibo',\n    'wentry': '',\n    'loginfrom': '',\n    'client_id': '',\n    'code': '',\n    'qq': '',\n    'mainpageflag': '1',\n    'hff': '',\n    'hfp': '',\n}\n\nr = session.post(url=post_url, data=data, headers=headers)\n\n# 上面的session会保存会话，往下发送请求，直接使用session即可\nurl = 'https://weibo.cn/6388179289/info'\nheaders1 = {\n    'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.108 Safari/537.36',\n}\nr = session.get(url=url, headers=headers1)\nprint(r.text)\n\n```\n\n\n## 引用\n原文链接：https://blog.csdn.net/haeasringnar/article/details/82558729","slug":"Python-requests库session会话保存","published":1,"updated":"2021-10-17T15:04:21.194Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckw4ars5b000ttyox7f45dqzl","content":"<blockquote>\n<p>Python爬虫 requests库使用session会话保存cookies继续请求</p>\n</blockquote>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> requests\n\n<span class=\"token comment\"># 通过Session类新建一个会话</span>\nsession <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>Session<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\npost_url <span class=\"token operator\">=</span> <span class=\"token string\">'https://passport.weibo.cn/sso/login'</span>\n<span class=\"token comment\"># 往下使用requests的地方，直接使用session即可，session就会保存服务器发送过来的cookie信息</span>\nheaders <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token string\">'User-Agent'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.108 Safari/537.36'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'Referer'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'https://passport.weibo.cn/signin/login?entry=mweibo&amp;r=http%3A%2F%2Fweibo.cn%2F&amp;backTitle=%CE%A2%B2%A9&amp;vt='</span><span class=\"token punctuation\">,</span>\n\n<span class=\"token punctuation\">&#125;</span>\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token string\">'username'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'17312345678'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\"># 账号</span>\n    <span class=\"token string\">'password'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'password'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\"># 密码</span>\n    <span class=\"token string\">'savestate'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'r'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'ec'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'pagerefer'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'http://weibo.cn/'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'entry'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'mweibo'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'wentry'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'loginfrom'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'client_id'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'code'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'qq'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'mainpageflag'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'hff'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'hfp'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span>\n\nr <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span>url<span class=\"token operator\">=</span>post_url<span class=\"token punctuation\">,</span> data<span class=\"token operator\">=</span>data<span class=\"token punctuation\">,</span> headers<span class=\"token operator\">=</span>headers<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 上面的session会保存会话，往下发送请求，直接使用session即可</span>\nurl <span class=\"token operator\">=</span> <span class=\"token string\">'https://weibo.cn/6388179289/info'</span>\nheaders1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token string\">'User-Agent'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.108 Safari/537.36'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span>\nr <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>url<span class=\"token operator\">=</span>url<span class=\"token punctuation\">,</span> headers<span class=\"token operator\">=</span>headers1<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h2 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h2><p>原文链接：<a href=\"https://blog.csdn.net/haeasringnar/article/details/82558729\">https://blog.csdn.net/haeasringnar/article/details/82558729</a></p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<blockquote>\n<p>Python爬虫 requests库使用session会话保存cookies继续请求</p>\n</blockquote>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> requests\n\n<span class=\"token comment\"># 通过Session类新建一个会话</span>\nsession <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>Session<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\npost_url <span class=\"token operator\">=</span> <span class=\"token string\">'https://passport.weibo.cn/sso/login'</span>\n<span class=\"token comment\"># 往下使用requests的地方，直接使用session即可，session就会保存服务器发送过来的cookie信息</span>\nheaders <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token string\">'User-Agent'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.108 Safari/537.36'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'Referer'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'https://passport.weibo.cn/signin/login?entry=mweibo&amp;r=http%3A%2F%2Fweibo.cn%2F&amp;backTitle=%CE%A2%B2%A9&amp;vt='</span><span class=\"token punctuation\">,</span>\n\n<span class=\"token punctuation\">&#125;</span>\ndata <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token string\">'username'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'17312345678'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\"># 账号</span>\n    <span class=\"token string\">'password'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'password'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\"># 密码</span>\n    <span class=\"token string\">'savestate'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'r'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'ec'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'0'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'pagerefer'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'http://weibo.cn/'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'entry'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'mweibo'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'wentry'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'loginfrom'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'client_id'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'code'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'qq'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'mainpageflag'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'hff'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'hfp'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span>\n\nr <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">(</span>url<span class=\"token operator\">=</span>post_url<span class=\"token punctuation\">,</span> data<span class=\"token operator\">=</span>data<span class=\"token punctuation\">,</span> headers<span class=\"token operator\">=</span>headers<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 上面的session会保存会话，往下发送请求，直接使用session即可</span>\nurl <span class=\"token operator\">=</span> <span class=\"token string\">'https://weibo.cn/6388179289/info'</span>\nheaders1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token string\">'User-Agent'</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.108 Safari/537.36'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">&#125;</span>\nr <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>url<span class=\"token operator\">=</span>url<span class=\"token punctuation\">,</span> headers<span class=\"token operator\">=</span>headers1<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<h2 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h2><p>原文链接：<a href=\"https://blog.csdn.net/haeasringnar/article/details/82558729\">https://blog.csdn.net/haeasringnar/article/details/82558729</a></p>\n"},{"title":"Mac下PyCharm快捷键大全","author":"Will Holmes","date":"2021-11-17T01:40:08.000Z","_content":"\n\n##  Mac键盘符号和修饰键说明\n\n* `⌘` Command\n* `⇧` Shift\n* `⌥` Option\n* `⌃` Control\n* `↩︎` Return/Enter\n* `⌫` Delete\n* `⌦` 向前删除键（Fn+Delete）\n* `↑` 上箭头\n* `↓` 下箭头\n* `←` 左箭头\n* `→` 右箭头\n* `⇞` Page Up（Fn+↑）\n* `⇟` Page Down（Fn+↓）\n* `Home` Fn + ←\n* `End` Fn + →\n* `⇥` 右制表符（Tab键）\n* `⇤` 左制表符（Shift+Tab）\n* `⎋` Escape (Esc)\n\n\n##  Editing（编辑）\n* `⌃Space` 基本的代码补全（补全任何类、方法、变量）\n* `⌃⇧Space` 智能代码补全（过滤器方法列表和变量的预期类型）\n* `⌘⇧↩` 自动结束代码，行末自动添加分号\n* `⌘P` 显示方法的参数信息\n* `⌃J, Mid. button click` 快速查看文档\n* `⇧F1` 查看外部文档（在某些代码上会触发打开浏览器显示相关文档）\n* `⌘+鼠标放在代码上` 显示代码简要信息\n* `⌘F1` 在错误或警告处显示具体描述信息\n* `⌘N, ⌃↩, ⌃N` 生成代码（getter、setter、构造函数、hashCode/equals,toString）\n* `⌃O` 覆盖方法（重写父类方法）\n* `⌃I` 实现方法（实现接口中的方法）\n* `⌘⌥T` 包围代码（使用if..else, try..catch, for, synchronized等包围选中的代码）\n* `⌘/` 注释/取消注释与行注释\n* `⌘⌥/` 注释/取消注释与块注释\n* `⌥↑` 连续选中代码块\n* `⌥↓` 减少当前选中的代码块\n* `⌃⇧Q` 显示上下文信息\n* `⌥↩` 显示意向动作和快速修复代码\n* `⌘⌥L` 格式化代码\n* `⌃⌥O` 优化import\n* `⌃⌥I` 自动缩进线\n* `⇥ / ⇧⇥` 缩进代码 / 反缩进代码\n* `⌘X` 剪切当前行或选定的块到剪贴板\n* `⌘C` 复制当前行或选定的块到剪贴板\n* `⌘V` 从剪贴板粘贴\n* `⌘⇧V` 从最近的缓冲区粘贴\n* `⌘D` 复制当前行或选定的块\n* `⌘⌫` 删除当前行或选定的块的行\n* `⌃⇧J` 智能的将代码拼接成一行\n* `⌘↩` 智能的拆分拼接的行\n* `⇧↩` 开始新的一行\n* `⌘⇧U` 大小写切换\n* `⌘⇧] / ⌘⇧[` 选择直到代码块结束/开始\n* `⌥⌦` 删除到单词的末尾（⌦键为Fn+Delete）\n* `⌥⌫` 删除到单词的开头\n* `⌘+ / ⌘-` 展开 / 折叠代码块\n* `⌘⇧+` 展开所以代码块\n* `⌘⇧-` 折叠所有代码块\n* `⌘W` 关闭活动的编辑器选项卡\n\n##  Search/Replace（查询/替换）\n* `Double ⇧` 查询任何东西\n* `⌘F` 文件内查找\n* `⌘G` 查找模式下，向下查找\n* `⌘⇧G` 查找模式下，向上查找\n* `⌘R` 文件内替换\n* `⌘⇧F` 全局查找（根据路径）\n* `⌘⇧R` 全局替换（根据路径）\n* `⌘⇧S` 查询结构（Ultimate Edition 版专用，需要在Keymap中设置）\n* `⌘⇧M` 替换结构（Ultimate Edition 版专用，需要在Keymap中设置）\n\n##  Usage Search（使用查询）\n* `⌥F7 / ⌘F7` 在文件中查找用法 / 在类中查找用法\n* `⌘⇧F7` 在文件中突出显示的用法\n* `⌘⌥F7` 显示用法\n  Compile and Run（编译和运行）\n* `⌘F9` 编译Project\n* `⌘⇧F9` 编译选择的文件、包或模块\n* `⌃⌥R` 弹出 Run 的可选择菜单\n* `⌃⌥D` 弹出 Debug 的可选择菜单\n* `⌃R` 运行\n* `⌃D` 调试\n* `⌃⇧R, ⌃⇧D` 从编辑器运行上下文环境配置\n  Debugging（调试）\n* `F8` 进入下一步，如果当前行断点是一个方法，则不进入当前方法体内\n* `F7` 进入下一步，如果当前行断点是一个方法，则进入当前方法体内，如果该方法体还有方法，则不会进入该内嵌的方法中\n* `⇧F7` 智能步入，断点所在行上有多个方法调用，会弹出进入哪个方法\n* `⇧F8` 跳出\n* `⌥F9` 运行到光标处，如果光标前有其他断点会进入到该断点\n* `⌥F8` 计算表达式（可以更改变量值使其生效）\n* `⌘⌥R` 恢复程序运行，如果该断点下面代码还有断点则停在下一个断点上\n* `⌘F8` 切换断点（若光标当前行有断点则取消断点，没有则加上断点）\n* `⌘⇧F8` 查看断点信息\n  Navigation（导航）\n* `⌘O` 查找类文件\n* `⌘⇧O` 查找所有类型文件、打开文件、打开目录，打开目录需要在输入的内容前面或后面加一个反斜杠`/`\n* `⌘⌥O` 前往指定的变量 / 方法\n* `⌃← / ⌃→` 左右切换打开的编辑tab页\n* `F12` 返回到前一个工具窗口\n* `⎋` 从工具窗口进入代码文件窗口\n* `⇧⎋` 隐藏当前或最后一个活动的窗口，且光标进入代码文件窗口\n* `⌘⇧F4` 关闭活动run/messages/find/… tab\n* `⌘L` 在当前文件跳转到某一行的指定处\n* `⌘E` 显示最近打开的文件记录列表\n* `⌘⌥← / ⌘⌥→` 退回 / 前进到上一个操作的地方\n* `⌘⇧⌫` 跳转到最后一个编辑的地方\n* `⌥F1` 显示当前文件选择目标弹出层，弹出层中有很多目标可以进行选择(如在代码编辑窗口可以选择显示该文件的Finder)\n* `⌘B / ⌘ 鼠标点击` 进入光标所在的方法/变量的接口或是定义处\n* `⌘⌥B` 跳转到实现处，在某个调用的方法名上使用会跳到具体的实现处，可以跳过接口\n* `⌥ Space, ⌘Y` 快速打开光标所在方法、类的定义\n* `⌃⇧B` 跳转到类型声明处\n* `⌘U` 前往当前光标所在方法的父类的方法 / 接口定义\n* `⌃↓ / ⌃↑` 当前光标跳转到当前文件的前一个/后一个方法名位置\n* `⌘] / ⌘[` 移动光标到当前所在代码的花括号开始/结束位置\n* `⌘F12` 弹出当前文件结构层，可以在弹出的层上直接输入进行筛选（可用于搜索类中的方法）\n* `⌃H` 显示当前类的层次结构\n* `⌘⇧H` 显示方法层次结构\n* `⌃⌥H` 显示调用层次结构\n* `F2 / ⇧F2` 跳转到下一个/上一个突出错误或警告的位置\n* `F4 / ⌘↓` 编辑/查看代码源\n* `⌥ Home` 显示到当前文件的导航条\n* `F3`选中文件/文件夹/代码行，添加/取消书签\n* `⌥F3` 选中文件/文件夹/代码行，使用助记符添加/取消书签\n* `⌃0...⌃9` 定位到对应数值的书签位置\n* `⌘F3` 显示所有书签\n\n##  Refactoring（重构）\n* `F5` 复制文件到指定目录\n* `F6` 移动文件到指定目录\n* `⌘⌫` 在文件上为安全删除文件，弹出确认框\n* `⇧F6` 重命名文件\n* `⌘F6` 更改签名\n* `⌘⌥N` 一致性\n* `⌘⌥M` 将选中的代码提取为方法\n* `⌘⌥V` 提取变量\n* `⌘⌥F` 提取字段\n* `⌘⌥C` 提取常量\n* `⌘⌥P` 提取参数\n\n\n##  VCS/Local History（版本控制/本地历史记录）\n* `⌘K` 提交代码到版本控制器\n* `⌘T` 从版本控制器更新代码\n* `⌥⇧C` 查看最近的变更记录\n* `⌃C` 快速弹出版本控制器操作面板\n\n\n##  Live Templates（动态代码模板）\n* `⌘⌥J` 弹出模板选择窗口，将选定的代码使用动态模板包住\n* `⌘J` 插入自定义动态代码模板\n\n##  General（通用）\n* `⌘1...⌘9` 打开相应编号的工具窗口\n* `⌘S` 保存所有\n* `⌘⌥Y` 同步、刷新\n* `⌃⌘F` 切换全屏模式\n* `⌘⇧F12` 切换最大化编辑器\n* `⌥⇧F` 添加到收藏夹\n* `⌥⇧I` 检查当前文件与当前的配置文件\n* `§⌃, ⌃“ 快速切换当前的scheme（切换主题、代码样式等）\n* `⌘,` 打开IDEA系统设置\n* `⌘;` 打开项目结构对话框\n* `⇧⌘A` 查找动作（可设置相关选项）\n* `⌃⇥` 编辑窗口标签和工具窗口之间切换（如果在切换的过程加按上delete，则是关闭对应选中的窗口）\n\n##  Other（一些官方文档上没有体现的快捷键）\n* `⌘⇧8` 竖编辑模式\n\n##  导航\n* `⌘O` 查找类文件 `Ctrl + N`\n* `⌘⌥O` 前往指定的变量 / 方法 `Ctrl + Shift + Alt + N`\n* `⌃←` / `⌃→` 左右切换打开的编辑tab页`Alt←`/`Alt→`\n* `⎋` 从工具窗口进入代码文件窗口 `ESC`\n* `⌘L` 在当前文件跳转到某一行的指定处 `Ctrl + G`\n* `⌘E` 显示最近打开的文件记录列表 `Ctrl + E`\n* `⌘⌥←`/ `⌘⌥→`退回 / 前进到上一个操作的地方 `Ctrl + Alt + ←`/`Ctrl + Alt + →`\n* `⌘⇧⌫` 跳转到最后一个编辑的地方\n* `⌃H` 显示当前类的层次结构`Ctrl + H`\n* `⌘⇧H` 显示方法层次结构\n* `⌃⌥H` 显示调用层次结构\n* `F4` /`⌘↓` 编辑/查看代码源\n* `⌘⌥U` 显示类UML图\n* `⌃J` 查看注释\n\n##  编辑\n* `⌥⌦` 删除到单词的末尾（`⌦`键为`Fn+Delete`）\n* `⌥⌫` 删除到单词的开头\n* `⌘+` /`⌘-` 展开 / 折叠代码块\n* `⌘F1` 在错误或警告处显示具体描述信息\n* `⌘⌥L` 格式化代码\n* `⌃⌥O` 优化import\n* `⇧↩` 开始新的一行\n* `⌘⇧↩` 自动结束代码，行末自动添加分号\n* `⌃I` 实现方法（实现接口中的方法）\n* `⇧F6` 重命名文件或者变量\n* `⌘N`,`⌃↩`,`⌃N` 生成代码（getter、setter、构造函数、hashCode/equals,toString）\n* `⌘P` 显示方法的参数信息\n\n##  查找\n* `Double⇧` 查找任何东西\n* `⌘⇧F` 全局查找（根据路径）\n* `⌘F` 文件内查找\n* `⌘G` 查找模式下，向下查找\n* `⌘⇧G` 查找模式下，向上查找\n\n##  导航\n* `⌘⌥B` 跳转到接口的实现\n* `⌘U` 查看接口定义\n* `⌘⌥←` /`⌘⌥→` 退回 / 前进到上一个操作的地方\n* `⌘B` /`⌘ 鼠标点击` 进入光标所在的方法/变量的接口或是定义处\n* `⌃⇧B` 跳转到类型声明处\n* `⌥ Space`,`⌘Y` 快速打开光标所在方法、类的定义\n* `⌘O` 查找类文件\n* `⌘⇧O` 查找所有类型文件、打开文件、打开目录，打开目录需要在输入的内容前面或后面加一个反斜杠/\n* `F12` 返回到前一个工具窗口\n* `⎋` 从工具窗口进入代码文件窗口\n* `⇧⎋` 隐藏当前或最后一个活动的窗口，且光标进入代码文件窗口\n* `F3选中文件/文件夹/代码行`，添加/取消书签\n* `⌥F3 选中文件/文件夹/代码行`，使用助记符添加/取消书签\n* `⌃0…⌃9` 定位到对应数值的书签位置\n* `⌘F3` 显示所有书签\n* `⌥F1` 显示当前文件选择目标弹出层，弹出层中有很多目标可以进行选择(如在代码编辑窗口可以选择显示该文件的Finder)\n* `⌘F12` 弹出当前文件结构层，可以在弹出的层上直接输入进行筛选（可用于搜索类中的方法）\n\n##  通用\n* `⌃⌘F` 切换全屏模式\n\n##  自动代码\n ⚠注：`⌘`+`J`可以调出所有提供的代码补全`↩`即可，下面仅列举常用的几个\n 原文地址：https://linmi.cc/836\n","source":"_posts/Mac下PyCharm快捷键大全.md","raw":"---\ntitle: Mac下PyCharm快捷键大全\nauthor: Will Holmes\ncategories: 工具\ntags:\n  - PyCharm\n  - 工具\n  - 快捷键\n  - MacOS\ndate: 2021-11-17 09:40:08\n---\n\n\n##  Mac键盘符号和修饰键说明\n\n* `⌘` Command\n* `⇧` Shift\n* `⌥` Option\n* `⌃` Control\n* `↩︎` Return/Enter\n* `⌫` Delete\n* `⌦` 向前删除键（Fn+Delete）\n* `↑` 上箭头\n* `↓` 下箭头\n* `←` 左箭头\n* `→` 右箭头\n* `⇞` Page Up（Fn+↑）\n* `⇟` Page Down（Fn+↓）\n* `Home` Fn + ←\n* `End` Fn + →\n* `⇥` 右制表符（Tab键）\n* `⇤` 左制表符（Shift+Tab）\n* `⎋` Escape (Esc)\n\n\n##  Editing（编辑）\n* `⌃Space` 基本的代码补全（补全任何类、方法、变量）\n* `⌃⇧Space` 智能代码补全（过滤器方法列表和变量的预期类型）\n* `⌘⇧↩` 自动结束代码，行末自动添加分号\n* `⌘P` 显示方法的参数信息\n* `⌃J, Mid. button click` 快速查看文档\n* `⇧F1` 查看外部文档（在某些代码上会触发打开浏览器显示相关文档）\n* `⌘+鼠标放在代码上` 显示代码简要信息\n* `⌘F1` 在错误或警告处显示具体描述信息\n* `⌘N, ⌃↩, ⌃N` 生成代码（getter、setter、构造函数、hashCode/equals,toString）\n* `⌃O` 覆盖方法（重写父类方法）\n* `⌃I` 实现方法（实现接口中的方法）\n* `⌘⌥T` 包围代码（使用if..else, try..catch, for, synchronized等包围选中的代码）\n* `⌘/` 注释/取消注释与行注释\n* `⌘⌥/` 注释/取消注释与块注释\n* `⌥↑` 连续选中代码块\n* `⌥↓` 减少当前选中的代码块\n* `⌃⇧Q` 显示上下文信息\n* `⌥↩` 显示意向动作和快速修复代码\n* `⌘⌥L` 格式化代码\n* `⌃⌥O` 优化import\n* `⌃⌥I` 自动缩进线\n* `⇥ / ⇧⇥` 缩进代码 / 反缩进代码\n* `⌘X` 剪切当前行或选定的块到剪贴板\n* `⌘C` 复制当前行或选定的块到剪贴板\n* `⌘V` 从剪贴板粘贴\n* `⌘⇧V` 从最近的缓冲区粘贴\n* `⌘D` 复制当前行或选定的块\n* `⌘⌫` 删除当前行或选定的块的行\n* `⌃⇧J` 智能的将代码拼接成一行\n* `⌘↩` 智能的拆分拼接的行\n* `⇧↩` 开始新的一行\n* `⌘⇧U` 大小写切换\n* `⌘⇧] / ⌘⇧[` 选择直到代码块结束/开始\n* `⌥⌦` 删除到单词的末尾（⌦键为Fn+Delete）\n* `⌥⌫` 删除到单词的开头\n* `⌘+ / ⌘-` 展开 / 折叠代码块\n* `⌘⇧+` 展开所以代码块\n* `⌘⇧-` 折叠所有代码块\n* `⌘W` 关闭活动的编辑器选项卡\n\n##  Search/Replace（查询/替换）\n* `Double ⇧` 查询任何东西\n* `⌘F` 文件内查找\n* `⌘G` 查找模式下，向下查找\n* `⌘⇧G` 查找模式下，向上查找\n* `⌘R` 文件内替换\n* `⌘⇧F` 全局查找（根据路径）\n* `⌘⇧R` 全局替换（根据路径）\n* `⌘⇧S` 查询结构（Ultimate Edition 版专用，需要在Keymap中设置）\n* `⌘⇧M` 替换结构（Ultimate Edition 版专用，需要在Keymap中设置）\n\n##  Usage Search（使用查询）\n* `⌥F7 / ⌘F7` 在文件中查找用法 / 在类中查找用法\n* `⌘⇧F7` 在文件中突出显示的用法\n* `⌘⌥F7` 显示用法\n  Compile and Run（编译和运行）\n* `⌘F9` 编译Project\n* `⌘⇧F9` 编译选择的文件、包或模块\n* `⌃⌥R` 弹出 Run 的可选择菜单\n* `⌃⌥D` 弹出 Debug 的可选择菜单\n* `⌃R` 运行\n* `⌃D` 调试\n* `⌃⇧R, ⌃⇧D` 从编辑器运行上下文环境配置\n  Debugging（调试）\n* `F8` 进入下一步，如果当前行断点是一个方法，则不进入当前方法体内\n* `F7` 进入下一步，如果当前行断点是一个方法，则进入当前方法体内，如果该方法体还有方法，则不会进入该内嵌的方法中\n* `⇧F7` 智能步入，断点所在行上有多个方法调用，会弹出进入哪个方法\n* `⇧F8` 跳出\n* `⌥F9` 运行到光标处，如果光标前有其他断点会进入到该断点\n* `⌥F8` 计算表达式（可以更改变量值使其生效）\n* `⌘⌥R` 恢复程序运行，如果该断点下面代码还有断点则停在下一个断点上\n* `⌘F8` 切换断点（若光标当前行有断点则取消断点，没有则加上断点）\n* `⌘⇧F8` 查看断点信息\n  Navigation（导航）\n* `⌘O` 查找类文件\n* `⌘⇧O` 查找所有类型文件、打开文件、打开目录，打开目录需要在输入的内容前面或后面加一个反斜杠`/`\n* `⌘⌥O` 前往指定的变量 / 方法\n* `⌃← / ⌃→` 左右切换打开的编辑tab页\n* `F12` 返回到前一个工具窗口\n* `⎋` 从工具窗口进入代码文件窗口\n* `⇧⎋` 隐藏当前或最后一个活动的窗口，且光标进入代码文件窗口\n* `⌘⇧F4` 关闭活动run/messages/find/… tab\n* `⌘L` 在当前文件跳转到某一行的指定处\n* `⌘E` 显示最近打开的文件记录列表\n* `⌘⌥← / ⌘⌥→` 退回 / 前进到上一个操作的地方\n* `⌘⇧⌫` 跳转到最后一个编辑的地方\n* `⌥F1` 显示当前文件选择目标弹出层，弹出层中有很多目标可以进行选择(如在代码编辑窗口可以选择显示该文件的Finder)\n* `⌘B / ⌘ 鼠标点击` 进入光标所在的方法/变量的接口或是定义处\n* `⌘⌥B` 跳转到实现处，在某个调用的方法名上使用会跳到具体的实现处，可以跳过接口\n* `⌥ Space, ⌘Y` 快速打开光标所在方法、类的定义\n* `⌃⇧B` 跳转到类型声明处\n* `⌘U` 前往当前光标所在方法的父类的方法 / 接口定义\n* `⌃↓ / ⌃↑` 当前光标跳转到当前文件的前一个/后一个方法名位置\n* `⌘] / ⌘[` 移动光标到当前所在代码的花括号开始/结束位置\n* `⌘F12` 弹出当前文件结构层，可以在弹出的层上直接输入进行筛选（可用于搜索类中的方法）\n* `⌃H` 显示当前类的层次结构\n* `⌘⇧H` 显示方法层次结构\n* `⌃⌥H` 显示调用层次结构\n* `F2 / ⇧F2` 跳转到下一个/上一个突出错误或警告的位置\n* `F4 / ⌘↓` 编辑/查看代码源\n* `⌥ Home` 显示到当前文件的导航条\n* `F3`选中文件/文件夹/代码行，添加/取消书签\n* `⌥F3` 选中文件/文件夹/代码行，使用助记符添加/取消书签\n* `⌃0...⌃9` 定位到对应数值的书签位置\n* `⌘F3` 显示所有书签\n\n##  Refactoring（重构）\n* `F5` 复制文件到指定目录\n* `F6` 移动文件到指定目录\n* `⌘⌫` 在文件上为安全删除文件，弹出确认框\n* `⇧F6` 重命名文件\n* `⌘F6` 更改签名\n* `⌘⌥N` 一致性\n* `⌘⌥M` 将选中的代码提取为方法\n* `⌘⌥V` 提取变量\n* `⌘⌥F` 提取字段\n* `⌘⌥C` 提取常量\n* `⌘⌥P` 提取参数\n\n\n##  VCS/Local History（版本控制/本地历史记录）\n* `⌘K` 提交代码到版本控制器\n* `⌘T` 从版本控制器更新代码\n* `⌥⇧C` 查看最近的变更记录\n* `⌃C` 快速弹出版本控制器操作面板\n\n\n##  Live Templates（动态代码模板）\n* `⌘⌥J` 弹出模板选择窗口，将选定的代码使用动态模板包住\n* `⌘J` 插入自定义动态代码模板\n\n##  General（通用）\n* `⌘1...⌘9` 打开相应编号的工具窗口\n* `⌘S` 保存所有\n* `⌘⌥Y` 同步、刷新\n* `⌃⌘F` 切换全屏模式\n* `⌘⇧F12` 切换最大化编辑器\n* `⌥⇧F` 添加到收藏夹\n* `⌥⇧I` 检查当前文件与当前的配置文件\n* `§⌃, ⌃“ 快速切换当前的scheme（切换主题、代码样式等）\n* `⌘,` 打开IDEA系统设置\n* `⌘;` 打开项目结构对话框\n* `⇧⌘A` 查找动作（可设置相关选项）\n* `⌃⇥` 编辑窗口标签和工具窗口之间切换（如果在切换的过程加按上delete，则是关闭对应选中的窗口）\n\n##  Other（一些官方文档上没有体现的快捷键）\n* `⌘⇧8` 竖编辑模式\n\n##  导航\n* `⌘O` 查找类文件 `Ctrl + N`\n* `⌘⌥O` 前往指定的变量 / 方法 `Ctrl + Shift + Alt + N`\n* `⌃←` / `⌃→` 左右切换打开的编辑tab页`Alt←`/`Alt→`\n* `⎋` 从工具窗口进入代码文件窗口 `ESC`\n* `⌘L` 在当前文件跳转到某一行的指定处 `Ctrl + G`\n* `⌘E` 显示最近打开的文件记录列表 `Ctrl + E`\n* `⌘⌥←`/ `⌘⌥→`退回 / 前进到上一个操作的地方 `Ctrl + Alt + ←`/`Ctrl + Alt + →`\n* `⌘⇧⌫` 跳转到最后一个编辑的地方\n* `⌃H` 显示当前类的层次结构`Ctrl + H`\n* `⌘⇧H` 显示方法层次结构\n* `⌃⌥H` 显示调用层次结构\n* `F4` /`⌘↓` 编辑/查看代码源\n* `⌘⌥U` 显示类UML图\n* `⌃J` 查看注释\n\n##  编辑\n* `⌥⌦` 删除到单词的末尾（`⌦`键为`Fn+Delete`）\n* `⌥⌫` 删除到单词的开头\n* `⌘+` /`⌘-` 展开 / 折叠代码块\n* `⌘F1` 在错误或警告处显示具体描述信息\n* `⌘⌥L` 格式化代码\n* `⌃⌥O` 优化import\n* `⇧↩` 开始新的一行\n* `⌘⇧↩` 自动结束代码，行末自动添加分号\n* `⌃I` 实现方法（实现接口中的方法）\n* `⇧F6` 重命名文件或者变量\n* `⌘N`,`⌃↩`,`⌃N` 生成代码（getter、setter、构造函数、hashCode/equals,toString）\n* `⌘P` 显示方法的参数信息\n\n##  查找\n* `Double⇧` 查找任何东西\n* `⌘⇧F` 全局查找（根据路径）\n* `⌘F` 文件内查找\n* `⌘G` 查找模式下，向下查找\n* `⌘⇧G` 查找模式下，向上查找\n\n##  导航\n* `⌘⌥B` 跳转到接口的实现\n* `⌘U` 查看接口定义\n* `⌘⌥←` /`⌘⌥→` 退回 / 前进到上一个操作的地方\n* `⌘B` /`⌘ 鼠标点击` 进入光标所在的方法/变量的接口或是定义处\n* `⌃⇧B` 跳转到类型声明处\n* `⌥ Space`,`⌘Y` 快速打开光标所在方法、类的定义\n* `⌘O` 查找类文件\n* `⌘⇧O` 查找所有类型文件、打开文件、打开目录，打开目录需要在输入的内容前面或后面加一个反斜杠/\n* `F12` 返回到前一个工具窗口\n* `⎋` 从工具窗口进入代码文件窗口\n* `⇧⎋` 隐藏当前或最后一个活动的窗口，且光标进入代码文件窗口\n* `F3选中文件/文件夹/代码行`，添加/取消书签\n* `⌥F3 选中文件/文件夹/代码行`，使用助记符添加/取消书签\n* `⌃0…⌃9` 定位到对应数值的书签位置\n* `⌘F3` 显示所有书签\n* `⌥F1` 显示当前文件选择目标弹出层，弹出层中有很多目标可以进行选择(如在代码编辑窗口可以选择显示该文件的Finder)\n* `⌘F12` 弹出当前文件结构层，可以在弹出的层上直接输入进行筛选（可用于搜索类中的方法）\n\n##  通用\n* `⌃⌘F` 切换全屏模式\n\n##  自动代码\n ⚠注：`⌘`+`J`可以调出所有提供的代码补全`↩`即可，下面仅列举常用的几个\n 原文地址：https://linmi.cc/836\n","slug":"Mac下PyCharm快捷键大全","published":1,"updated":"2021-11-17T02:04:15.690Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckw4ars5d000xtyoxbmltarts","content":"<h2 id=\"Mac键盘符号和修饰键说明\"><a href=\"#Mac键盘符号和修饰键说明\" class=\"headerlink\" title=\"Mac键盘符号和修饰键说明\"></a>Mac键盘符号和修饰键说明</h2><ul>\n<li><code>⌘</code> Command</li>\n<li><code>⇧</code> Shift</li>\n<li><code>⌥</code> Option</li>\n<li><code>⌃</code> Control</li>\n<li><code>↩︎</code> Return/Enter</li>\n<li><code>⌫</code> Delete</li>\n<li><code>⌦</code> 向前删除键（Fn+Delete）</li>\n<li><code>↑</code> 上箭头</li>\n<li><code>↓</code> 下箭头</li>\n<li><code>←</code> 左箭头</li>\n<li><code>→</code> 右箭头</li>\n<li><code>⇞</code> Page Up（Fn+↑）</li>\n<li><code>⇟</code> Page Down（Fn+↓）</li>\n<li><code>Home</code> Fn + ←</li>\n<li><code>End</code> Fn + →</li>\n<li><code>⇥</code> 右制表符（Tab键）</li>\n<li><code>⇤</code> 左制表符（Shift+Tab）</li>\n<li><code>⎋</code> Escape (Esc)</li>\n</ul>\n<h2 id=\"Editing（编辑）\"><a href=\"#Editing（编辑）\" class=\"headerlink\" title=\"Editing（编辑）\"></a>Editing（编辑）</h2><ul>\n<li><code>⌃Space</code> 基本的代码补全（补全任何类、方法、变量）</li>\n<li><code>⌃⇧Space</code> 智能代码补全（过滤器方法列表和变量的预期类型）</li>\n<li><code>⌘⇧↩</code> 自动结束代码，行末自动添加分号</li>\n<li><code>⌘P</code> 显示方法的参数信息</li>\n<li><code>⌃J, Mid. button click</code> 快速查看文档</li>\n<li><code>⇧F1</code> 查看外部文档（在某些代码上会触发打开浏览器显示相关文档）</li>\n<li><code>⌘+鼠标放在代码上</code> 显示代码简要信息</li>\n<li><code>⌘F1</code> 在错误或警告处显示具体描述信息</li>\n<li><code>⌘N, ⌃↩, ⌃N</code> 生成代码（getter、setter、构造函数、hashCode/equals,toString）</li>\n<li><code>⌃O</code> 覆盖方法（重写父类方法）</li>\n<li><code>⌃I</code> 实现方法（实现接口中的方法）</li>\n<li><code>⌘⌥T</code> 包围代码（使用if..else, try..catch, for, synchronized等包围选中的代码）</li>\n<li><code>⌘/</code> 注释/取消注释与行注释</li>\n<li><code>⌘⌥/</code> 注释/取消注释与块注释</li>\n<li><code>⌥↑</code> 连续选中代码块</li>\n<li><code>⌥↓</code> 减少当前选中的代码块</li>\n<li><code>⌃⇧Q</code> 显示上下文信息</li>\n<li><code>⌥↩</code> 显示意向动作和快速修复代码</li>\n<li><code>⌘⌥L</code> 格式化代码</li>\n<li><code>⌃⌥O</code> 优化import</li>\n<li><code>⌃⌥I</code> 自动缩进线</li>\n<li><code>⇥ / ⇧⇥</code> 缩进代码 / 反缩进代码</li>\n<li><code>⌘X</code> 剪切当前行或选定的块到剪贴板</li>\n<li><code>⌘C</code> 复制当前行或选定的块到剪贴板</li>\n<li><code>⌘V</code> 从剪贴板粘贴</li>\n<li><code>⌘⇧V</code> 从最近的缓冲区粘贴</li>\n<li><code>⌘D</code> 复制当前行或选定的块</li>\n<li><code>⌘⌫</code> 删除当前行或选定的块的行</li>\n<li><code>⌃⇧J</code> 智能的将代码拼接成一行</li>\n<li><code>⌘↩</code> 智能的拆分拼接的行</li>\n<li><code>⇧↩</code> 开始新的一行</li>\n<li><code>⌘⇧U</code> 大小写切换</li>\n<li><code>⌘⇧] / ⌘⇧[</code> 选择直到代码块结束/开始</li>\n<li><code>⌥⌦</code> 删除到单词的末尾（⌦键为Fn+Delete）</li>\n<li><code>⌥⌫</code> 删除到单词的开头</li>\n<li><code>⌘+ / ⌘-</code> 展开 / 折叠代码块</li>\n<li><code>⌘⇧+</code> 展开所以代码块</li>\n<li><code>⌘⇧-</code> 折叠所有代码块</li>\n<li><code>⌘W</code> 关闭活动的编辑器选项卡</li>\n</ul>\n<h2 id=\"Search-Replace（查询-替换）\"><a href=\"#Search-Replace（查询-替换）\" class=\"headerlink\" title=\"Search/Replace（查询/替换）\"></a>Search/Replace（查询/替换）</h2><ul>\n<li><code>Double ⇧</code> 查询任何东西</li>\n<li><code>⌘F</code> 文件内查找</li>\n<li><code>⌘G</code> 查找模式下，向下查找</li>\n<li><code>⌘⇧G</code> 查找模式下，向上查找</li>\n<li><code>⌘R</code> 文件内替换</li>\n<li><code>⌘⇧F</code> 全局查找（根据路径）</li>\n<li><code>⌘⇧R</code> 全局替换（根据路径）</li>\n<li><code>⌘⇧S</code> 查询结构（Ultimate Edition 版专用，需要在Keymap中设置）</li>\n<li><code>⌘⇧M</code> 替换结构（Ultimate Edition 版专用，需要在Keymap中设置）</li>\n</ul>\n<h2 id=\"Usage-Search（使用查询）\"><a href=\"#Usage-Search（使用查询）\" class=\"headerlink\" title=\"Usage Search（使用查询）\"></a>Usage Search（使用查询）</h2><ul>\n<li><code>⌥F7 / ⌘F7</code> 在文件中查找用法 / 在类中查找用法</li>\n<li><code>⌘⇧F7</code> 在文件中突出显示的用法</li>\n<li><code>⌘⌥F7</code> 显示用法<br>Compile and Run（编译和运行）</li>\n<li><code>⌘F9</code> 编译Project</li>\n<li><code>⌘⇧F9</code> 编译选择的文件、包或模块</li>\n<li><code>⌃⌥R</code> 弹出 Run 的可选择菜单</li>\n<li><code>⌃⌥D</code> 弹出 Debug 的可选择菜单</li>\n<li><code>⌃R</code> 运行</li>\n<li><code>⌃D</code> 调试</li>\n<li><code>⌃⇧R, ⌃⇧D</code> 从编辑器运行上下文环境配置<br>Debugging（调试）</li>\n<li><code>F8</code> 进入下一步，如果当前行断点是一个方法，则不进入当前方法体内</li>\n<li><code>F7</code> 进入下一步，如果当前行断点是一个方法，则进入当前方法体内，如果该方法体还有方法，则不会进入该内嵌的方法中</li>\n<li><code>⇧F7</code> 智能步入，断点所在行上有多个方法调用，会弹出进入哪个方法</li>\n<li><code>⇧F8</code> 跳出</li>\n<li><code>⌥F9</code> 运行到光标处，如果光标前有其他断点会进入到该断点</li>\n<li><code>⌥F8</code> 计算表达式（可以更改变量值使其生效）</li>\n<li><code>⌘⌥R</code> 恢复程序运行，如果该断点下面代码还有断点则停在下一个断点上</li>\n<li><code>⌘F8</code> 切换断点（若光标当前行有断点则取消断点，没有则加上断点）</li>\n<li><code>⌘⇧F8</code> 查看断点信息<br>Navigation（导航）</li>\n<li><code>⌘O</code> 查找类文件</li>\n<li><code>⌘⇧O</code> 查找所有类型文件、打开文件、打开目录，打开目录需要在输入的内容前面或后面加一个反斜杠<code>/</code></li>\n<li><code>⌘⌥O</code> 前往指定的变量 / 方法</li>\n<li><code>⌃← / ⌃→</code> 左右切换打开的编辑tab页</li>\n<li><code>F12</code> 返回到前一个工具窗口</li>\n<li><code>⎋</code> 从工具窗口进入代码文件窗口</li>\n<li><code>⇧⎋</code> 隐藏当前或最后一个活动的窗口，且光标进入代码文件窗口</li>\n<li><code>⌘⇧F4</code> 关闭活动run/messages/find/… tab</li>\n<li><code>⌘L</code> 在当前文件跳转到某一行的指定处</li>\n<li><code>⌘E</code> 显示最近打开的文件记录列表</li>\n<li><code>⌘⌥← / ⌘⌥→</code> 退回 / 前进到上一个操作的地方</li>\n<li><code>⌘⇧⌫</code> 跳转到最后一个编辑的地方</li>\n<li><code>⌥F1</code> 显示当前文件选择目标弹出层，弹出层中有很多目标可以进行选择(如在代码编辑窗口可以选择显示该文件的Finder)</li>\n<li><code>⌘B / ⌘ 鼠标点击</code> 进入光标所在的方法/变量的接口或是定义处</li>\n<li><code>⌘⌥B</code> 跳转到实现处，在某个调用的方法名上使用会跳到具体的实现处，可以跳过接口</li>\n<li><code>⌥ Space, ⌘Y</code> 快速打开光标所在方法、类的定义</li>\n<li><code>⌃⇧B</code> 跳转到类型声明处</li>\n<li><code>⌘U</code> 前往当前光标所在方法的父类的方法 / 接口定义</li>\n<li><code>⌃↓ / ⌃↑</code> 当前光标跳转到当前文件的前一个/后一个方法名位置</li>\n<li><code>⌘] / ⌘[</code> 移动光标到当前所在代码的花括号开始/结束位置</li>\n<li><code>⌘F12</code> 弹出当前文件结构层，可以在弹出的层上直接输入进行筛选（可用于搜索类中的方法）</li>\n<li><code>⌃H</code> 显示当前类的层次结构</li>\n<li><code>⌘⇧H</code> 显示方法层次结构</li>\n<li><code>⌃⌥H</code> 显示调用层次结构</li>\n<li><code>F2 / ⇧F2</code> 跳转到下一个/上一个突出错误或警告的位置</li>\n<li><code>F4 / ⌘↓</code> 编辑/查看代码源</li>\n<li><code>⌥ Home</code> 显示到当前文件的导航条</li>\n<li><code>F3</code>选中文件/文件夹/代码行，添加/取消书签</li>\n<li><code>⌥F3</code> 选中文件/文件夹/代码行，使用助记符添加/取消书签</li>\n<li><code>⌃0...⌃9</code> 定位到对应数值的书签位置</li>\n<li><code>⌘F3</code> 显示所有书签</li>\n</ul>\n<h2 id=\"Refactoring（重构）\"><a href=\"#Refactoring（重构）\" class=\"headerlink\" title=\"Refactoring（重构）\"></a>Refactoring（重构）</h2><ul>\n<li><code>F5</code> 复制文件到指定目录</li>\n<li><code>F6</code> 移动文件到指定目录</li>\n<li><code>⌘⌫</code> 在文件上为安全删除文件，弹出确认框</li>\n<li><code>⇧F6</code> 重命名文件</li>\n<li><code>⌘F6</code> 更改签名</li>\n<li><code>⌘⌥N</code> 一致性</li>\n<li><code>⌘⌥M</code> 将选中的代码提取为方法</li>\n<li><code>⌘⌥V</code> 提取变量</li>\n<li><code>⌘⌥F</code> 提取字段</li>\n<li><code>⌘⌥C</code> 提取常量</li>\n<li><code>⌘⌥P</code> 提取参数</li>\n</ul>\n<h2 id=\"VCS-Local-History（版本控制-本地历史记录）\"><a href=\"#VCS-Local-History（版本控制-本地历史记录）\" class=\"headerlink\" title=\"VCS/Local History（版本控制/本地历史记录）\"></a>VCS/Local History（版本控制/本地历史记录）</h2><ul>\n<li><code>⌘K</code> 提交代码到版本控制器</li>\n<li><code>⌘T</code> 从版本控制器更新代码</li>\n<li><code>⌥⇧C</code> 查看最近的变更记录</li>\n<li><code>⌃C</code> 快速弹出版本控制器操作面板</li>\n</ul>\n<h2 id=\"Live-Templates（动态代码模板）\"><a href=\"#Live-Templates（动态代码模板）\" class=\"headerlink\" title=\"Live Templates（动态代码模板）\"></a>Live Templates（动态代码模板）</h2><ul>\n<li><code>⌘⌥J</code> 弹出模板选择窗口，将选定的代码使用动态模板包住</li>\n<li><code>⌘J</code> 插入自定义动态代码模板</li>\n</ul>\n<h2 id=\"General（通用）\"><a href=\"#General（通用）\" class=\"headerlink\" title=\"General（通用）\"></a>General（通用）</h2><ul>\n<li><code>⌘1...⌘9</code> 打开相应编号的工具窗口</li>\n<li><code>⌘S</code> 保存所有</li>\n<li><code>⌘⌥Y</code> 同步、刷新</li>\n<li><code>⌃⌘F</code> 切换全屏模式</li>\n<li><code>⌘⇧F12</code> 切换最大化编辑器</li>\n<li><code>⌥⇧F</code> 添加到收藏夹</li>\n<li><code>⌥⇧I</code> 检查当前文件与当前的配置文件</li>\n<li>`§⌃, ⌃“ 快速切换当前的scheme（切换主题、代码样式等）</li>\n<li><code>⌘,</code> 打开IDEA系统设置</li>\n<li><code>⌘;</code> 打开项目结构对话框</li>\n<li><code>⇧⌘A</code> 查找动作（可设置相关选项）</li>\n<li><code>⌃⇥</code> 编辑窗口标签和工具窗口之间切换（如果在切换的过程加按上delete，则是关闭对应选中的窗口）</li>\n</ul>\n<h2 id=\"Other（一些官方文档上没有体现的快捷键）\"><a href=\"#Other（一些官方文档上没有体现的快捷键）\" class=\"headerlink\" title=\"Other（一些官方文档上没有体现的快捷键）\"></a>Other（一些官方文档上没有体现的快捷键）</h2><ul>\n<li><code>⌘⇧8</code> 竖编辑模式</li>\n</ul>\n<h2 id=\"导航\"><a href=\"#导航\" class=\"headerlink\" title=\"导航\"></a>导航</h2><ul>\n<li><code>⌘O</code> 查找类文件 <code>Ctrl + N</code></li>\n<li><code>⌘⌥O</code> 前往指定的变量 / 方法 <code>Ctrl + Shift + Alt + N</code></li>\n<li><code>⌃←</code> / <code>⌃→</code> 左右切换打开的编辑tab页<code>Alt←</code>/<code>Alt→</code></li>\n<li><code>⎋</code> 从工具窗口进入代码文件窗口 <code>ESC</code></li>\n<li><code>⌘L</code> 在当前文件跳转到某一行的指定处 <code>Ctrl + G</code></li>\n<li><code>⌘E</code> 显示最近打开的文件记录列表 <code>Ctrl + E</code></li>\n<li><code>⌘⌥←</code>/ <code>⌘⌥→</code>退回 / 前进到上一个操作的地方 <code>Ctrl + Alt + ←</code>/<code>Ctrl + Alt + →</code></li>\n<li><code>⌘⇧⌫</code> 跳转到最后一个编辑的地方</li>\n<li><code>⌃H</code> 显示当前类的层次结构<code>Ctrl + H</code></li>\n<li><code>⌘⇧H</code> 显示方法层次结构</li>\n<li><code>⌃⌥H</code> 显示调用层次结构</li>\n<li><code>F4</code> /<code>⌘↓</code> 编辑/查看代码源</li>\n<li><code>⌘⌥U</code> 显示类UML图</li>\n<li><code>⌃J</code> 查看注释</li>\n</ul>\n<h2 id=\"编辑\"><a href=\"#编辑\" class=\"headerlink\" title=\"编辑\"></a>编辑</h2><ul>\n<li><code>⌥⌦</code> 删除到单词的末尾（<code>⌦</code>键为<code>Fn+Delete</code>）</li>\n<li><code>⌥⌫</code> 删除到单词的开头</li>\n<li><code>⌘+</code> /<code>⌘-</code> 展开 / 折叠代码块</li>\n<li><code>⌘F1</code> 在错误或警告处显示具体描述信息</li>\n<li><code>⌘⌥L</code> 格式化代码</li>\n<li><code>⌃⌥O</code> 优化import</li>\n<li><code>⇧↩</code> 开始新的一行</li>\n<li><code>⌘⇧↩</code> 自动结束代码，行末自动添加分号</li>\n<li><code>⌃I</code> 实现方法（实现接口中的方法）</li>\n<li><code>⇧F6</code> 重命名文件或者变量</li>\n<li><code>⌘N</code>,<code>⌃↩</code>,<code>⌃N</code> 生成代码（getter、setter、构造函数、hashCode/equals,toString）</li>\n<li><code>⌘P</code> 显示方法的参数信息</li>\n</ul>\n<h2 id=\"查找\"><a href=\"#查找\" class=\"headerlink\" title=\"查找\"></a>查找</h2><ul>\n<li><code>Double⇧</code> 查找任何东西</li>\n<li><code>⌘⇧F</code> 全局查找（根据路径）</li>\n<li><code>⌘F</code> 文件内查找</li>\n<li><code>⌘G</code> 查找模式下，向下查找</li>\n<li><code>⌘⇧G</code> 查找模式下，向上查找</li>\n</ul>\n<h2 id=\"导航-1\"><a href=\"#导航-1\" class=\"headerlink\" title=\"导航\"></a>导航</h2><ul>\n<li><code>⌘⌥B</code> 跳转到接口的实现</li>\n<li><code>⌘U</code> 查看接口定义</li>\n<li><code>⌘⌥←</code> /<code>⌘⌥→</code> 退回 / 前进到上一个操作的地方</li>\n<li><code>⌘B</code> /<code>⌘ 鼠标点击</code> 进入光标所在的方法/变量的接口或是定义处</li>\n<li><code>⌃⇧B</code> 跳转到类型声明处</li>\n<li><code>⌥ Space</code>,<code>⌘Y</code> 快速打开光标所在方法、类的定义</li>\n<li><code>⌘O</code> 查找类文件</li>\n<li><code>⌘⇧O</code> 查找所有类型文件、打开文件、打开目录，打开目录需要在输入的内容前面或后面加一个反斜杠/</li>\n<li><code>F12</code> 返回到前一个工具窗口</li>\n<li><code>⎋</code> 从工具窗口进入代码文件窗口</li>\n<li><code>⇧⎋</code> 隐藏当前或最后一个活动的窗口，且光标进入代码文件窗口</li>\n<li><code>F3选中文件/文件夹/代码行</code>，添加/取消书签</li>\n<li><code>⌥F3 选中文件/文件夹/代码行</code>，使用助记符添加/取消书签</li>\n<li><code>⌃0…⌃9</code> 定位到对应数值的书签位置</li>\n<li><code>⌘F3</code> 显示所有书签</li>\n<li><code>⌥F1</code> 显示当前文件选择目标弹出层，弹出层中有很多目标可以进行选择(如在代码编辑窗口可以选择显示该文件的Finder)</li>\n<li><code>⌘F12</code> 弹出当前文件结构层，可以在弹出的层上直接输入进行筛选（可用于搜索类中的方法）</li>\n</ul>\n<h2 id=\"通用\"><a href=\"#通用\" class=\"headerlink\" title=\"通用\"></a>通用</h2><ul>\n<li><code>⌃⌘F</code> 切换全屏模式</li>\n</ul>\n<h2 id=\"自动代码\"><a href=\"#自动代码\" class=\"headerlink\" title=\"自动代码\"></a>自动代码</h2><p> ⚠注：<code>⌘</code>+<code>J</code>可以调出所有提供的代码补全<code>↩</code>即可，下面仅列举常用的几个<br> 原文地址：<a href=\"https://linmi.cc/836\">https://linmi.cc/836</a></p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"Mac键盘符号和修饰键说明\"><a href=\"#Mac键盘符号和修饰键说明\" class=\"headerlink\" title=\"Mac键盘符号和修饰键说明\"></a>Mac键盘符号和修饰键说明</h2><ul>\n<li><code>⌘</code> Command</li>\n<li><code>⇧</code> Shift</li>\n<li><code>⌥</code> Option</li>\n<li><code>⌃</code> Control</li>\n<li><code>↩︎</code> Return/Enter</li>\n<li><code>⌫</code> Delete</li>\n<li><code>⌦</code> 向前删除键（Fn+Delete）</li>\n<li><code>↑</code> 上箭头</li>\n<li><code>↓</code> 下箭头</li>\n<li><code>←</code> 左箭头</li>\n<li><code>→</code> 右箭头</li>\n<li><code>⇞</code> Page Up（Fn+↑）</li>\n<li><code>⇟</code> Page Down（Fn+↓）</li>\n<li><code>Home</code> Fn + ←</li>\n<li><code>End</code> Fn + →</li>\n<li><code>⇥</code> 右制表符（Tab键）</li>\n<li><code>⇤</code> 左制表符（Shift+Tab）</li>\n<li><code>⎋</code> Escape (Esc)</li>\n</ul>\n<h2 id=\"Editing（编辑）\"><a href=\"#Editing（编辑）\" class=\"headerlink\" title=\"Editing（编辑）\"></a>Editing（编辑）</h2><ul>\n<li><code>⌃Space</code> 基本的代码补全（补全任何类、方法、变量）</li>\n<li><code>⌃⇧Space</code> 智能代码补全（过滤器方法列表和变量的预期类型）</li>\n<li><code>⌘⇧↩</code> 自动结束代码，行末自动添加分号</li>\n<li><code>⌘P</code> 显示方法的参数信息</li>\n<li><code>⌃J, Mid. button click</code> 快速查看文档</li>\n<li><code>⇧F1</code> 查看外部文档（在某些代码上会触发打开浏览器显示相关文档）</li>\n<li><code>⌘+鼠标放在代码上</code> 显示代码简要信息</li>\n<li><code>⌘F1</code> 在错误或警告处显示具体描述信息</li>\n<li><code>⌘N, ⌃↩, ⌃N</code> 生成代码（getter、setter、构造函数、hashCode/equals,toString）</li>\n<li><code>⌃O</code> 覆盖方法（重写父类方法）</li>\n<li><code>⌃I</code> 实现方法（实现接口中的方法）</li>\n<li><code>⌘⌥T</code> 包围代码（使用if..else, try..catch, for, synchronized等包围选中的代码）</li>\n<li><code>⌘/</code> 注释/取消注释与行注释</li>\n<li><code>⌘⌥/</code> 注释/取消注释与块注释</li>\n<li><code>⌥↑</code> 连续选中代码块</li>\n<li><code>⌥↓</code> 减少当前选中的代码块</li>\n<li><code>⌃⇧Q</code> 显示上下文信息</li>\n<li><code>⌥↩</code> 显示意向动作和快速修复代码</li>\n<li><code>⌘⌥L</code> 格式化代码</li>\n<li><code>⌃⌥O</code> 优化import</li>\n<li><code>⌃⌥I</code> 自动缩进线</li>\n<li><code>⇥ / ⇧⇥</code> 缩进代码 / 反缩进代码</li>\n<li><code>⌘X</code> 剪切当前行或选定的块到剪贴板</li>\n<li><code>⌘C</code> 复制当前行或选定的块到剪贴板</li>\n<li><code>⌘V</code> 从剪贴板粘贴</li>\n<li><code>⌘⇧V</code> 从最近的缓冲区粘贴</li>\n<li><code>⌘D</code> 复制当前行或选定的块</li>\n<li><code>⌘⌫</code> 删除当前行或选定的块的行</li>\n<li><code>⌃⇧J</code> 智能的将代码拼接成一行</li>\n<li><code>⌘↩</code> 智能的拆分拼接的行</li>\n<li><code>⇧↩</code> 开始新的一行</li>\n<li><code>⌘⇧U</code> 大小写切换</li>\n<li><code>⌘⇧] / ⌘⇧[</code> 选择直到代码块结束/开始</li>\n<li><code>⌥⌦</code> 删除到单词的末尾（⌦键为Fn+Delete）</li>\n<li><code>⌥⌫</code> 删除到单词的开头</li>\n<li><code>⌘+ / ⌘-</code> 展开 / 折叠代码块</li>\n<li><code>⌘⇧+</code> 展开所以代码块</li>\n<li><code>⌘⇧-</code> 折叠所有代码块</li>\n<li><code>⌘W</code> 关闭活动的编辑器选项卡</li>\n</ul>\n<h2 id=\"Search-Replace（查询-替换）\"><a href=\"#Search-Replace（查询-替换）\" class=\"headerlink\" title=\"Search/Replace（查询/替换）\"></a>Search/Replace（查询/替换）</h2><ul>\n<li><code>Double ⇧</code> 查询任何东西</li>\n<li><code>⌘F</code> 文件内查找</li>\n<li><code>⌘G</code> 查找模式下，向下查找</li>\n<li><code>⌘⇧G</code> 查找模式下，向上查找</li>\n<li><code>⌘R</code> 文件内替换</li>\n<li><code>⌘⇧F</code> 全局查找（根据路径）</li>\n<li><code>⌘⇧R</code> 全局替换（根据路径）</li>\n<li><code>⌘⇧S</code> 查询结构（Ultimate Edition 版专用，需要在Keymap中设置）</li>\n<li><code>⌘⇧M</code> 替换结构（Ultimate Edition 版专用，需要在Keymap中设置）</li>\n</ul>\n<h2 id=\"Usage-Search（使用查询）\"><a href=\"#Usage-Search（使用查询）\" class=\"headerlink\" title=\"Usage Search（使用查询）\"></a>Usage Search（使用查询）</h2><ul>\n<li><code>⌥F7 / ⌘F7</code> 在文件中查找用法 / 在类中查找用法</li>\n<li><code>⌘⇧F7</code> 在文件中突出显示的用法</li>\n<li><code>⌘⌥F7</code> 显示用法<br>Compile and Run（编译和运行）</li>\n<li><code>⌘F9</code> 编译Project</li>\n<li><code>⌘⇧F9</code> 编译选择的文件、包或模块</li>\n<li><code>⌃⌥R</code> 弹出 Run 的可选择菜单</li>\n<li><code>⌃⌥D</code> 弹出 Debug 的可选择菜单</li>\n<li><code>⌃R</code> 运行</li>\n<li><code>⌃D</code> 调试</li>\n<li><code>⌃⇧R, ⌃⇧D</code> 从编辑器运行上下文环境配置<br>Debugging（调试）</li>\n<li><code>F8</code> 进入下一步，如果当前行断点是一个方法，则不进入当前方法体内</li>\n<li><code>F7</code> 进入下一步，如果当前行断点是一个方法，则进入当前方法体内，如果该方法体还有方法，则不会进入该内嵌的方法中</li>\n<li><code>⇧F7</code> 智能步入，断点所在行上有多个方法调用，会弹出进入哪个方法</li>\n<li><code>⇧F8</code> 跳出</li>\n<li><code>⌥F9</code> 运行到光标处，如果光标前有其他断点会进入到该断点</li>\n<li><code>⌥F8</code> 计算表达式（可以更改变量值使其生效）</li>\n<li><code>⌘⌥R</code> 恢复程序运行，如果该断点下面代码还有断点则停在下一个断点上</li>\n<li><code>⌘F8</code> 切换断点（若光标当前行有断点则取消断点，没有则加上断点）</li>\n<li><code>⌘⇧F8</code> 查看断点信息<br>Navigation（导航）</li>\n<li><code>⌘O</code> 查找类文件</li>\n<li><code>⌘⇧O</code> 查找所有类型文件、打开文件、打开目录，打开目录需要在输入的内容前面或后面加一个反斜杠<code>/</code></li>\n<li><code>⌘⌥O</code> 前往指定的变量 / 方法</li>\n<li><code>⌃← / ⌃→</code> 左右切换打开的编辑tab页</li>\n<li><code>F12</code> 返回到前一个工具窗口</li>\n<li><code>⎋</code> 从工具窗口进入代码文件窗口</li>\n<li><code>⇧⎋</code> 隐藏当前或最后一个活动的窗口，且光标进入代码文件窗口</li>\n<li><code>⌘⇧F4</code> 关闭活动run/messages/find/… tab</li>\n<li><code>⌘L</code> 在当前文件跳转到某一行的指定处</li>\n<li><code>⌘E</code> 显示最近打开的文件记录列表</li>\n<li><code>⌘⌥← / ⌘⌥→</code> 退回 / 前进到上一个操作的地方</li>\n<li><code>⌘⇧⌫</code> 跳转到最后一个编辑的地方</li>\n<li><code>⌥F1</code> 显示当前文件选择目标弹出层，弹出层中有很多目标可以进行选择(如在代码编辑窗口可以选择显示该文件的Finder)</li>\n<li><code>⌘B / ⌘ 鼠标点击</code> 进入光标所在的方法/变量的接口或是定义处</li>\n<li><code>⌘⌥B</code> 跳转到实现处，在某个调用的方法名上使用会跳到具体的实现处，可以跳过接口</li>\n<li><code>⌥ Space, ⌘Y</code> 快速打开光标所在方法、类的定义</li>\n<li><code>⌃⇧B</code> 跳转到类型声明处</li>\n<li><code>⌘U</code> 前往当前光标所在方法的父类的方法 / 接口定义</li>\n<li><code>⌃↓ / ⌃↑</code> 当前光标跳转到当前文件的前一个/后一个方法名位置</li>\n<li><code>⌘] / ⌘[</code> 移动光标到当前所在代码的花括号开始/结束位置</li>\n<li><code>⌘F12</code> 弹出当前文件结构层，可以在弹出的层上直接输入进行筛选（可用于搜索类中的方法）</li>\n<li><code>⌃H</code> 显示当前类的层次结构</li>\n<li><code>⌘⇧H</code> 显示方法层次结构</li>\n<li><code>⌃⌥H</code> 显示调用层次结构</li>\n<li><code>F2 / ⇧F2</code> 跳转到下一个/上一个突出错误或警告的位置</li>\n<li><code>F4 / ⌘↓</code> 编辑/查看代码源</li>\n<li><code>⌥ Home</code> 显示到当前文件的导航条</li>\n<li><code>F3</code>选中文件/文件夹/代码行，添加/取消书签</li>\n<li><code>⌥F3</code> 选中文件/文件夹/代码行，使用助记符添加/取消书签</li>\n<li><code>⌃0...⌃9</code> 定位到对应数值的书签位置</li>\n<li><code>⌘F3</code> 显示所有书签</li>\n</ul>\n<h2 id=\"Refactoring（重构）\"><a href=\"#Refactoring（重构）\" class=\"headerlink\" title=\"Refactoring（重构）\"></a>Refactoring（重构）</h2><ul>\n<li><code>F5</code> 复制文件到指定目录</li>\n<li><code>F6</code> 移动文件到指定目录</li>\n<li><code>⌘⌫</code> 在文件上为安全删除文件，弹出确认框</li>\n<li><code>⇧F6</code> 重命名文件</li>\n<li><code>⌘F6</code> 更改签名</li>\n<li><code>⌘⌥N</code> 一致性</li>\n<li><code>⌘⌥M</code> 将选中的代码提取为方法</li>\n<li><code>⌘⌥V</code> 提取变量</li>\n<li><code>⌘⌥F</code> 提取字段</li>\n<li><code>⌘⌥C</code> 提取常量</li>\n<li><code>⌘⌥P</code> 提取参数</li>\n</ul>\n<h2 id=\"VCS-Local-History（版本控制-本地历史记录）\"><a href=\"#VCS-Local-History（版本控制-本地历史记录）\" class=\"headerlink\" title=\"VCS/Local History（版本控制/本地历史记录）\"></a>VCS/Local History（版本控制/本地历史记录）</h2><ul>\n<li><code>⌘K</code> 提交代码到版本控制器</li>\n<li><code>⌘T</code> 从版本控制器更新代码</li>\n<li><code>⌥⇧C</code> 查看最近的变更记录</li>\n<li><code>⌃C</code> 快速弹出版本控制器操作面板</li>\n</ul>\n<h2 id=\"Live-Templates（动态代码模板）\"><a href=\"#Live-Templates（动态代码模板）\" class=\"headerlink\" title=\"Live Templates（动态代码模板）\"></a>Live Templates（动态代码模板）</h2><ul>\n<li><code>⌘⌥J</code> 弹出模板选择窗口，将选定的代码使用动态模板包住</li>\n<li><code>⌘J</code> 插入自定义动态代码模板</li>\n</ul>\n<h2 id=\"General（通用）\"><a href=\"#General（通用）\" class=\"headerlink\" title=\"General（通用）\"></a>General（通用）</h2><ul>\n<li><code>⌘1...⌘9</code> 打开相应编号的工具窗口</li>\n<li><code>⌘S</code> 保存所有</li>\n<li><code>⌘⌥Y</code> 同步、刷新</li>\n<li><code>⌃⌘F</code> 切换全屏模式</li>\n<li><code>⌘⇧F12</code> 切换最大化编辑器</li>\n<li><code>⌥⇧F</code> 添加到收藏夹</li>\n<li><code>⌥⇧I</code> 检查当前文件与当前的配置文件</li>\n<li>`§⌃, ⌃“ 快速切换当前的scheme（切换主题、代码样式等）</li>\n<li><code>⌘,</code> 打开IDEA系统设置</li>\n<li><code>⌘;</code> 打开项目结构对话框</li>\n<li><code>⇧⌘A</code> 查找动作（可设置相关选项）</li>\n<li><code>⌃⇥</code> 编辑窗口标签和工具窗口之间切换（如果在切换的过程加按上delete，则是关闭对应选中的窗口）</li>\n</ul>\n<h2 id=\"Other（一些官方文档上没有体现的快捷键）\"><a href=\"#Other（一些官方文档上没有体现的快捷键）\" class=\"headerlink\" title=\"Other（一些官方文档上没有体现的快捷键）\"></a>Other（一些官方文档上没有体现的快捷键）</h2><ul>\n<li><code>⌘⇧8</code> 竖编辑模式</li>\n</ul>\n<h2 id=\"导航\"><a href=\"#导航\" class=\"headerlink\" title=\"导航\"></a>导航</h2><ul>\n<li><code>⌘O</code> 查找类文件 <code>Ctrl + N</code></li>\n<li><code>⌘⌥O</code> 前往指定的变量 / 方法 <code>Ctrl + Shift + Alt + N</code></li>\n<li><code>⌃←</code> / <code>⌃→</code> 左右切换打开的编辑tab页<code>Alt←</code>/<code>Alt→</code></li>\n<li><code>⎋</code> 从工具窗口进入代码文件窗口 <code>ESC</code></li>\n<li><code>⌘L</code> 在当前文件跳转到某一行的指定处 <code>Ctrl + G</code></li>\n<li><code>⌘E</code> 显示最近打开的文件记录列表 <code>Ctrl + E</code></li>\n<li><code>⌘⌥←</code>/ <code>⌘⌥→</code>退回 / 前进到上一个操作的地方 <code>Ctrl + Alt + ←</code>/<code>Ctrl + Alt + →</code></li>\n<li><code>⌘⇧⌫</code> 跳转到最后一个编辑的地方</li>\n<li><code>⌃H</code> 显示当前类的层次结构<code>Ctrl + H</code></li>\n<li><code>⌘⇧H</code> 显示方法层次结构</li>\n<li><code>⌃⌥H</code> 显示调用层次结构</li>\n<li><code>F4</code> /<code>⌘↓</code> 编辑/查看代码源</li>\n<li><code>⌘⌥U</code> 显示类UML图</li>\n<li><code>⌃J</code> 查看注释</li>\n</ul>\n<h2 id=\"编辑\"><a href=\"#编辑\" class=\"headerlink\" title=\"编辑\"></a>编辑</h2><ul>\n<li><code>⌥⌦</code> 删除到单词的末尾（<code>⌦</code>键为<code>Fn+Delete</code>）</li>\n<li><code>⌥⌫</code> 删除到单词的开头</li>\n<li><code>⌘+</code> /<code>⌘-</code> 展开 / 折叠代码块</li>\n<li><code>⌘F1</code> 在错误或警告处显示具体描述信息</li>\n<li><code>⌘⌥L</code> 格式化代码</li>\n<li><code>⌃⌥O</code> 优化import</li>\n<li><code>⇧↩</code> 开始新的一行</li>\n<li><code>⌘⇧↩</code> 自动结束代码，行末自动添加分号</li>\n<li><code>⌃I</code> 实现方法（实现接口中的方法）</li>\n<li><code>⇧F6</code> 重命名文件或者变量</li>\n<li><code>⌘N</code>,<code>⌃↩</code>,<code>⌃N</code> 生成代码（getter、setter、构造函数、hashCode/equals,toString）</li>\n<li><code>⌘P</code> 显示方法的参数信息</li>\n</ul>\n<h2 id=\"查找\"><a href=\"#查找\" class=\"headerlink\" title=\"查找\"></a>查找</h2><ul>\n<li><code>Double⇧</code> 查找任何东西</li>\n<li><code>⌘⇧F</code> 全局查找（根据路径）</li>\n<li><code>⌘F</code> 文件内查找</li>\n<li><code>⌘G</code> 查找模式下，向下查找</li>\n<li><code>⌘⇧G</code> 查找模式下，向上查找</li>\n</ul>\n<h2 id=\"导航-1\"><a href=\"#导航-1\" class=\"headerlink\" title=\"导航\"></a>导航</h2><ul>\n<li><code>⌘⌥B</code> 跳转到接口的实现</li>\n<li><code>⌘U</code> 查看接口定义</li>\n<li><code>⌘⌥←</code> /<code>⌘⌥→</code> 退回 / 前进到上一个操作的地方</li>\n<li><code>⌘B</code> /<code>⌘ 鼠标点击</code> 进入光标所在的方法/变量的接口或是定义处</li>\n<li><code>⌃⇧B</code> 跳转到类型声明处</li>\n<li><code>⌥ Space</code>,<code>⌘Y</code> 快速打开光标所在方法、类的定义</li>\n<li><code>⌘O</code> 查找类文件</li>\n<li><code>⌘⇧O</code> 查找所有类型文件、打开文件、打开目录，打开目录需要在输入的内容前面或后面加一个反斜杠/</li>\n<li><code>F12</code> 返回到前一个工具窗口</li>\n<li><code>⎋</code> 从工具窗口进入代码文件窗口</li>\n<li><code>⇧⎋</code> 隐藏当前或最后一个活动的窗口，且光标进入代码文件窗口</li>\n<li><code>F3选中文件/文件夹/代码行</code>，添加/取消书签</li>\n<li><code>⌥F3 选中文件/文件夹/代码行</code>，使用助记符添加/取消书签</li>\n<li><code>⌃0…⌃9</code> 定位到对应数值的书签位置</li>\n<li><code>⌘F3</code> 显示所有书签</li>\n<li><code>⌥F1</code> 显示当前文件选择目标弹出层，弹出层中有很多目标可以进行选择(如在代码编辑窗口可以选择显示该文件的Finder)</li>\n<li><code>⌘F12</code> 弹出当前文件结构层，可以在弹出的层上直接输入进行筛选（可用于搜索类中的方法）</li>\n</ul>\n<h2 id=\"通用\"><a href=\"#通用\" class=\"headerlink\" title=\"通用\"></a>通用</h2><ul>\n<li><code>⌃⌘F</code> 切换全屏模式</li>\n</ul>\n<h2 id=\"自动代码\"><a href=\"#自动代码\" class=\"headerlink\" title=\"自动代码\"></a>自动代码</h2><p> ⚠注：<code>⌘</code>+<code>J</code>可以调出所有提供的代码补全<code>↩</code>即可，下面仅列举常用的几个<br> 原文地址：<a href=\"https://linmi.cc/836\">https://linmi.cc/836</a></p>\n"},{"title":"Python 生成随机数、随机字符串","author":"Will Holmes","date":"2021-10-17T14:58:03.000Z","_content":"> Python 生成随机数、随机字符串\n\n```python \n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\n\nimport random\nimport string\n\n# 随机整数：\nprint random.randint(1,50)\n\n# 随机选取0到100间的偶数：\nprint random.randrange(0, 101, 2)\n\n# 随机浮点数：\nprint random.random()\nprint random.uniform(1, 10)\n\n# 随机字符：\nprint random.choice('abcdefghijklmnopqrstuvwxyz!@#$%^&*()')\n\n# 多个字符中生成指定数量的随机字符：\nprint random.sample('zyxwvutsrqponmlkjihgfedcba',5)\n\n# 从a-zA-Z0-9生成指定数量的随机字符：\nran_str = ''.join(random.sample(string.ascii_letters + string.digits, 8))\nprint ran_str\n\n# 多个字符中选取指定数量的字符组成新字符串：\nprint ''.join(random.sample(['z','y','x','w','v','u','t','s','r','q','p','o','n','m','l','k','j','i','h','g','f','e','d','c','b','a'], 5))\n\n# 随机选取字符串：\nprint random.choice(['剪刀', '石头', '布'])\n\n# 打乱排序\nitems = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]\nprint random.shuffle(items)\n```","source":"_posts/Python-生成随机数、随机字符串.md","raw":"---\ntitle: Python 生成随机数、随机字符串\nauthor: Will Holmes\ncategories: Python\ntags:\n  - Python\n  - 随机数\ndate: 2021-10-17 22:58:03\n---\n> Python 生成随机数、随机字符串\n\n```python \n#!/usr/bin/python\n# -*- coding: UTF-8 -*-\n\nimport random\nimport string\n\n# 随机整数：\nprint random.randint(1,50)\n\n# 随机选取0到100间的偶数：\nprint random.randrange(0, 101, 2)\n\n# 随机浮点数：\nprint random.random()\nprint random.uniform(1, 10)\n\n# 随机字符：\nprint random.choice('abcdefghijklmnopqrstuvwxyz!@#$%^&*()')\n\n# 多个字符中生成指定数量的随机字符：\nprint random.sample('zyxwvutsrqponmlkjihgfedcba',5)\n\n# 从a-zA-Z0-9生成指定数量的随机字符：\nran_str = ''.join(random.sample(string.ascii_letters + string.digits, 8))\nprint ran_str\n\n# 多个字符中选取指定数量的字符组成新字符串：\nprint ''.join(random.sample(['z','y','x','w','v','u','t','s','r','q','p','o','n','m','l','k','j','i','h','g','f','e','d','c','b','a'], 5))\n\n# 随机选取字符串：\nprint random.choice(['剪刀', '石头', '布'])\n\n# 打乱排序\nitems = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]\nprint random.shuffle(items)\n```","slug":"Python-生成随机数、随机字符串","published":1,"updated":"2021-10-17T14:59:11.098Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckw4ars5e000ztyox6xwk3w5i","content":"<blockquote>\n<p>Python 生成随机数、随机字符串</p>\n</blockquote>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\">#!/usr/bin/python</span>\n<span class=\"token comment\"># -*- coding: UTF-8 -*-</span>\n\n<span class=\"token keyword\">import</span> random\n<span class=\"token keyword\">import</span> string\n\n<span class=\"token comment\"># 随机整数：</span>\n<span class=\"token keyword\">print</span> random<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 随机选取0到100间的偶数：</span>\n<span class=\"token keyword\">print</span> random<span class=\"token punctuation\">.</span>randrange<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">101</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 随机浮点数：</span>\n<span class=\"token keyword\">print</span> random<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span> random<span class=\"token punctuation\">.</span>uniform<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 随机字符：</span>\n<span class=\"token keyword\">print</span> random<span class=\"token punctuation\">.</span>choice<span class=\"token punctuation\">(</span><span class=\"token string\">'abcdefghijklmnopqrstuvwxyz!@#$%^&amp;*()'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 多个字符中生成指定数量的随机字符：</span>\n<span class=\"token keyword\">print</span> random<span class=\"token punctuation\">.</span>sample<span class=\"token punctuation\">(</span><span class=\"token string\">'zyxwvutsrqponmlkjihgfedcba'</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 从a-zA-Z0-9生成指定数量的随机字符：</span>\nran_str <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>random<span class=\"token punctuation\">.</span>sample<span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">.</span>ascii_letters <span class=\"token operator\">+</span> string<span class=\"token punctuation\">.</span>digits<span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span> ran_str\n\n<span class=\"token comment\"># 多个字符中选取指定数量的字符组成新字符串：</span>\n<span class=\"token keyword\">print</span> <span class=\"token string\">''</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>random<span class=\"token punctuation\">.</span>sample<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'z'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'y'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'x'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'w'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'v'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'u'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'t'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'s'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'r'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'q'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'p'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'o'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'n'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'m'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'l'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'k'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'j'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'i'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'h'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'g'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'f'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'e'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'d'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 随机选取字符串：</span>\n<span class=\"token keyword\">print</span> random<span class=\"token punctuation\">.</span>choice<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'剪刀'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'石头'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'布'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 打乱排序</span>\nitems <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span> random<span class=\"token punctuation\">.</span>shuffle<span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<blockquote>\n<p>Python 生成随机数、随机字符串</p>\n</blockquote>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\">#!/usr/bin/python</span>\n<span class=\"token comment\"># -*- coding: UTF-8 -*-</span>\n\n<span class=\"token keyword\">import</span> random\n<span class=\"token keyword\">import</span> string\n\n<span class=\"token comment\"># 随机整数：</span>\n<span class=\"token keyword\">print</span> random<span class=\"token punctuation\">.</span>randint<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 随机选取0到100间的偶数：</span>\n<span class=\"token keyword\">print</span> random<span class=\"token punctuation\">.</span>randrange<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">101</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 随机浮点数：</span>\n<span class=\"token keyword\">print</span> random<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span> random<span class=\"token punctuation\">.</span>uniform<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 随机字符：</span>\n<span class=\"token keyword\">print</span> random<span class=\"token punctuation\">.</span>choice<span class=\"token punctuation\">(</span><span class=\"token string\">'abcdefghijklmnopqrstuvwxyz!@#$%^&amp;*()'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 多个字符中生成指定数量的随机字符：</span>\n<span class=\"token keyword\">print</span> random<span class=\"token punctuation\">.</span>sample<span class=\"token punctuation\">(</span><span class=\"token string\">'zyxwvutsrqponmlkjihgfedcba'</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 从a-zA-Z0-9生成指定数量的随机字符：</span>\nran_str <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>random<span class=\"token punctuation\">.</span>sample<span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">.</span>ascii_letters <span class=\"token operator\">+</span> string<span class=\"token punctuation\">.</span>digits<span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span> ran_str\n\n<span class=\"token comment\"># 多个字符中选取指定数量的字符组成新字符串：</span>\n<span class=\"token keyword\">print</span> <span class=\"token string\">''</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>random<span class=\"token punctuation\">.</span>sample<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'z'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'y'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'x'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'w'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'v'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'u'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'t'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'s'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'r'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'q'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'p'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'o'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'n'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'m'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'l'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'k'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'j'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'i'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'h'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'g'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'f'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'e'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'d'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 随机选取字符串：</span>\n<span class=\"token keyword\">print</span> random<span class=\"token punctuation\">.</span>choice<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'剪刀'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'石头'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'布'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 打乱排序</span>\nitems <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span> random<span class=\"token punctuation\">.</span>shuffle<span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>"},{"title":"Python 正则表达式笔记","author":"Will Holmes","date":"2021-10-10T12:50:38.000Z","_content":"\n\n# Python正则表达式\n正则表达式是一个特殊的字符序列，它能帮助你方便的检查一个字符串是否与某种模式匹配。\n\n\n## re.match函数\n> re.match只从待匹配的字符串或文本的开头位置开始匹配，即如果匹配的字符串不在开头，而是在中间或结尾，则无法匹配就返回None！ \n\n### 语法：\n```python \nre.match(pattern, string, flags=0)\n```\n\n\n### 参数：\n\n- pattern : 匹配的正则表达式                     \n- string  : 要匹配的字符串。                     \n- flags   : 标志位，用于控制正则表达式的匹配方式 \n\n### 结果：\n> match方法在没有匹配的任何内容就返回None，如果有匹配的内容就返回一个Match对象\n\n### 示例\n```python \nimport re\n\nstr = \"aabbcceAAAe11442299aabCCbeedsffg\"\nprint(re.match(\"aa\", str).group())\n# 输出结果： aa\nprint(re.match(\"AA\", str))\n# 输出结果： None\n```\n\n## re.search函数\n>re.search 扫描整个字符串并返回第一个成功的匹配。\n\n### 语法：\n```python \nre.search(pattern, string, flags=0)\n```\n### 参数：\n- pattern : 匹配的正则表达式                     \n- string  : 要匹配的字符串。                     \n- flags   : 标志位，用于控制正则表达式的匹配方式 \n  \n### 结果：\n> search方法在没有匹配的任何内容就返回None，如果有匹配的内容就返回一个Match对象\n\n### 示例\n```python \nimport re\n\nstr = \"aabbcceAAAe11442299aabCCbeedsffg\"\nprint(re.search(\"aa\", str).group())\n# 输出结果： aa\nprint(re.search(\"AA\", str).group())\n# 输出结果： AA\n```\n\n## re.match与re.search的区别\n> re.match只匹配字符串的开始，如果字符串开始不符合正则表达式，则匹配失败，函数返回None；而re.search匹配整个字符串，直到找到一个匹配。\n\n\n## 检索和替换\nPython 的 re 模块提供了re.sub用于替换字符串中的匹配项。\n### 语法：\n```python\nre.sub(pattern, repl, string, count=0, flags=0)\n```\n### 参数：\n\n- pattern : 正则中的模式字符串。\n- repl : 替换的字符串，也可为一个函数。\n- string : 要被查找替换的原始字符串。\n- count : 模式匹配后替换的最大次数，默认 0 表示替换所有的匹配。\n\n### 返回结果\n> 替换后的字符串\n\n### 示例\n```python \nimport re\n\nstr = \"aabbcceAAAe11442299aabCCbeedsffg\"\n# 将小写的bb替换为大写的BB\nres=re.sub(\"bb\",'BB',str)\n# 输出结果为替换后的字符串\nprint(res)\n# 输出结果为：aaBBcceAAAe11442299aabCCbeedsffg\n```\n\n## re.compile 函数\n> compile 函数用于编译正则表达式，生成一个正则表达式（ Pattern ）对象，供 match() 和 search() 这两个函数使用。\n### 语法：\n```python \n  re.compile(pattern[, flags])\n```\n\n### 参数：\n- pattern : 一个字符串形式的正则表达式\n- flags : 可选，表示匹配模式，比如忽略大小写，多行模式等，具体参见Flags标识位\n\n## pattern.findall 函数\n> 在字符串中找到正则表达式所匹配的所有子串，并返回一个列表，如果没有找到匹配的，则返回空列表。\n>注意： match 和 search 是匹配一次 findall 匹配所有。\n\n### 语法：\n```python \nfindall(string[, pos[, endpos]])\n```\n\n### 参数：\n- string : 待匹配的字符串。\n- pos : 可选参数，指定字符串的起始位置，默认为 0。\n- endpos : 可选参数，指定字符串的结束位置，默认为字符串的长度。\n\n### 返回结果\n> 返回一个列表，如果没有匹配到则返回一个空列表\n\n### 示例\n```python \n# -*- coding:UTF8 -*-\n \nimport re\n \npattern = re.compile(r'\\d+')   # 查找数字\nresult1 = pattern.findall('runoob 123 google 456')\nresult2 = pattern.findall('run88oob123google456', 0, 10)\n \nprint(result1)\nprint(result2)\n# 输出结果：\n# ['123', '456']\n# ['88', '12']\n```\n## re.finditer 函数\n> 和 findall 类似，在字符串中找到正则表达式所匹配的所有子串，并把它们作为一个迭代器返回。\n\n### 语法\n```python \nre.finditer(pattern, string, flags=0)\n```\n### 参数\n\n- pattern : 匹配的正则表达式                     \n- string  : 要匹配的字符串。                     \n- flags   : 标志位，用于控制正则表达式的匹配方式 \n\n### 返回结果\n> finditer函数如果匹配到内容则返回一个迭代器，如果没有匹配到则返回None\n\n### 示例\n```python \n# -*- coding: UTF-8 -*-\n \nimport re\n \nit = re.finditer(r\"\\d+\",\"12a32bc43jf3\") \nfor match in it: \n    print (match.group() )\n# 输出结果：\n# 12 \n# 32 \n# 43 \n# 3\n```\n\n## re.split函数\n> split 方法按照能够匹配的子串将字符串分割后返回列表，它的使用形式如下：\n\n### 语法\n```python \nre.split(pattern, string[, maxsplit=0, flags=0])\n```\n\n### 参数\n- pattern：匹配的正则表达式\n- string：要匹配的字符串。\n- maxsplit：分隔次数，maxsplit=1 分隔一次，默认为 0，不限制次数。\n\n### 返回结果\n> 返回一个列表\n\n### 示例\n```python \nimport re\n\nstr = \"aa-bb-cceAAAe11442299aabCCbeedsffg\"\nres=re.split('-',str)\nprint(res)\n# 运行结果\n# ['aa', 'bb', 'cceAAAe11442299aabCCbeedsffg']\n```\n\n## Flags标志位\n\n- re.I:使匹配对大小写不敏感                                          \n- re.L:做本地化识别（locale-aware）匹配                               \n- re.M:多行匹配，影响 ^ 和 $                                          \n- re.S:使 . 匹配包括换行在内的所有字符                                \n- re.U:根据Unicode字符集解析字符。这个标志影响 \\w, \\W, \\b, \\B.        \n- re.X:该标志通过给予你更灵活的格式以便你将正则表达式写得更易于理解。 \n\n\n## Match对象\n> Match对象是一个匹配对象，正则表达式匹配到的内容都会存放着这个对象里面，如果没有匹配到任何的内容那就返回None\n\n### Match对象的属性\n\n- .string:待匹配的文本                        \n- .re:匹配时使用的patter对象（正则表达式） \n- .pos:正则表达式搜索文本的开始位置        \n- .endpos:正则表达式搜索文本的结束位置        \n\n### Match对象的方法\n\n- .group():获得匹配后的字符串              \n- .groups():获得正则表达式中的分组列表           \n- .start():匹配字符串在原始字符串的开始位置 \n- .end():匹配字符串在原始字符串的结束位置 \n- .span():返回(.start(), .end())          \n\n\n## 参考链接\n[Python中文文档-re正则表达式运算](https://www.docs4dev.com/docs/zh/python/3.7.2rc1/all/library-re.html)\n[菜鸟教程-Python正则表达式](https://www.runoob.com/python/python-reg-expressions.html#flags)","source":"_posts/Python-正则表达式笔记.md","raw":"---\ntitle: Python 正则表达式笔记\nauthor: Will Holmes\ncategories: Python\ntags:\n  - Python\n  - 正则表达式\n  - 笔记\ndate: 2021-10-10 20:50:38\n---\n\n\n# Python正则表达式\n正则表达式是一个特殊的字符序列，它能帮助你方便的检查一个字符串是否与某种模式匹配。\n\n\n## re.match函数\n> re.match只从待匹配的字符串或文本的开头位置开始匹配，即如果匹配的字符串不在开头，而是在中间或结尾，则无法匹配就返回None！ \n\n### 语法：\n```python \nre.match(pattern, string, flags=0)\n```\n\n\n### 参数：\n\n- pattern : 匹配的正则表达式                     \n- string  : 要匹配的字符串。                     \n- flags   : 标志位，用于控制正则表达式的匹配方式 \n\n### 结果：\n> match方法在没有匹配的任何内容就返回None，如果有匹配的内容就返回一个Match对象\n\n### 示例\n```python \nimport re\n\nstr = \"aabbcceAAAe11442299aabCCbeedsffg\"\nprint(re.match(\"aa\", str).group())\n# 输出结果： aa\nprint(re.match(\"AA\", str))\n# 输出结果： None\n```\n\n## re.search函数\n>re.search 扫描整个字符串并返回第一个成功的匹配。\n\n### 语法：\n```python \nre.search(pattern, string, flags=0)\n```\n### 参数：\n- pattern : 匹配的正则表达式                     \n- string  : 要匹配的字符串。                     \n- flags   : 标志位，用于控制正则表达式的匹配方式 \n  \n### 结果：\n> search方法在没有匹配的任何内容就返回None，如果有匹配的内容就返回一个Match对象\n\n### 示例\n```python \nimport re\n\nstr = \"aabbcceAAAe11442299aabCCbeedsffg\"\nprint(re.search(\"aa\", str).group())\n# 输出结果： aa\nprint(re.search(\"AA\", str).group())\n# 输出结果： AA\n```\n\n## re.match与re.search的区别\n> re.match只匹配字符串的开始，如果字符串开始不符合正则表达式，则匹配失败，函数返回None；而re.search匹配整个字符串，直到找到一个匹配。\n\n\n## 检索和替换\nPython 的 re 模块提供了re.sub用于替换字符串中的匹配项。\n### 语法：\n```python\nre.sub(pattern, repl, string, count=0, flags=0)\n```\n### 参数：\n\n- pattern : 正则中的模式字符串。\n- repl : 替换的字符串，也可为一个函数。\n- string : 要被查找替换的原始字符串。\n- count : 模式匹配后替换的最大次数，默认 0 表示替换所有的匹配。\n\n### 返回结果\n> 替换后的字符串\n\n### 示例\n```python \nimport re\n\nstr = \"aabbcceAAAe11442299aabCCbeedsffg\"\n# 将小写的bb替换为大写的BB\nres=re.sub(\"bb\",'BB',str)\n# 输出结果为替换后的字符串\nprint(res)\n# 输出结果为：aaBBcceAAAe11442299aabCCbeedsffg\n```\n\n## re.compile 函数\n> compile 函数用于编译正则表达式，生成一个正则表达式（ Pattern ）对象，供 match() 和 search() 这两个函数使用。\n### 语法：\n```python \n  re.compile(pattern[, flags])\n```\n\n### 参数：\n- pattern : 一个字符串形式的正则表达式\n- flags : 可选，表示匹配模式，比如忽略大小写，多行模式等，具体参见Flags标识位\n\n## pattern.findall 函数\n> 在字符串中找到正则表达式所匹配的所有子串，并返回一个列表，如果没有找到匹配的，则返回空列表。\n>注意： match 和 search 是匹配一次 findall 匹配所有。\n\n### 语法：\n```python \nfindall(string[, pos[, endpos]])\n```\n\n### 参数：\n- string : 待匹配的字符串。\n- pos : 可选参数，指定字符串的起始位置，默认为 0。\n- endpos : 可选参数，指定字符串的结束位置，默认为字符串的长度。\n\n### 返回结果\n> 返回一个列表，如果没有匹配到则返回一个空列表\n\n### 示例\n```python \n# -*- coding:UTF8 -*-\n \nimport re\n \npattern = re.compile(r'\\d+')   # 查找数字\nresult1 = pattern.findall('runoob 123 google 456')\nresult2 = pattern.findall('run88oob123google456', 0, 10)\n \nprint(result1)\nprint(result2)\n# 输出结果：\n# ['123', '456']\n# ['88', '12']\n```\n## re.finditer 函数\n> 和 findall 类似，在字符串中找到正则表达式所匹配的所有子串，并把它们作为一个迭代器返回。\n\n### 语法\n```python \nre.finditer(pattern, string, flags=0)\n```\n### 参数\n\n- pattern : 匹配的正则表达式                     \n- string  : 要匹配的字符串。                     \n- flags   : 标志位，用于控制正则表达式的匹配方式 \n\n### 返回结果\n> finditer函数如果匹配到内容则返回一个迭代器，如果没有匹配到则返回None\n\n### 示例\n```python \n# -*- coding: UTF-8 -*-\n \nimport re\n \nit = re.finditer(r\"\\d+\",\"12a32bc43jf3\") \nfor match in it: \n    print (match.group() )\n# 输出结果：\n# 12 \n# 32 \n# 43 \n# 3\n```\n\n## re.split函数\n> split 方法按照能够匹配的子串将字符串分割后返回列表，它的使用形式如下：\n\n### 语法\n```python \nre.split(pattern, string[, maxsplit=0, flags=0])\n```\n\n### 参数\n- pattern：匹配的正则表达式\n- string：要匹配的字符串。\n- maxsplit：分隔次数，maxsplit=1 分隔一次，默认为 0，不限制次数。\n\n### 返回结果\n> 返回一个列表\n\n### 示例\n```python \nimport re\n\nstr = \"aa-bb-cceAAAe11442299aabCCbeedsffg\"\nres=re.split('-',str)\nprint(res)\n# 运行结果\n# ['aa', 'bb', 'cceAAAe11442299aabCCbeedsffg']\n```\n\n## Flags标志位\n\n- re.I:使匹配对大小写不敏感                                          \n- re.L:做本地化识别（locale-aware）匹配                               \n- re.M:多行匹配，影响 ^ 和 $                                          \n- re.S:使 . 匹配包括换行在内的所有字符                                \n- re.U:根据Unicode字符集解析字符。这个标志影响 \\w, \\W, \\b, \\B.        \n- re.X:该标志通过给予你更灵活的格式以便你将正则表达式写得更易于理解。 \n\n\n## Match对象\n> Match对象是一个匹配对象，正则表达式匹配到的内容都会存放着这个对象里面，如果没有匹配到任何的内容那就返回None\n\n### Match对象的属性\n\n- .string:待匹配的文本                        \n- .re:匹配时使用的patter对象（正则表达式） \n- .pos:正则表达式搜索文本的开始位置        \n- .endpos:正则表达式搜索文本的结束位置        \n\n### Match对象的方法\n\n- .group():获得匹配后的字符串              \n- .groups():获得正则表达式中的分组列表           \n- .start():匹配字符串在原始字符串的开始位置 \n- .end():匹配字符串在原始字符串的结束位置 \n- .span():返回(.start(), .end())          \n\n\n## 参考链接\n[Python中文文档-re正则表达式运算](https://www.docs4dev.com/docs/zh/python/3.7.2rc1/all/library-re.html)\n[菜鸟教程-Python正则表达式](https://www.runoob.com/python/python-reg-expressions.html#flags)","slug":"Python-正则表达式笔记","published":1,"updated":"2021-10-10T15:09:21.226Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckw4ars5g0012tyoxelus8eca","content":"<h1 id=\"Python正则表达式\"><a href=\"#Python正则表达式\" class=\"headerlink\" title=\"Python正则表达式\"></a>Python正则表达式</h1><p>正则表达式是一个特殊的字符序列，它能帮助你方便的检查一个字符串是否与某种模式匹配。</p>\n<h2 id=\"re-match函数\"><a href=\"#re-match函数\" class=\"headerlink\" title=\"re.match函数\"></a>re.match函数</h2><blockquote>\n<p>re.match只从待匹配的字符串或文本的开头位置开始匹配，即如果匹配的字符串不在开头，而是在中间或结尾，则无法匹配就返回None！ </p>\n</blockquote>\n<h3 id=\"语法：\"><a href=\"#语法：\" class=\"headerlink\" title=\"语法：\"></a>语法：</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">re<span class=\"token punctuation\">.</span>match<span class=\"token punctuation\">(</span>pattern<span class=\"token punctuation\">,</span> string<span class=\"token punctuation\">,</span> flags<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n<h3 id=\"参数：\"><a href=\"#参数：\" class=\"headerlink\" title=\"参数：\"></a>参数：</h3><ul>\n<li>pattern : 匹配的正则表达式                     </li>\n<li>string  : 要匹配的字符串。                     </li>\n<li>flags   : 标志位，用于控制正则表达式的匹配方式 </li>\n</ul>\n<h3 id=\"结果：\"><a href=\"#结果：\" class=\"headerlink\" title=\"结果：\"></a>结果：</h3><blockquote>\n<p>match方法在没有匹配的任何内容就返回None，如果有匹配的内容就返回一个Match对象</p>\n</blockquote>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> re\n\n<span class=\"token builtin\">str</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"aabbcceAAAe11442299aabCCbeedsffg\"</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">.</span>match<span class=\"token punctuation\">(</span><span class=\"token string\">\"aa\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 输出结果： aa</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">.</span>match<span class=\"token punctuation\">(</span><span class=\"token string\">\"AA\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 输出结果： None</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"re-search函数\"><a href=\"#re-search函数\" class=\"headerlink\" title=\"re.search函数\"></a>re.search函数</h2><blockquote>\n<p>re.search 扫描整个字符串并返回第一个成功的匹配。</p>\n</blockquote>\n<h3 id=\"语法：-1\"><a href=\"#语法：-1\" class=\"headerlink\" title=\"语法：\"></a>语法：</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">re<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span>pattern<span class=\"token punctuation\">,</span> string<span class=\"token punctuation\">,</span> flags<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"参数：-1\"><a href=\"#参数：-1\" class=\"headerlink\" title=\"参数：\"></a>参数：</h3><ul>\n<li>pattern : 匹配的正则表达式                     </li>\n<li>string  : 要匹配的字符串。                     </li>\n<li>flags   : 标志位，用于控制正则表达式的匹配方式 </li>\n</ul>\n<h3 id=\"结果：-1\"><a href=\"#结果：-1\" class=\"headerlink\" title=\"结果：\"></a>结果：</h3><blockquote>\n<p>search方法在没有匹配的任何内容就返回None，如果有匹配的内容就返回一个Match对象</p>\n</blockquote>\n<h3 id=\"示例-1\"><a href=\"#示例-1\" class=\"headerlink\" title=\"示例\"></a>示例</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> re\n\n<span class=\"token builtin\">str</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"aabbcceAAAe11442299aabCCbeedsffg\"</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span><span class=\"token string\">\"aa\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 输出结果： aa</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span><span class=\"token string\">\"AA\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 输出结果： AA</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"re-match与re-search的区别\"><a href=\"#re-match与re-search的区别\" class=\"headerlink\" title=\"re.match与re.search的区别\"></a>re.match与re.search的区别</h2><blockquote>\n<p>re.match只匹配字符串的开始，如果字符串开始不符合正则表达式，则匹配失败，函数返回None；而re.search匹配整个字符串，直到找到一个匹配。</p>\n</blockquote>\n<h2 id=\"检索和替换\"><a href=\"#检索和替换\" class=\"headerlink\" title=\"检索和替换\"></a>检索和替换</h2><p>Python 的 re 模块提供了re.sub用于替换字符串中的匹配项。</p>\n<h3 id=\"语法：-2\"><a href=\"#语法：-2\" class=\"headerlink\" title=\"语法：\"></a>语法：</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">re<span class=\"token punctuation\">.</span>sub<span class=\"token punctuation\">(</span>pattern<span class=\"token punctuation\">,</span> repl<span class=\"token punctuation\">,</span> string<span class=\"token punctuation\">,</span> count<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> flags<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"参数：-2\"><a href=\"#参数：-2\" class=\"headerlink\" title=\"参数：\"></a>参数：</h3><ul>\n<li>pattern : 正则中的模式字符串。</li>\n<li>repl : 替换的字符串，也可为一个函数。</li>\n<li>string : 要被查找替换的原始字符串。</li>\n<li>count : 模式匹配后替换的最大次数，默认 0 表示替换所有的匹配。</li>\n</ul>\n<h3 id=\"返回结果\"><a href=\"#返回结果\" class=\"headerlink\" title=\"返回结果\"></a>返回结果</h3><blockquote>\n<p>替换后的字符串</p>\n</blockquote>\n<h3 id=\"示例-2\"><a href=\"#示例-2\" class=\"headerlink\" title=\"示例\"></a>示例</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> re\n\n<span class=\"token builtin\">str</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"aabbcceAAAe11442299aabCCbeedsffg\"</span>\n<span class=\"token comment\"># 将小写的bb替换为大写的BB</span>\nres<span class=\"token operator\">=</span>re<span class=\"token punctuation\">.</span>sub<span class=\"token punctuation\">(</span><span class=\"token string\">\"bb\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">'BB'</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 输出结果为替换后的字符串</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 输出结果为：aaBBcceAAAe11442299aabCCbeedsffg</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"re-compile-函数\"><a href=\"#re-compile-函数\" class=\"headerlink\" title=\"re.compile 函数\"></a>re.compile 函数</h2><blockquote>\n<p>compile 函数用于编译正则表达式，生成一个正则表达式（ Pattern ）对象，供 match() 和 search() 这两个函数使用。</p>\n</blockquote>\n<h3 id=\"语法：-3\"><a href=\"#语法：-3\" class=\"headerlink\" title=\"语法：\"></a>语法：</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">re<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span>pattern<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> flags<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"参数：-3\"><a href=\"#参数：-3\" class=\"headerlink\" title=\"参数：\"></a>参数：</h3><ul>\n<li>pattern : 一个字符串形式的正则表达式</li>\n<li>flags : 可选，表示匹配模式，比如忽略大小写，多行模式等，具体参见Flags标识位</li>\n</ul>\n<h2 id=\"pattern-findall-函数\"><a href=\"#pattern-findall-函数\" class=\"headerlink\" title=\"pattern.findall 函数\"></a>pattern.findall 函数</h2><blockquote>\n<p>在字符串中找到正则表达式所匹配的所有子串，并返回一个列表，如果没有找到匹配的，则返回空列表。<br>注意： match 和 search 是匹配一次 findall 匹配所有。</p>\n</blockquote>\n<h3 id=\"语法：-4\"><a href=\"#语法：-4\" class=\"headerlink\" title=\"语法：\"></a>语法：</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">findall<span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> pos<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> endpos<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"参数：-4\"><a href=\"#参数：-4\" class=\"headerlink\" title=\"参数：\"></a>参数：</h3><ul>\n<li>string : 待匹配的字符串。</li>\n<li>pos : 可选参数，指定字符串的起始位置，默认为 0。</li>\n<li>endpos : 可选参数，指定字符串的结束位置，默认为字符串的长度。</li>\n</ul>\n<h3 id=\"返回结果-1\"><a href=\"#返回结果-1\" class=\"headerlink\" title=\"返回结果\"></a>返回结果</h3><blockquote>\n<p>返回一个列表，如果没有匹配到则返回一个空列表</p>\n</blockquote>\n<h3 id=\"示例-3\"><a href=\"#示例-3\" class=\"headerlink\" title=\"示例\"></a>示例</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># -*- coding:UTF8 -*-</span>\n \n<span class=\"token keyword\">import</span> re\n \npattern <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string\">r'\\d+'</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\"># 查找数字</span>\nresult1 <span class=\"token operator\">=</span> pattern<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span><span class=\"token string\">'runoob 123 google 456'</span><span class=\"token punctuation\">)</span>\nresult2 <span class=\"token operator\">=</span> pattern<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span><span class=\"token string\">'run88oob123google456'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n \n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result1<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result2<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 输出结果：</span>\n<span class=\"token comment\"># ['123', '456']</span>\n<span class=\"token comment\"># ['88', '12']</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"re-finditer-函数\"><a href=\"#re-finditer-函数\" class=\"headerlink\" title=\"re.finditer 函数\"></a>re.finditer 函数</h2><blockquote>\n<p>和 findall 类似，在字符串中找到正则表达式所匹配的所有子串，并把它们作为一个迭代器返回。</p>\n</blockquote>\n<h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">re<span class=\"token punctuation\">.</span>finditer<span class=\"token punctuation\">(</span>pattern<span class=\"token punctuation\">,</span> string<span class=\"token punctuation\">,</span> flags<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h3><ul>\n<li>pattern : 匹配的正则表达式                     </li>\n<li>string  : 要匹配的字符串。                     </li>\n<li>flags   : 标志位，用于控制正则表达式的匹配方式 </li>\n</ul>\n<h3 id=\"返回结果-2\"><a href=\"#返回结果-2\" class=\"headerlink\" title=\"返回结果\"></a>返回结果</h3><blockquote>\n<p>finditer函数如果匹配到内容则返回一个迭代器，如果没有匹配到则返回None</p>\n</blockquote>\n<h3 id=\"示例-4\"><a href=\"#示例-4\" class=\"headerlink\" title=\"示例\"></a>示例</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># -*- coding: UTF-8 -*-</span>\n \n<span class=\"token keyword\">import</span> re\n \nit <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span>finditer<span class=\"token punctuation\">(</span><span class=\"token string\">r\"\\d+\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"12a32bc43jf3\"</span><span class=\"token punctuation\">)</span> \n<span class=\"token keyword\">for</span> match <span class=\"token keyword\">in</span> it<span class=\"token punctuation\">:</span> \n    <span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span>match<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 输出结果：</span>\n<span class=\"token comment\"># 12 </span>\n<span class=\"token comment\"># 32 </span>\n<span class=\"token comment\"># 43 </span>\n<span class=\"token comment\"># 3</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"re-split函数\"><a href=\"#re-split函数\" class=\"headerlink\" title=\"re.split函数\"></a>re.split函数</h2><blockquote>\n<p>split 方法按照能够匹配的子串将字符串分割后返回列表，它的使用形式如下：</p>\n</blockquote>\n<h3 id=\"语法-1\"><a href=\"#语法-1\" class=\"headerlink\" title=\"语法\"></a>语法</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">re<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span>pattern<span class=\"token punctuation\">,</span> string<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> maxsplit<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> flags<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"参数-1\"><a href=\"#参数-1\" class=\"headerlink\" title=\"参数\"></a>参数</h3><ul>\n<li>pattern：匹配的正则表达式</li>\n<li>string：要匹配的字符串。</li>\n<li>maxsplit：分隔次数，maxsplit=1 分隔一次，默认为 0，不限制次数。</li>\n</ul>\n<h3 id=\"返回结果-3\"><a href=\"#返回结果-3\" class=\"headerlink\" title=\"返回结果\"></a>返回结果</h3><blockquote>\n<p>返回一个列表</p>\n</blockquote>\n<h3 id=\"示例-5\"><a href=\"#示例-5\" class=\"headerlink\" title=\"示例\"></a>示例</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> re\n\n<span class=\"token builtin\">str</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"aa-bb-cceAAAe11442299aabCCbeedsffg\"</span>\nres<span class=\"token operator\">=</span>re<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">'-'</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 运行结果</span>\n<span class=\"token comment\"># ['aa', 'bb', 'cceAAAe11442299aabCCbeedsffg']</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"Flags标志位\"><a href=\"#Flags标志位\" class=\"headerlink\" title=\"Flags标志位\"></a>Flags标志位</h2><ul>\n<li>re.I:使匹配对大小写不敏感                                          </li>\n<li>re.L:做本地化识别（locale-aware）匹配                               </li>\n<li>re.M:多行匹配，影响 ^ 和 $                                          </li>\n<li>re.S:使 . 匹配包括换行在内的所有字符                                </li>\n<li>re.U:根据Unicode字符集解析字符。这个标志影响 \\w, \\W, \\b, \\B.        </li>\n<li>re.X:该标志通过给予你更灵活的格式以便你将正则表达式写得更易于理解。 </li>\n</ul>\n<h2 id=\"Match对象\"><a href=\"#Match对象\" class=\"headerlink\" title=\"Match对象\"></a>Match对象</h2><blockquote>\n<p>Match对象是一个匹配对象，正则表达式匹配到的内容都会存放着这个对象里面，如果没有匹配到任何的内容那就返回None</p>\n</blockquote>\n<h3 id=\"Match对象的属性\"><a href=\"#Match对象的属性\" class=\"headerlink\" title=\"Match对象的属性\"></a>Match对象的属性</h3><ul>\n<li>.string:待匹配的文本                        </li>\n<li>.re:匹配时使用的patter对象（正则表达式） </li>\n<li>.pos:正则表达式搜索文本的开始位置        </li>\n<li>.endpos:正则表达式搜索文本的结束位置        </li>\n</ul>\n<h3 id=\"Match对象的方法\"><a href=\"#Match对象的方法\" class=\"headerlink\" title=\"Match对象的方法\"></a>Match对象的方法</h3><ul>\n<li>.group():获得匹配后的字符串              </li>\n<li>.groups():获得正则表达式中的分组列表           </li>\n<li>.start():匹配字符串在原始字符串的开始位置 </li>\n<li>.end():匹配字符串在原始字符串的结束位置 </li>\n<li>.span():返回(.start(), .end())          </li>\n</ul>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><a href=\"https://www.docs4dev.com/docs/zh/python/3.7.2rc1/all/library-re.html\">Python中文文档-re正则表达式运算</a><br><a href=\"https://www.runoob.com/python/python-reg-expressions.html#flags\">菜鸟教程-Python正则表达式</a></p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"Python正则表达式\"><a href=\"#Python正则表达式\" class=\"headerlink\" title=\"Python正则表达式\"></a>Python正则表达式</h1><p>正则表达式是一个特殊的字符序列，它能帮助你方便的检查一个字符串是否与某种模式匹配。</p>\n<h2 id=\"re-match函数\"><a href=\"#re-match函数\" class=\"headerlink\" title=\"re.match函数\"></a>re.match函数</h2><blockquote>\n<p>re.match只从待匹配的字符串或文本的开头位置开始匹配，即如果匹配的字符串不在开头，而是在中间或结尾，则无法匹配就返回None！ </p>\n</blockquote>\n<h3 id=\"语法：\"><a href=\"#语法：\" class=\"headerlink\" title=\"语法：\"></a>语法：</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">re<span class=\"token punctuation\">.</span>match<span class=\"token punctuation\">(</span>pattern<span class=\"token punctuation\">,</span> string<span class=\"token punctuation\">,</span> flags<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n\n<h3 id=\"参数：\"><a href=\"#参数：\" class=\"headerlink\" title=\"参数：\"></a>参数：</h3><ul>\n<li>pattern : 匹配的正则表达式                     </li>\n<li>string  : 要匹配的字符串。                     </li>\n<li>flags   : 标志位，用于控制正则表达式的匹配方式 </li>\n</ul>\n<h3 id=\"结果：\"><a href=\"#结果：\" class=\"headerlink\" title=\"结果：\"></a>结果：</h3><blockquote>\n<p>match方法在没有匹配的任何内容就返回None，如果有匹配的内容就返回一个Match对象</p>\n</blockquote>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> re\n\n<span class=\"token builtin\">str</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"aabbcceAAAe11442299aabCCbeedsffg\"</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">.</span>match<span class=\"token punctuation\">(</span><span class=\"token string\">\"aa\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 输出结果： aa</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">.</span>match<span class=\"token punctuation\">(</span><span class=\"token string\">\"AA\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 输出结果： None</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"re-search函数\"><a href=\"#re-search函数\" class=\"headerlink\" title=\"re.search函数\"></a>re.search函数</h2><blockquote>\n<p>re.search 扫描整个字符串并返回第一个成功的匹配。</p>\n</blockquote>\n<h3 id=\"语法：-1\"><a href=\"#语法：-1\" class=\"headerlink\" title=\"语法：\"></a>语法：</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">re<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span>pattern<span class=\"token punctuation\">,</span> string<span class=\"token punctuation\">,</span> flags<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"参数：-1\"><a href=\"#参数：-1\" class=\"headerlink\" title=\"参数：\"></a>参数：</h3><ul>\n<li>pattern : 匹配的正则表达式                     </li>\n<li>string  : 要匹配的字符串。                     </li>\n<li>flags   : 标志位，用于控制正则表达式的匹配方式 </li>\n</ul>\n<h3 id=\"结果：-1\"><a href=\"#结果：-1\" class=\"headerlink\" title=\"结果：\"></a>结果：</h3><blockquote>\n<p>search方法在没有匹配的任何内容就返回None，如果有匹配的内容就返回一个Match对象</p>\n</blockquote>\n<h3 id=\"示例-1\"><a href=\"#示例-1\" class=\"headerlink\" title=\"示例\"></a>示例</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> re\n\n<span class=\"token builtin\">str</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"aabbcceAAAe11442299aabCCbeedsffg\"</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span><span class=\"token string\">\"aa\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 输出结果： aa</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>re<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span><span class=\"token string\">\"AA\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 输出结果： AA</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"re-match与re-search的区别\"><a href=\"#re-match与re-search的区别\" class=\"headerlink\" title=\"re.match与re.search的区别\"></a>re.match与re.search的区别</h2><blockquote>\n<p>re.match只匹配字符串的开始，如果字符串开始不符合正则表达式，则匹配失败，函数返回None；而re.search匹配整个字符串，直到找到一个匹配。</p>\n</blockquote>\n<h2 id=\"检索和替换\"><a href=\"#检索和替换\" class=\"headerlink\" title=\"检索和替换\"></a>检索和替换</h2><p>Python 的 re 模块提供了re.sub用于替换字符串中的匹配项。</p>\n<h3 id=\"语法：-2\"><a href=\"#语法：-2\" class=\"headerlink\" title=\"语法：\"></a>语法：</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">re<span class=\"token punctuation\">.</span>sub<span class=\"token punctuation\">(</span>pattern<span class=\"token punctuation\">,</span> repl<span class=\"token punctuation\">,</span> string<span class=\"token punctuation\">,</span> count<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> flags<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"参数：-2\"><a href=\"#参数：-2\" class=\"headerlink\" title=\"参数：\"></a>参数：</h3><ul>\n<li>pattern : 正则中的模式字符串。</li>\n<li>repl : 替换的字符串，也可为一个函数。</li>\n<li>string : 要被查找替换的原始字符串。</li>\n<li>count : 模式匹配后替换的最大次数，默认 0 表示替换所有的匹配。</li>\n</ul>\n<h3 id=\"返回结果\"><a href=\"#返回结果\" class=\"headerlink\" title=\"返回结果\"></a>返回结果</h3><blockquote>\n<p>替换后的字符串</p>\n</blockquote>\n<h3 id=\"示例-2\"><a href=\"#示例-2\" class=\"headerlink\" title=\"示例\"></a>示例</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> re\n\n<span class=\"token builtin\">str</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"aabbcceAAAe11442299aabCCbeedsffg\"</span>\n<span class=\"token comment\"># 将小写的bb替换为大写的BB</span>\nres<span class=\"token operator\">=</span>re<span class=\"token punctuation\">.</span>sub<span class=\"token punctuation\">(</span><span class=\"token string\">\"bb\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">'BB'</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 输出结果为替换后的字符串</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 输出结果为：aaBBcceAAAe11442299aabCCbeedsffg</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"re-compile-函数\"><a href=\"#re-compile-函数\" class=\"headerlink\" title=\"re.compile 函数\"></a>re.compile 函数</h2><blockquote>\n<p>compile 函数用于编译正则表达式，生成一个正则表达式（ Pattern ）对象，供 match() 和 search() 这两个函数使用。</p>\n</blockquote>\n<h3 id=\"语法：-3\"><a href=\"#语法：-3\" class=\"headerlink\" title=\"语法：\"></a>语法：</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">re<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span>pattern<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> flags<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"参数：-3\"><a href=\"#参数：-3\" class=\"headerlink\" title=\"参数：\"></a>参数：</h3><ul>\n<li>pattern : 一个字符串形式的正则表达式</li>\n<li>flags : 可选，表示匹配模式，比如忽略大小写，多行模式等，具体参见Flags标识位</li>\n</ul>\n<h2 id=\"pattern-findall-函数\"><a href=\"#pattern-findall-函数\" class=\"headerlink\" title=\"pattern.findall 函数\"></a>pattern.findall 函数</h2><blockquote>\n<p>在字符串中找到正则表达式所匹配的所有子串，并返回一个列表，如果没有找到匹配的，则返回空列表。<br>注意： match 和 search 是匹配一次 findall 匹配所有。</p>\n</blockquote>\n<h3 id=\"语法：-4\"><a href=\"#语法：-4\" class=\"headerlink\" title=\"语法：\"></a>语法：</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">findall<span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> pos<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> endpos<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"参数：-4\"><a href=\"#参数：-4\" class=\"headerlink\" title=\"参数：\"></a>参数：</h3><ul>\n<li>string : 待匹配的字符串。</li>\n<li>pos : 可选参数，指定字符串的起始位置，默认为 0。</li>\n<li>endpos : 可选参数，指定字符串的结束位置，默认为字符串的长度。</li>\n</ul>\n<h3 id=\"返回结果-1\"><a href=\"#返回结果-1\" class=\"headerlink\" title=\"返回结果\"></a>返回结果</h3><blockquote>\n<p>返回一个列表，如果没有匹配到则返回一个空列表</p>\n</blockquote>\n<h3 id=\"示例-3\"><a href=\"#示例-3\" class=\"headerlink\" title=\"示例\"></a>示例</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># -*- coding:UTF8 -*-</span>\n \n<span class=\"token keyword\">import</span> re\n \npattern <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string\">r'\\d+'</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\"># 查找数字</span>\nresult1 <span class=\"token operator\">=</span> pattern<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span><span class=\"token string\">'runoob 123 google 456'</span><span class=\"token punctuation\">)</span>\nresult2 <span class=\"token operator\">=</span> pattern<span class=\"token punctuation\">.</span>findall<span class=\"token punctuation\">(</span><span class=\"token string\">'run88oob123google456'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span>\n \n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result1<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result2<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 输出结果：</span>\n<span class=\"token comment\"># ['123', '456']</span>\n<span class=\"token comment\"># ['88', '12']</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"re-finditer-函数\"><a href=\"#re-finditer-函数\" class=\"headerlink\" title=\"re.finditer 函数\"></a>re.finditer 函数</h2><blockquote>\n<p>和 findall 类似，在字符串中找到正则表达式所匹配的所有子串，并把它们作为一个迭代器返回。</p>\n</blockquote>\n<h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">re<span class=\"token punctuation\">.</span>finditer<span class=\"token punctuation\">(</span>pattern<span class=\"token punctuation\">,</span> string<span class=\"token punctuation\">,</span> flags<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h3><ul>\n<li>pattern : 匹配的正则表达式                     </li>\n<li>string  : 要匹配的字符串。                     </li>\n<li>flags   : 标志位，用于控制正则表达式的匹配方式 </li>\n</ul>\n<h3 id=\"返回结果-2\"><a href=\"#返回结果-2\" class=\"headerlink\" title=\"返回结果\"></a>返回结果</h3><blockquote>\n<p>finditer函数如果匹配到内容则返回一个迭代器，如果没有匹配到则返回None</p>\n</blockquote>\n<h3 id=\"示例-4\"><a href=\"#示例-4\" class=\"headerlink\" title=\"示例\"></a>示例</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># -*- coding: UTF-8 -*-</span>\n \n<span class=\"token keyword\">import</span> re\n \nit <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span>finditer<span class=\"token punctuation\">(</span><span class=\"token string\">r\"\\d+\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"12a32bc43jf3\"</span><span class=\"token punctuation\">)</span> \n<span class=\"token keyword\">for</span> match <span class=\"token keyword\">in</span> it<span class=\"token punctuation\">:</span> \n    <span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span>match<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 输出结果：</span>\n<span class=\"token comment\"># 12 </span>\n<span class=\"token comment\"># 32 </span>\n<span class=\"token comment\"># 43 </span>\n<span class=\"token comment\"># 3</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"re-split函数\"><a href=\"#re-split函数\" class=\"headerlink\" title=\"re.split函数\"></a>re.split函数</h2><blockquote>\n<p>split 方法按照能够匹配的子串将字符串分割后返回列表，它的使用形式如下：</p>\n</blockquote>\n<h3 id=\"语法-1\"><a href=\"#语法-1\" class=\"headerlink\" title=\"语法\"></a>语法</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">re<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span>pattern<span class=\"token punctuation\">,</span> string<span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span> maxsplit<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> flags<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h3 id=\"参数-1\"><a href=\"#参数-1\" class=\"headerlink\" title=\"参数\"></a>参数</h3><ul>\n<li>pattern：匹配的正则表达式</li>\n<li>string：要匹配的字符串。</li>\n<li>maxsplit：分隔次数，maxsplit=1 分隔一次，默认为 0，不限制次数。</li>\n</ul>\n<h3 id=\"返回结果-3\"><a href=\"#返回结果-3\" class=\"headerlink\" title=\"返回结果\"></a>返回结果</h3><blockquote>\n<p>返回一个列表</p>\n</blockquote>\n<h3 id=\"示例-5\"><a href=\"#示例-5\" class=\"headerlink\" title=\"示例\"></a>示例</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> re\n\n<span class=\"token builtin\">str</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"aa-bb-cceAAAe11442299aabCCbeedsffg\"</span>\nres<span class=\"token operator\">=</span>re<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">'-'</span><span class=\"token punctuation\">,</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 运行结果</span>\n<span class=\"token comment\"># ['aa', 'bb', 'cceAAAe11442299aabCCbeedsffg']</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"Flags标志位\"><a href=\"#Flags标志位\" class=\"headerlink\" title=\"Flags标志位\"></a>Flags标志位</h2><ul>\n<li>re.I:使匹配对大小写不敏感                                          </li>\n<li>re.L:做本地化识别（locale-aware）匹配                               </li>\n<li>re.M:多行匹配，影响 ^ 和 $                                          </li>\n<li>re.S:使 . 匹配包括换行在内的所有字符                                </li>\n<li>re.U:根据Unicode字符集解析字符。这个标志影响 \\w, \\W, \\b, \\B.        </li>\n<li>re.X:该标志通过给予你更灵活的格式以便你将正则表达式写得更易于理解。 </li>\n</ul>\n<h2 id=\"Match对象\"><a href=\"#Match对象\" class=\"headerlink\" title=\"Match对象\"></a>Match对象</h2><blockquote>\n<p>Match对象是一个匹配对象，正则表达式匹配到的内容都会存放着这个对象里面，如果没有匹配到任何的内容那就返回None</p>\n</blockquote>\n<h3 id=\"Match对象的属性\"><a href=\"#Match对象的属性\" class=\"headerlink\" title=\"Match对象的属性\"></a>Match对象的属性</h3><ul>\n<li>.string:待匹配的文本                        </li>\n<li>.re:匹配时使用的patter对象（正则表达式） </li>\n<li>.pos:正则表达式搜索文本的开始位置        </li>\n<li>.endpos:正则表达式搜索文本的结束位置        </li>\n</ul>\n<h3 id=\"Match对象的方法\"><a href=\"#Match对象的方法\" class=\"headerlink\" title=\"Match对象的方法\"></a>Match对象的方法</h3><ul>\n<li>.group():获得匹配后的字符串              </li>\n<li>.groups():获得正则表达式中的分组列表           </li>\n<li>.start():匹配字符串在原始字符串的开始位置 </li>\n<li>.end():匹配字符串在原始字符串的结束位置 </li>\n<li>.span():返回(.start(), .end())          </li>\n</ul>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><a href=\"https://www.docs4dev.com/docs/zh/python/3.7.2rc1/all/library-re.html\">Python中文文档-re正则表达式运算</a><br><a href=\"https://www.runoob.com/python/python-reg-expressions.html#flags\">菜鸟教程-Python正则表达式</a></p>\n"},{"title":"Python3—UnicodeEncodeError 'ascii' codec can't encode characters in position 0-1","author":"Will Holmes","date":"2021-11-15T04:05:01.000Z","_content":"\n### 环境\n```bash\n>>> import sys\n>>> print(sys.version)\n'3.6.0 |Anaconda 4.3.1 (64-bit)| (default, Dec 23 2016, 12:22:00) \\n[GCC 4.4.7 20120313 (Red Hat 4.4.7-1)]'\n```\n### 问题描述\n今天在使用`python3`的时候，报错信息\n```bash\nTraceback (most recent call last):\n  File \"tmp.py\", line 3, in <module>\n    print(a)\nUnicodeEncodeError: 'ascii' codec can't encode characters in position 0-1: ordinal not in range(128)\n```\n报错代码可简化为\n```python\na = b'\\xe5\\x94\\xb1\\xe6\\xad\\x8c'\na = a.decode(\"utf-8\")\nprint(a)\n```\n### 问题分析\n本节介绍问题的分析过程，如果想看解决办法，可以直接看一下节。\n#### 网上解释\n网上给出的解释：错误的使用decode和encode方法会出现这种异常。例如使用decode方法将Unicode字符串转化的时候：\n```python\ns = u'中文'\ns.decode('utf-8')\nprint s\n```\n但是将这个例子放到`python3`环境中，会报错\n```bash\nTraceback (most recent call last):\n  File \"tmp\\_2.py\", line 4, in <module>\n    s.decode('utf-8')\nAttributeError: 'str' object has no attribute 'decode'\n```\n熟悉python历史的朋友会知道，为了解决编码问题，在`python3`中，所有的字符串都是使用Unicode编码，统一使用`str`类型来保存，而str类型没有`decode`方法，所以网上给出的方向并不适合我的问题。\n#### 字符编码\n为了确定是否是字符编码的问题，我换了一台`python3`机器，测试了一下\n```bash\n>>>a = b'\\xe5\\x94\\xb1\\xe6\\xad\\x8c'\n>>>a = a.decode(\"utf-8\")\n>>>print(a)\n唱歌\n```\n完全没有问题，正常输出，排除字符编码和代码失误。\n#### 输出\n既然字符编码、代码都没有错，那么问题肯定出在`print`上面。这时我开始关注错误信息中的`ascii`。因为在一般`python3`环境中，输出时会将`Unicode`转化为`utf-8`。为了解开这个疑惑，查看了输出编码\n```bash\n>>>import sys\n>>>sys.stdout.encoding\n'ANSI\\_X3.4-1968'\n```\n竟然是`ANSI_X3.4-1968`，所以任何中文都会报错。哈哈，终于定位问题啦。\n### 解决方案\n定位问题后，解决办法就很简单啦，有两种方法\n* 使用[PYTHONIOENCODING](https://docs.python.org/3.6/using/cmdline.html#envvar-PYTHONIOENCODING)\n运行python的时候加上PYTHONIOENCODING=utf-8，即\n```bash\nPYTHONIOENCODING=utf-8 python your\\_script.py\n```\n* 重新定义标准输出\n标准输出的定义如下\n```bash\nsys.stdout = codecs.getwriter(\"utf-8\")(sys.stdout.detach())\n```\n打印日志的方法\n```bash\nsys.stdout.write(\"Your content....\")\n```\n### 总结\n通过分析这个问题，进一步加深了对python3的了解。另外，希望各位看官批评指正！！\n","source":"_posts/Python3-UnicodeEncodeError 'ascii' codec can't encode characters in position 0-1.md","raw":"---\ntitle: Python3—UnicodeEncodeError 'ascii' codec can't encode characters in position 0-1\nauthor: Will Holmes\ncategories: Python\ntags:\n  - python\n  - 编码\n  - ascii\n\ndate: 2021-11-15 12:05:01\n---\n\n### 环境\n```bash\n>>> import sys\n>>> print(sys.version)\n'3.6.0 |Anaconda 4.3.1 (64-bit)| (default, Dec 23 2016, 12:22:00) \\n[GCC 4.4.7 20120313 (Red Hat 4.4.7-1)]'\n```\n### 问题描述\n今天在使用`python3`的时候，报错信息\n```bash\nTraceback (most recent call last):\n  File \"tmp.py\", line 3, in <module>\n    print(a)\nUnicodeEncodeError: 'ascii' codec can't encode characters in position 0-1: ordinal not in range(128)\n```\n报错代码可简化为\n```python\na = b'\\xe5\\x94\\xb1\\xe6\\xad\\x8c'\na = a.decode(\"utf-8\")\nprint(a)\n```\n### 问题分析\n本节介绍问题的分析过程，如果想看解决办法，可以直接看一下节。\n#### 网上解释\n网上给出的解释：错误的使用decode和encode方法会出现这种异常。例如使用decode方法将Unicode字符串转化的时候：\n```python\ns = u'中文'\ns.decode('utf-8')\nprint s\n```\n但是将这个例子放到`python3`环境中，会报错\n```bash\nTraceback (most recent call last):\n  File \"tmp\\_2.py\", line 4, in <module>\n    s.decode('utf-8')\nAttributeError: 'str' object has no attribute 'decode'\n```\n熟悉python历史的朋友会知道，为了解决编码问题，在`python3`中，所有的字符串都是使用Unicode编码，统一使用`str`类型来保存，而str类型没有`decode`方法，所以网上给出的方向并不适合我的问题。\n#### 字符编码\n为了确定是否是字符编码的问题，我换了一台`python3`机器，测试了一下\n```bash\n>>>a = b'\\xe5\\x94\\xb1\\xe6\\xad\\x8c'\n>>>a = a.decode(\"utf-8\")\n>>>print(a)\n唱歌\n```\n完全没有问题，正常输出，排除字符编码和代码失误。\n#### 输出\n既然字符编码、代码都没有错，那么问题肯定出在`print`上面。这时我开始关注错误信息中的`ascii`。因为在一般`python3`环境中，输出时会将`Unicode`转化为`utf-8`。为了解开这个疑惑，查看了输出编码\n```bash\n>>>import sys\n>>>sys.stdout.encoding\n'ANSI\\_X3.4-1968'\n```\n竟然是`ANSI_X3.4-1968`，所以任何中文都会报错。哈哈，终于定位问题啦。\n### 解决方案\n定位问题后，解决办法就很简单啦，有两种方法\n* 使用[PYTHONIOENCODING](https://docs.python.org/3.6/using/cmdline.html#envvar-PYTHONIOENCODING)\n运行python的时候加上PYTHONIOENCODING=utf-8，即\n```bash\nPYTHONIOENCODING=utf-8 python your\\_script.py\n```\n* 重新定义标准输出\n标准输出的定义如下\n```bash\nsys.stdout = codecs.getwriter(\"utf-8\")(sys.stdout.detach())\n```\n打印日志的方法\n```bash\nsys.stdout.write(\"Your content....\")\n```\n### 总结\n通过分析这个问题，进一步加深了对python3的了解。另外，希望各位看官批评指正！！\n","slug":"Python3-UnicodeEncodeError 'ascii' codec can't encode characters in position 0-1","published":1,"updated":"2021-11-15T04:46:08.639Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckw4ars5i0015tyoxbv2j8f3y","content":"<h3 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token function\">import</span> sys\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> print<span class=\"token punctuation\">(</span>sys.version<span class=\"token punctuation\">)</span>\n<span class=\"token string\">'3.6.0 |Anaconda 4.3.1 (64-bit)| (default, Dec 23 2016, 12:22:00) \\n[GCC 4.4.7 20120313 (Red Hat 4.4.7-1)]'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><p>今天在使用<code>python3</code>的时候，报错信息</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">Traceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span>:\n  File <span class=\"token string\">\"tmp.py\"</span>, line <span class=\"token number\">3</span>, <span class=\"token keyword\">in</span> <span class=\"token operator\">&lt;</span>module<span class=\"token operator\">></span>\n    print<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\nUnicodeEncodeError: <span class=\"token string\">'ascii'</span> codec can't encode characters <span class=\"token keyword\">in</span> position <span class=\"token number\">0</span>-1: ordinal not <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>报错代码可简化为</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">a <span class=\"token operator\">=</span> <span class=\"token string\">b'\\xe5\\x94\\xb1\\xe6\\xad\\x8c'</span>\na <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"问题分析\"><a href=\"#问题分析\" class=\"headerlink\" title=\"问题分析\"></a>问题分析</h3><p>本节介绍问题的分析过程，如果想看解决办法，可以直接看一下节。</p>\n<h4 id=\"网上解释\"><a href=\"#网上解释\" class=\"headerlink\" title=\"网上解释\"></a>网上解释</h4><p>网上给出的解释：错误的使用decode和encode方法会出现这种异常。例如使用decode方法将Unicode字符串转化的时候：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">s <span class=\"token operator\">=</span> <span class=\"token string\">u'中文'</span>\ns<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span> s<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>但是将这个例子放到<code>python3</code>环境中，会报错</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">Traceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span>:\n  File <span class=\"token string\">\"tmp\\_2.py\"</span>, line <span class=\"token number\">4</span>, <span class=\"token keyword\">in</span> <span class=\"token operator\">&lt;</span>module<span class=\"token operator\">></span>\n    s.decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span>\nAttributeError: <span class=\"token string\">'str'</span> object has no attribute <span class=\"token string\">'decode'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>熟悉python历史的朋友会知道，为了解决编码问题，在<code>python3</code>中，所有的字符串都是使用Unicode编码，统一使用<code>str</code>类型来保存，而str类型没有<code>decode</code>方法，所以网上给出的方向并不适合我的问题。</p>\n<h4 id=\"字符编码\"><a href=\"#字符编码\" class=\"headerlink\" title=\"字符编码\"></a>字符编码</h4><p>为了确定是否是字符编码的问题，我换了一台<code>python3</code>机器，测试了一下</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token operator\">>></span><span class=\"token operator\">></span>a <span class=\"token operator\">=</span> b<span class=\"token string\">'\\xe5\\x94\\xb1\\xe6\\xad\\x8c'</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>a <span class=\"token operator\">=</span> a.decode<span class=\"token punctuation\">(</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>print<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n唱歌<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>完全没有问题，正常输出，排除字符编码和代码失误。</p>\n<h4 id=\"输出\"><a href=\"#输出\" class=\"headerlink\" title=\"输出\"></a>输出</h4><p>既然字符编码、代码都没有错，那么问题肯定出在<code>print</code>上面。这时我开始关注错误信息中的<code>ascii</code>。因为在一般<code>python3</code>环境中，输出时会将<code>Unicode</code>转化为<code>utf-8</code>。为了解开这个疑惑，查看了输出编码</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token operator\">>></span><span class=\"token operator\">></span>import sys\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>sys.stdout.encoding\n<span class=\"token string\">'ANSI\\_X3.4-1968'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>竟然是<code>ANSI_X3.4-1968</code>，所以任何中文都会报错。哈哈，终于定位问题啦。</p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><p>定位问题后，解决办法就很简单啦，有两种方法</p>\n<ul>\n<li>使用<a href=\"https://docs.python.org/3.6/using/cmdline.html#envvar-PYTHONIOENCODING\">PYTHONIOENCODING</a><br>运行python的时候加上PYTHONIOENCODING=utf-8，即<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">PYTHONIOENCODING</span><span class=\"token operator\">=</span>utf-8 python your<span class=\"token punctuation\">\\</span>_script.py<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li>重新定义标准输出<br>标准输出的定义如下<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">sys.stdout <span class=\"token operator\">=</span> codecs.getwriter<span class=\"token punctuation\">(</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>sys.stdout.detach<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n打印日志的方法<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">sys.stdout.write<span class=\"token punctuation\">(</span><span class=\"token string\">\"Your content....\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3>通过分析这个问题，进一步加深了对python3的了解。另外，希望各位看官批评指正！！</li>\n</ul>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h3 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token function\">import</span> sys\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> print<span class=\"token punctuation\">(</span>sys.version<span class=\"token punctuation\">)</span>\n<span class=\"token string\">'3.6.0 |Anaconda 4.3.1 (64-bit)| (default, Dec 23 2016, 12:22:00) \\n[GCC 4.4.7 20120313 (Red Hat 4.4.7-1)]'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h3><p>今天在使用<code>python3</code>的时候，报错信息</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">Traceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span>:\n  File <span class=\"token string\">\"tmp.py\"</span>, line <span class=\"token number\">3</span>, <span class=\"token keyword\">in</span> <span class=\"token operator\">&lt;</span>module<span class=\"token operator\">></span>\n    print<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\nUnicodeEncodeError: <span class=\"token string\">'ascii'</span> codec can't encode characters <span class=\"token keyword\">in</span> position <span class=\"token number\">0</span>-1: ordinal not <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>报错代码可简化为</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">a <span class=\"token operator\">=</span> <span class=\"token string\">b'\\xe5\\x94\\xb1\\xe6\\xad\\x8c'</span>\na <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"问题分析\"><a href=\"#问题分析\" class=\"headerlink\" title=\"问题分析\"></a>问题分析</h3><p>本节介绍问题的分析过程，如果想看解决办法，可以直接看一下节。</p>\n<h4 id=\"网上解释\"><a href=\"#网上解释\" class=\"headerlink\" title=\"网上解释\"></a>网上解释</h4><p>网上给出的解释：错误的使用decode和encode方法会出现这种异常。例如使用decode方法将Unicode字符串转化的时候：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">s <span class=\"token operator\">=</span> <span class=\"token string\">u'中文'</span>\ns<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span> s<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>但是将这个例子放到<code>python3</code>环境中，会报错</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">Traceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span>:\n  File <span class=\"token string\">\"tmp\\_2.py\"</span>, line <span class=\"token number\">4</span>, <span class=\"token keyword\">in</span> <span class=\"token operator\">&lt;</span>module<span class=\"token operator\">></span>\n    s.decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span>\nAttributeError: <span class=\"token string\">'str'</span> object has no attribute <span class=\"token string\">'decode'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>熟悉python历史的朋友会知道，为了解决编码问题，在<code>python3</code>中，所有的字符串都是使用Unicode编码，统一使用<code>str</code>类型来保存，而str类型没有<code>decode</code>方法，所以网上给出的方向并不适合我的问题。</p>\n<h4 id=\"字符编码\"><a href=\"#字符编码\" class=\"headerlink\" title=\"字符编码\"></a>字符编码</h4><p>为了确定是否是字符编码的问题，我换了一台<code>python3</code>机器，测试了一下</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token operator\">>></span><span class=\"token operator\">></span>a <span class=\"token operator\">=</span> b<span class=\"token string\">'\\xe5\\x94\\xb1\\xe6\\xad\\x8c'</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>a <span class=\"token operator\">=</span> a.decode<span class=\"token punctuation\">(</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>print<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n唱歌<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>完全没有问题，正常输出，排除字符编码和代码失误。</p>\n<h4 id=\"输出\"><a href=\"#输出\" class=\"headerlink\" title=\"输出\"></a>输出</h4><p>既然字符编码、代码都没有错，那么问题肯定出在<code>print</code>上面。这时我开始关注错误信息中的<code>ascii</code>。因为在一般<code>python3</code>环境中，输出时会将<code>Unicode</code>转化为<code>utf-8</code>。为了解开这个疑惑，查看了输出编码</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token operator\">>></span><span class=\"token operator\">></span>import sys\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>sys.stdout.encoding\n<span class=\"token string\">'ANSI\\_X3.4-1968'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>竟然是<code>ANSI_X3.4-1968</code>，所以任何中文都会报错。哈哈，终于定位问题啦。</p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><p>定位问题后，解决办法就很简单啦，有两种方法</p>\n<ul>\n<li>使用<a href=\"https://docs.python.org/3.6/using/cmdline.html#envvar-PYTHONIOENCODING\">PYTHONIOENCODING</a><br>运行python的时候加上PYTHONIOENCODING=utf-8，即<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token assign-left variable\">PYTHONIOENCODING</span><span class=\"token operator\">=</span>utf-8 python your<span class=\"token punctuation\">\\</span>_script.py<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre></li>\n<li>重新定义标准输出<br>标准输出的定义如下<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">sys.stdout <span class=\"token operator\">=</span> codecs.getwriter<span class=\"token punctuation\">(</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>sys.stdout.detach<span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n打印日志的方法<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">sys.stdout.write<span class=\"token punctuation\">(</span><span class=\"token string\">\"Your content....\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3>通过分析这个问题，进一步加深了对python3的了解。另外，希望各位看官批评指正！！</li>\n</ul>\n"},{"title":"Python3的URL编码解码","author":"Will Holmes","date":"2021-11-06T20:24:15.000Z","_content":"\n\n## 前言\n\n博主最近在用python3比较强大的Django开发web的时候，发现一些url的编码问题，在浏览器提交请求api时，如果url中包含汉子，就会被自动编码掉。呈现的结果是\n==> %xx%xx%xx。如果出现3个百分号为一个原字符则为utf8编码，如果2个百分号则为gb2312编码。下面为大家演示编码和解码的代码。\n\n## 编码\n\n```python\n\n    from urllib.parse import quote\n    text = quote(text, 'utf-8')\n\n```\n注：text为要进行编码的字符串\n\n## 解码\n\n```python\n\n    from urllib.parse import unquote\n    text = unquote(text, 'utf-8')\n\n```\n## 源码\n\n```python\n\n    def unquote(string, encoding='utf-8', errors='replace'):\n        _\"\"\"Replace %xx escapes by their single-character equivalent. The optional_ _encoding and errors parameters specify how to decode percent-encoded_ _sequences into Unicode characters, as accepted by the bytes.decode()_ _method._ _By default, percent-encoded sequences are decoded with UTF-8, and invalid_ _sequences are replaced by a placeholder character._ ___unquote('abc%20def') - > 'abc def'.\n    __\"\"\"_ __ if '%' not in string:\n            string.split\n            return string\n        if encoding is None:\n            encoding = 'utf-8'\n        if errors is None:\n            errors = 'replace'\n        bits = _asciire.split(string)\n        res = [bits[0]]\n        append = res.append\n        for i in range(1, len(bits), 2):\n            append(unquote_to_bytes(bits[i]).decode(encoding, errors))\n            append(bits[i + 1])\n        return ''.join(res)\n\n```\n```python\n\n    def quote(string, safe='/', encoding=None, errors=None):\n        _\"\"\"quote('abc def') - > 'abc%20def'\n    ____Each part of a URL, e.g. the path info, the query, etc., has a_ _different set of reserved characters that must be quoted._ ___RFC 2396 Uniform Resource Identifiers (URI): Generic Syntax lists_ _the following reserved characters._ ___reserved    = \";\" | \"/\" | \"?\" | \":\" | \"@\" | \" &\" | \"=\" | \"+\" |\n    __\"$\" | \",\"_ ___Each of these characters is reserved in some component of a URL,_ _but not necessarily in all of them._ ___By default, the quote function is intended for quoting the path_ _section of a URL.  Thus, it will not encode '/'.  This character_ _is reserved, but in typical usage the quote function is being_ _called on a path where the existing slash characters are used as_ _reserved characters._ ___string and safe may be either str or bytes objects. encoding and errors_ _must not be specified if string is a bytes object._ ___The optional encoding and errors parameters specify how to deal with_ _non-ASCII characters, as accepted by the str.encode method._ _By default, encoding='utf-8' (characters are encoded with UTF-8), and_ _errors='strict' (unsupported characters raise a UnicodeEncodeError)._ _\"\"\"_ __ if isinstance(string, str):\n            if not string:\n                return string\n            if encoding is None:\n                encoding = 'utf-8'\n            if errors is None:\n                errors = 'strict'\n            string = string.encode(encoding, errors)\n        else:\n            if encoding is not None:\n                raise TypeError(\"quote() doesn't support 'encoding' for bytes\")\n            if errors is not None:\n                raise TypeError(\"quote() doesn't support 'errors' for bytes\")\n        return quote_from_bytes(string, safe)\n\n```\n","source":"_posts/Python3的URL编码解码.md","raw":"---\ntitle: Python3的URL编码解码\nauthor: Will Holmes\ncategories: Python\ntags:\n  - URL编码解码\n  - Python\ndate: 2021-11-07 04:24:15\n---\n\n\n## 前言\n\n博主最近在用python3比较强大的Django开发web的时候，发现一些url的编码问题，在浏览器提交请求api时，如果url中包含汉子，就会被自动编码掉。呈现的结果是\n==> %xx%xx%xx。如果出现3个百分号为一个原字符则为utf8编码，如果2个百分号则为gb2312编码。下面为大家演示编码和解码的代码。\n\n## 编码\n\n```python\n\n    from urllib.parse import quote\n    text = quote(text, 'utf-8')\n\n```\n注：text为要进行编码的字符串\n\n## 解码\n\n```python\n\n    from urllib.parse import unquote\n    text = unquote(text, 'utf-8')\n\n```\n## 源码\n\n```python\n\n    def unquote(string, encoding='utf-8', errors='replace'):\n        _\"\"\"Replace %xx escapes by their single-character equivalent. The optional_ _encoding and errors parameters specify how to decode percent-encoded_ _sequences into Unicode characters, as accepted by the bytes.decode()_ _method._ _By default, percent-encoded sequences are decoded with UTF-8, and invalid_ _sequences are replaced by a placeholder character._ ___unquote('abc%20def') - > 'abc def'.\n    __\"\"\"_ __ if '%' not in string:\n            string.split\n            return string\n        if encoding is None:\n            encoding = 'utf-8'\n        if errors is None:\n            errors = 'replace'\n        bits = _asciire.split(string)\n        res = [bits[0]]\n        append = res.append\n        for i in range(1, len(bits), 2):\n            append(unquote_to_bytes(bits[i]).decode(encoding, errors))\n            append(bits[i + 1])\n        return ''.join(res)\n\n```\n```python\n\n    def quote(string, safe='/', encoding=None, errors=None):\n        _\"\"\"quote('abc def') - > 'abc%20def'\n    ____Each part of a URL, e.g. the path info, the query, etc., has a_ _different set of reserved characters that must be quoted._ ___RFC 2396 Uniform Resource Identifiers (URI): Generic Syntax lists_ _the following reserved characters._ ___reserved    = \";\" | \"/\" | \"?\" | \":\" | \"@\" | \" &\" | \"=\" | \"+\" |\n    __\"$\" | \",\"_ ___Each of these characters is reserved in some component of a URL,_ _but not necessarily in all of them._ ___By default, the quote function is intended for quoting the path_ _section of a URL.  Thus, it will not encode '/'.  This character_ _is reserved, but in typical usage the quote function is being_ _called on a path where the existing slash characters are used as_ _reserved characters._ ___string and safe may be either str or bytes objects. encoding and errors_ _must not be specified if string is a bytes object._ ___The optional encoding and errors parameters specify how to deal with_ _non-ASCII characters, as accepted by the str.encode method._ _By default, encoding='utf-8' (characters are encoded with UTF-8), and_ _errors='strict' (unsupported characters raise a UnicodeEncodeError)._ _\"\"\"_ __ if isinstance(string, str):\n            if not string:\n                return string\n            if encoding is None:\n                encoding = 'utf-8'\n            if errors is None:\n                errors = 'strict'\n            string = string.encode(encoding, errors)\n        else:\n            if encoding is not None:\n                raise TypeError(\"quote() doesn't support 'encoding' for bytes\")\n            if errors is not None:\n                raise TypeError(\"quote() doesn't support 'errors' for bytes\")\n        return quote_from_bytes(string, safe)\n\n```\n","slug":"Python3的URL编码解码","published":1,"updated":"2021-11-06T20:25:30.813Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckw4ars5k0019tyoxesrvhcux","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>博主最近在用python3比较强大的Django开发web的时候，发现一些url的编码问题，在浏览器提交请求api时，如果url中包含汉子，就会被自动编码掉。呈现的结果是<br>==&gt; %xx%xx%xx。如果出现3个百分号为一个原字符则为utf8编码，如果2个百分号则为gb2312编码。下面为大家演示编码和解码的代码。</p>\n<h2 id=\"编码\"><a href=\"#编码\" class=\"headerlink\" title=\"编码\"></a>编码</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">\n<span class=\"token keyword\">from</span> urllib<span class=\"token punctuation\">.</span>parse <span class=\"token keyword\">import</span> quote\ntext <span class=\"token operator\">=</span> quote<span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">,</span> <span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>注：text为要进行编码的字符串</p>\n<h2 id=\"解码\"><a href=\"#解码\" class=\"headerlink\" title=\"解码\"></a>解码</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">\n<span class=\"token keyword\">from</span> urllib<span class=\"token punctuation\">.</span>parse <span class=\"token keyword\">import</span> unquote\ntext <span class=\"token operator\">=</span> unquote<span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">,</span> <span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">\n<span class=\"token keyword\">def</span> <span class=\"token function\">unquote</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">,</span> errors<span class=\"token operator\">=</span><span class=\"token string\">'replace'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    _<span class=\"token triple-quoted-string string\">\"\"\"Replace %xx escapes by their single-character equivalent. The optional_ _encoding and errors parameters specify how to decode percent-encoded_ _sequences into Unicode characters, as accepted by the bytes.decode()_ _method._ _By default, percent-encoded sequences are decoded with UTF-8, and invalid_ _sequences are replaced by a placeholder character._ ___unquote('abc%20def') - > 'abc def'.\n__\"\"\"</span>_ __ <span class=\"token keyword\">if</span> <span class=\"token string\">'%'</span> <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> string<span class=\"token punctuation\">:</span>\n        string<span class=\"token punctuation\">.</span>split\n        <span class=\"token keyword\">return</span> string\n    <span class=\"token keyword\">if</span> encoding <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        encoding <span class=\"token operator\">=</span> <span class=\"token string\">'utf-8'</span>\n    <span class=\"token keyword\">if</span> errors <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        errors <span class=\"token operator\">=</span> <span class=\"token string\">'replace'</span>\n    bits <span class=\"token operator\">=</span> _asciire<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span>\n    res <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>bits<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n    append <span class=\"token operator\">=</span> res<span class=\"token punctuation\">.</span>append\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>bits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        append<span class=\"token punctuation\">(</span>unquote_to_bytes<span class=\"token punctuation\">(</span>bits<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span>encoding<span class=\"token punctuation\">,</span> errors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        append<span class=\"token punctuation\">(</span>bits<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">''</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">\n<span class=\"token keyword\">def</span> <span class=\"token function\">quote</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">,</span> safe<span class=\"token operator\">=</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> errors<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    _<span class=\"token triple-quoted-string string\">\"\"\"quote('abc def') - > 'abc%20def'\n____Each part of a URL, e.g. the path info, the query, etc., has a_ _different set of reserved characters that must be quoted._ ___RFC 2396 Uniform Resource Identifiers (URI): Generic Syntax lists_ _the following reserved characters._ ___reserved    = \";\" | \"/\" | \"?\" | \":\" | \"@\" | \" &amp;\" | \"=\" | \"+\" |\n__\"$\" | \",\"_ ___Each of these characters is reserved in some component of a URL,_ _but not necessarily in all of them._ ___By default, the quote function is intended for quoting the path_ _section of a URL.  Thus, it will not encode '/'.  This character_ _is reserved, but in typical usage the quote function is being_ _called on a path where the existing slash characters are used as_ _reserved characters._ ___string and safe may be either str or bytes objects. encoding and errors_ _must not be specified if string is a bytes object._ ___The optional encoding and errors parameters specify how to deal with_ _non-ASCII characters, as accepted by the str.encode method._ _By default, encoding='utf-8' (characters are encoded with UTF-8), and_ _errors='strict' (unsupported characters raise a UnicodeEncodeError)._ _\"\"\"</span>_ __ <span class=\"token keyword\">if</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> string<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> string\n        <span class=\"token keyword\">if</span> encoding <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            encoding <span class=\"token operator\">=</span> <span class=\"token string\">'utf-8'</span>\n        <span class=\"token keyword\">if</span> errors <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            errors <span class=\"token operator\">=</span> <span class=\"token string\">'strict'</span>\n        string <span class=\"token operator\">=</span> string<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span>encoding<span class=\"token punctuation\">,</span> errors<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> encoding <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">raise</span> TypeError<span class=\"token punctuation\">(</span><span class=\"token string\">\"quote() doesn't support 'encoding' for bytes\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> errors <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">raise</span> TypeError<span class=\"token punctuation\">(</span><span class=\"token string\">\"quote() doesn't support 'errors' for bytes\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> quote_from_bytes<span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">,</span> safe<span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>博主最近在用python3比较强大的Django开发web的时候，发现一些url的编码问题，在浏览器提交请求api时，如果url中包含汉子，就会被自动编码掉。呈现的结果是<br>==&gt; %xx%xx%xx。如果出现3个百分号为一个原字符则为utf8编码，如果2个百分号则为gb2312编码。下面为大家演示编码和解码的代码。</p>\n<h2 id=\"编码\"><a href=\"#编码\" class=\"headerlink\" title=\"编码\"></a>编码</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">\n<span class=\"token keyword\">from</span> urllib<span class=\"token punctuation\">.</span>parse <span class=\"token keyword\">import</span> quote\ntext <span class=\"token operator\">=</span> quote<span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">,</span> <span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>注：text为要进行编码的字符串</p>\n<h2 id=\"解码\"><a href=\"#解码\" class=\"headerlink\" title=\"解码\"></a>解码</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">\n<span class=\"token keyword\">from</span> urllib<span class=\"token punctuation\">.</span>parse <span class=\"token keyword\">import</span> unquote\ntext <span class=\"token operator\">=</span> unquote<span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">,</span> <span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">\n<span class=\"token keyword\">def</span> <span class=\"token function\">unquote</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">,</span> errors<span class=\"token operator\">=</span><span class=\"token string\">'replace'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    _<span class=\"token triple-quoted-string string\">\"\"\"Replace %xx escapes by their single-character equivalent. The optional_ _encoding and errors parameters specify how to decode percent-encoded_ _sequences into Unicode characters, as accepted by the bytes.decode()_ _method._ _By default, percent-encoded sequences are decoded with UTF-8, and invalid_ _sequences are replaced by a placeholder character._ ___unquote('abc%20def') - > 'abc def'.\n__\"\"\"</span>_ __ <span class=\"token keyword\">if</span> <span class=\"token string\">'%'</span> <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> string<span class=\"token punctuation\">:</span>\n        string<span class=\"token punctuation\">.</span>split\n        <span class=\"token keyword\">return</span> string\n    <span class=\"token keyword\">if</span> encoding <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        encoding <span class=\"token operator\">=</span> <span class=\"token string\">'utf-8'</span>\n    <span class=\"token keyword\">if</span> errors <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n        errors <span class=\"token operator\">=</span> <span class=\"token string\">'replace'</span>\n    bits <span class=\"token operator\">=</span> _asciire<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span>\n    res <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>bits<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n    append <span class=\"token operator\">=</span> res<span class=\"token punctuation\">.</span>append\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>bits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        append<span class=\"token punctuation\">(</span>unquote_to_bytes<span class=\"token punctuation\">(</span>bits<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span>encoding<span class=\"token punctuation\">,</span> errors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        append<span class=\"token punctuation\">(</span>bits<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">''</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">\n<span class=\"token keyword\">def</span> <span class=\"token function\">quote</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">,</span> safe<span class=\"token operator\">=</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> errors<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    _<span class=\"token triple-quoted-string string\">\"\"\"quote('abc def') - > 'abc%20def'\n____Each part of a URL, e.g. the path info, the query, etc., has a_ _different set of reserved characters that must be quoted._ ___RFC 2396 Uniform Resource Identifiers (URI): Generic Syntax lists_ _the following reserved characters._ ___reserved    = \";\" | \"/\" | \"?\" | \":\" | \"@\" | \" &amp;\" | \"=\" | \"+\" |\n__\"$\" | \",\"_ ___Each of these characters is reserved in some component of a URL,_ _but not necessarily in all of them._ ___By default, the quote function is intended for quoting the path_ _section of a URL.  Thus, it will not encode '/'.  This character_ _is reserved, but in typical usage the quote function is being_ _called on a path where the existing slash characters are used as_ _reserved characters._ ___string and safe may be either str or bytes objects. encoding and errors_ _must not be specified if string is a bytes object._ ___The optional encoding and errors parameters specify how to deal with_ _non-ASCII characters, as accepted by the str.encode method._ _By default, encoding='utf-8' (characters are encoded with UTF-8), and_ _errors='strict' (unsupported characters raise a UnicodeEncodeError)._ _\"\"\"</span>_ __ <span class=\"token keyword\">if</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> string<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> string\n        <span class=\"token keyword\">if</span> encoding <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            encoding <span class=\"token operator\">=</span> <span class=\"token string\">'utf-8'</span>\n        <span class=\"token keyword\">if</span> errors <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            errors <span class=\"token operator\">=</span> <span class=\"token string\">'strict'</span>\n        string <span class=\"token operator\">=</span> string<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span>encoding<span class=\"token punctuation\">,</span> errors<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> encoding <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">raise</span> TypeError<span class=\"token punctuation\">(</span><span class=\"token string\">\"quote() doesn't support 'encoding' for bytes\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> errors <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">raise</span> TypeError<span class=\"token punctuation\">(</span><span class=\"token string\">\"quote() doesn't support 'errors' for bytes\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> quote_from_bytes<span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">,</span> safe<span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"Python判断当前操作系统类型以及os/sys/platform模块简介","author":"Will Holmes","date":"2021-11-06T20:44:00.000Z","_content":"\n\n## 判断操作系统类型\n\n```python\n\n    #coding=utf-8\n    \n    \n    import platform\n    \n    def TestPlatform( ):\n        print (\"----------Operation System--------------------------\")\n        ##  获取Python版本\n        print platform.python_version()\n    \n        ##   获取操作系统可执行程序的结构，，(’32bit’, ‘WindowsPE’)\n        print platform.architecture()\n    \n        ##   计算机的网络名称，’acer-PC’\n        print platform.node()\n    \n        #获取操作系统名称及版本号，’Windows-7-6.1.7601-SP1′\n        print platform.platform()  \n    \n        #计算机处理器信息，’Intel64 Family 6 Model 42 Stepping 7, GenuineIntel’\n        print platform.processor()\n    \n        ## 获取操作系统中Python的构建日期\n        print platform.python_build()\n    \n        ##  获取系统中python解释器的信息\n        print platform.python_compiler()\n    \n        if platform.python_branch()==\"\":\n            print platform.python_implementation()\n            print platform.python_revision()\n        print platform.release()\n        print platform.system()\n    \n        #print platform.system_alias()\n        ##  获取操作系统的版本\n        print platform.version()\n    \n        ##  包含上面所有的信息汇总\n        print platform.uname()\n    \n    def UsePlatform( ):\n        sysstr = platform.system()\n        if(sysstr ==\"Windows\"):\n            print (\"Call Windows tasks\")\n        elif(sysstr == \"Linux\"):\n            print (\"Call Linux tasks\")\n        else:\n            print (\"Other System tasks\")\n    \n    \n    \n    \n    if __name__ == \"__main__\" :\n    \n        TestPlatform( )\n    \n        UsePlatform( )\n    \n\n```\n## Python与操作系统有关的模块\n\n* * *\n\n### Os模块\n\n* * *\n\nPython的标准库中的os模块主要涉及普遍的操作系统功能。可以在Linux和Windows下运行，与平台无关。  \nos.sep 可以取代操作系统特定的路径分割符。  \nos.name字符串指示你正在使用的平台。比如对于Windows，它是’nt’，而对于Linux/Unix用户，它是’posix’。  \nos.getcwd()函数得到当前工作目录，即当前Python脚本工作的目录路径。  \nos.getenv()和os.putenv()函数分别用来读取和设置环境变量。  \nos.listdir()返回指定目录下的所有文件和目录名。  \nos.remove()函数用来删除一个文件。  \nos.system()函数用来运行shell命令。  \nos.linesep字符串给出当前平台使用的行终止符。例如，Windows使用’\\r\\n’，Linux使用’\\n’而Mac使用’\\r’。  \nos.path.split()函数返回一个路径的目录名和文件名。  \nos.path.isfile()和os.path.isdir()函数分别检验给出的路径是一个文件还是目录。  \nos.path.existe()函数用来检验给出的路径是否真地存在  \nos和os.path模块  \nos.listdir(dirname)：列出dirname下的目录和文件  \nos.getcwd()：获得当前工作目录  \nos.curdir:返回但前目录（’.’)  \nos.chdir(dirname):改变工作目录到dirname  \nos.path.isdir(name):判断name是不是一个目录，name不是目录就返回false  \nos.path.isfile(name):判断name是不是一个文件，不存在name也返回false  \nos.path.exists(name):判断是否存在文件或目录name  \nos.path.getsize(name):获得文件大小，如果name是目录返回0L  \nos.path.abspath(name):获得绝对路径  \nos.path.normpath(path):规范path字符串形式  \nos.path.split(name):分割文件名与目录（事实上，如果你完全使用目录，它也会将最后一个目录作为文件名而分离，同时它不会判断文件或目录是否存在）  \nos.path.splitext():分离文件名与扩展名  \nos.path.join(path,name):连接目录与文件名或目录  \nos.path.basename(path):返回文件名  \nos.path.dirname(path):返回文件路径\n\n### Sys模块\n\n* * *\n\nsys.argv: 实现从程序外部向程序传递参数。  \nsys.exit([arg]): 程序中间的退出，arg=0为正常退出。  \nsys.getdefaultencoding(): 获取系统当前编码，一般默认为ascii。  \nsys.setdefaultencoding():\n设置系统默认编码，执行dir（sys）时不会看到这个方法，在解释器中执行不通过，可以先执行reload(sys)，在执行\nsetdefaultencoding(‘utf8’)，此时将系统默认编码设置为utf8。（见设置系统默认编码 ）  \nsys.getfilesystemencoding(): 获取文件系统使用编码方式，Windows下返回’mbcs’，mac下返回’utf-8’.  \nsys.path: 获取指定模块搜索路径的字符串集合，可以将写好的模块放在得到的某个路径下，就可以在程序中import时正确找到。  \nsys.platform: 获取当前系统平台。  \nsys.stdin,sys.stdout,sys.stderr stdin , stdout , 以及stderr 变量包含与标准I/O 流对应的流对象.\n如果需要更好地控制输出,而print 不能满足你的要求, 它们就是你所需要的. 你也可以替换它们, 这时候你就可以重定向输出和输入到其它设备( device\n), 或者以非标准的方式处理它们\n\n### Paltform模块\n\n* * *\n\nplatform.system() 获取操作系统类型，windows、linux等  \nplatform.platform() 获取操作系统，Darwin-9.8.0-i386-32bit  \nplatform.version() 获取系统版本信息 6.2.0  \nplatform.mac_ver()  \nplatform.win32_ver() (‘post2008Server’, ‘6.2.9200’, ”, u’Multiprocessor Free’)\n\n","source":"_posts/Python判断当前操作系统类型以及os-sys-platform模块简介.md","raw":"---\ntitle: Python判断当前操作系统类型以及os/sys/platform模块简介\nauthor: Will Holmes\ncategories: Python\ntags:\n  - Python\n  - platform\n\ndate: 2021-11-07 04:44:00\n---\n\n\n## 判断操作系统类型\n\n```python\n\n    #coding=utf-8\n    \n    \n    import platform\n    \n    def TestPlatform( ):\n        print (\"----------Operation System--------------------------\")\n        ##  获取Python版本\n        print platform.python_version()\n    \n        ##   获取操作系统可执行程序的结构，，(’32bit’, ‘WindowsPE’)\n        print platform.architecture()\n    \n        ##   计算机的网络名称，’acer-PC’\n        print platform.node()\n    \n        #获取操作系统名称及版本号，’Windows-7-6.1.7601-SP1′\n        print platform.platform()  \n    \n        #计算机处理器信息，’Intel64 Family 6 Model 42 Stepping 7, GenuineIntel’\n        print platform.processor()\n    \n        ## 获取操作系统中Python的构建日期\n        print platform.python_build()\n    \n        ##  获取系统中python解释器的信息\n        print platform.python_compiler()\n    \n        if platform.python_branch()==\"\":\n            print platform.python_implementation()\n            print platform.python_revision()\n        print platform.release()\n        print platform.system()\n    \n        #print platform.system_alias()\n        ##  获取操作系统的版本\n        print platform.version()\n    \n        ##  包含上面所有的信息汇总\n        print platform.uname()\n    \n    def UsePlatform( ):\n        sysstr = platform.system()\n        if(sysstr ==\"Windows\"):\n            print (\"Call Windows tasks\")\n        elif(sysstr == \"Linux\"):\n            print (\"Call Linux tasks\")\n        else:\n            print (\"Other System tasks\")\n    \n    \n    \n    \n    if __name__ == \"__main__\" :\n    \n        TestPlatform( )\n    \n        UsePlatform( )\n    \n\n```\n## Python与操作系统有关的模块\n\n* * *\n\n### Os模块\n\n* * *\n\nPython的标准库中的os模块主要涉及普遍的操作系统功能。可以在Linux和Windows下运行，与平台无关。  \nos.sep 可以取代操作系统特定的路径分割符。  \nos.name字符串指示你正在使用的平台。比如对于Windows，它是’nt’，而对于Linux/Unix用户，它是’posix’。  \nos.getcwd()函数得到当前工作目录，即当前Python脚本工作的目录路径。  \nos.getenv()和os.putenv()函数分别用来读取和设置环境变量。  \nos.listdir()返回指定目录下的所有文件和目录名。  \nos.remove()函数用来删除一个文件。  \nos.system()函数用来运行shell命令。  \nos.linesep字符串给出当前平台使用的行终止符。例如，Windows使用’\\r\\n’，Linux使用’\\n’而Mac使用’\\r’。  \nos.path.split()函数返回一个路径的目录名和文件名。  \nos.path.isfile()和os.path.isdir()函数分别检验给出的路径是一个文件还是目录。  \nos.path.existe()函数用来检验给出的路径是否真地存在  \nos和os.path模块  \nos.listdir(dirname)：列出dirname下的目录和文件  \nos.getcwd()：获得当前工作目录  \nos.curdir:返回但前目录（’.’)  \nos.chdir(dirname):改变工作目录到dirname  \nos.path.isdir(name):判断name是不是一个目录，name不是目录就返回false  \nos.path.isfile(name):判断name是不是一个文件，不存在name也返回false  \nos.path.exists(name):判断是否存在文件或目录name  \nos.path.getsize(name):获得文件大小，如果name是目录返回0L  \nos.path.abspath(name):获得绝对路径  \nos.path.normpath(path):规范path字符串形式  \nos.path.split(name):分割文件名与目录（事实上，如果你完全使用目录，它也会将最后一个目录作为文件名而分离，同时它不会判断文件或目录是否存在）  \nos.path.splitext():分离文件名与扩展名  \nos.path.join(path,name):连接目录与文件名或目录  \nos.path.basename(path):返回文件名  \nos.path.dirname(path):返回文件路径\n\n### Sys模块\n\n* * *\n\nsys.argv: 实现从程序外部向程序传递参数。  \nsys.exit([arg]): 程序中间的退出，arg=0为正常退出。  \nsys.getdefaultencoding(): 获取系统当前编码，一般默认为ascii。  \nsys.setdefaultencoding():\n设置系统默认编码，执行dir（sys）时不会看到这个方法，在解释器中执行不通过，可以先执行reload(sys)，在执行\nsetdefaultencoding(‘utf8’)，此时将系统默认编码设置为utf8。（见设置系统默认编码 ）  \nsys.getfilesystemencoding(): 获取文件系统使用编码方式，Windows下返回’mbcs’，mac下返回’utf-8’.  \nsys.path: 获取指定模块搜索路径的字符串集合，可以将写好的模块放在得到的某个路径下，就可以在程序中import时正确找到。  \nsys.platform: 获取当前系统平台。  \nsys.stdin,sys.stdout,sys.stderr stdin , stdout , 以及stderr 变量包含与标准I/O 流对应的流对象.\n如果需要更好地控制输出,而print 不能满足你的要求, 它们就是你所需要的. 你也可以替换它们, 这时候你就可以重定向输出和输入到其它设备( device\n), 或者以非标准的方式处理它们\n\n### Paltform模块\n\n* * *\n\nplatform.system() 获取操作系统类型，windows、linux等  \nplatform.platform() 获取操作系统，Darwin-9.8.0-i386-32bit  \nplatform.version() 获取系统版本信息 6.2.0  \nplatform.mac_ver()  \nplatform.win32_ver() (‘post2008Server’, ‘6.2.9200’, ”, u’Multiprocessor Free’)\n\n","slug":"Python判断当前操作系统类型以及os-sys-platform模块简介","published":1,"updated":"2021-11-06T20:45:24.355Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckw4ars5m001dtyoxe0u2d1yi","content":"<h2 id=\"判断操作系统类型\"><a href=\"#判断操作系统类型\" class=\"headerlink\" title=\"判断操作系统类型\"></a>判断操作系统类型</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">\n<span class=\"token comment\">#coding=utf-8</span>\n\n\n<span class=\"token keyword\">import</span> platform\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">TestPlatform</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"----------Operation System--------------------------\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">##  获取Python版本</span>\n    <span class=\"token keyword\">print</span> platform<span class=\"token punctuation\">.</span>python_version<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">##   获取操作系统可执行程序的结构，，(’32bit’, ‘WindowsPE’)</span>\n    <span class=\"token keyword\">print</span> platform<span class=\"token punctuation\">.</span>architecture<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">##   计算机的网络名称，’acer-PC’</span>\n    <span class=\"token keyword\">print</span> platform<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">#获取操作系统名称及版本号，’Windows-7-6.1.7601-SP1′</span>\n    <span class=\"token keyword\">print</span> platform<span class=\"token punctuation\">.</span>platform<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  \n\n    <span class=\"token comment\">#计算机处理器信息，’Intel64 Family 6 Model 42 Stepping 7, GenuineIntel’</span>\n    <span class=\"token keyword\">print</span> platform<span class=\"token punctuation\">.</span>processor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">## 获取操作系统中Python的构建日期</span>\n    <span class=\"token keyword\">print</span> platform<span class=\"token punctuation\">.</span>python_build<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">##  获取系统中python解释器的信息</span>\n    <span class=\"token keyword\">print</span> platform<span class=\"token punctuation\">.</span>python_compiler<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> platform<span class=\"token punctuation\">.</span>python_branch<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span> platform<span class=\"token punctuation\">.</span>python_implementation<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span> platform<span class=\"token punctuation\">.</span>python_revision<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span> platform<span class=\"token punctuation\">.</span>release<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span> platform<span class=\"token punctuation\">.</span>system<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">#print platform.system_alias()</span>\n    <span class=\"token comment\">##  获取操作系统的版本</span>\n    <span class=\"token keyword\">print</span> platform<span class=\"token punctuation\">.</span>version<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">##  包含上面所有的信息汇总</span>\n    <span class=\"token keyword\">print</span> platform<span class=\"token punctuation\">.</span>uname<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">UsePlatform</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    sysstr <span class=\"token operator\">=</span> platform<span class=\"token punctuation\">.</span>system<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>sysstr <span class=\"token operator\">==</span><span class=\"token string\">\"Windows\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Call Windows tasks\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">elif</span><span class=\"token punctuation\">(</span>sysstr <span class=\"token operator\">==</span> <span class=\"token string\">\"Linux\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Call Linux tasks\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Other System tasks\"</span><span class=\"token punctuation\">)</span>\n\n\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span> <span class=\"token punctuation\">:</span>\n\n    TestPlatform<span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span>\n\n    UsePlatform<span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span>\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"Python与操作系统有关的模块\"><a href=\"#Python与操作系统有关的模块\" class=\"headerlink\" title=\"Python与操作系统有关的模块\"></a>Python与操作系统有关的模块</h2><hr>\n<h3 id=\"Os模块\"><a href=\"#Os模块\" class=\"headerlink\" title=\"Os模块\"></a>Os模块</h3><hr>\n<p>Python的标准库中的os模块主要涉及普遍的操作系统功能。可以在Linux和Windows下运行，与平台无关。<br>os.sep 可以取代操作系统特定的路径分割符。<br>os.name字符串指示你正在使用的平台。比如对于Windows，它是’nt’，而对于Linux/Unix用户，它是’posix’。<br>os.getcwd()函数得到当前工作目录，即当前Python脚本工作的目录路径。<br>os.getenv()和os.putenv()函数分别用来读取和设置环境变量。<br>os.listdir()返回指定目录下的所有文件和目录名。<br>os.remove()函数用来删除一个文件。<br>os.system()函数用来运行shell命令。<br>os.linesep字符串给出当前平台使用的行终止符。例如，Windows使用’\\r\\n’，Linux使用’\\n’而Mac使用’\\r’。<br>os.path.split()函数返回一个路径的目录名和文件名。<br>os.path.isfile()和os.path.isdir()函数分别检验给出的路径是一个文件还是目录。<br>os.path.existe()函数用来检验给出的路径是否真地存在<br>os和os.path模块<br>os.listdir(dirname)：列出dirname下的目录和文件<br>os.getcwd()：获得当前工作目录<br>os.curdir:返回但前目录（’.’)<br>os.chdir(dirname):改变工作目录到dirname<br>os.path.isdir(name):判断name是不是一个目录，name不是目录就返回false<br>os.path.isfile(name):判断name是不是一个文件，不存在name也返回false<br>os.path.exists(name):判断是否存在文件或目录name<br>os.path.getsize(name):获得文件大小，如果name是目录返回0L<br>os.path.abspath(name):获得绝对路径<br>os.path.normpath(path):规范path字符串形式<br>os.path.split(name):分割文件名与目录（事实上，如果你完全使用目录，它也会将最后一个目录作为文件名而分离，同时它不会判断文件或目录是否存在）<br>os.path.splitext():分离文件名与扩展名<br>os.path.join(path,name):连接目录与文件名或目录<br>os.path.basename(path):返回文件名<br>os.path.dirname(path):返回文件路径</p>\n<h3 id=\"Sys模块\"><a href=\"#Sys模块\" class=\"headerlink\" title=\"Sys模块\"></a>Sys模块</h3><hr>\n<p>sys.argv: 实现从程序外部向程序传递参数。<br>sys.exit([arg]): 程序中间的退出，arg=0为正常退出。<br>sys.getdefaultencoding(): 获取系统当前编码，一般默认为ascii。<br>sys.setdefaultencoding():<br>设置系统默认编码，执行dir（sys）时不会看到这个方法，在解释器中执行不通过，可以先执行reload(sys)，在执行<br>setdefaultencoding(‘utf8’)，此时将系统默认编码设置为utf8。（见设置系统默认编码 ）<br>sys.getfilesystemencoding(): 获取文件系统使用编码方式，Windows下返回’mbcs’，mac下返回’utf-8’.<br>sys.path: 获取指定模块搜索路径的字符串集合，可以将写好的模块放在得到的某个路径下，就可以在程序中import时正确找到。<br>sys.platform: 获取当前系统平台。<br>sys.stdin,sys.stdout,sys.stderr stdin , stdout , 以及stderr 变量包含与标准I/O 流对应的流对象.<br>如果需要更好地控制输出,而print 不能满足你的要求, 它们就是你所需要的. 你也可以替换它们, 这时候你就可以重定向输出和输入到其它设备( device<br>), 或者以非标准的方式处理它们</p>\n<h3 id=\"Paltform模块\"><a href=\"#Paltform模块\" class=\"headerlink\" title=\"Paltform模块\"></a>Paltform模块</h3><hr>\n<p>platform.system() 获取操作系统类型，windows、linux等<br>platform.platform() 获取操作系统，Darwin-9.8.0-i386-32bit<br>platform.version() 获取系统版本信息 6.2.0<br>platform.mac_ver()<br>platform.win32_ver() (‘post2008Server’, ‘6.2.9200’, ”, u’Multiprocessor Free’)</p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"判断操作系统类型\"><a href=\"#判断操作系统类型\" class=\"headerlink\" title=\"判断操作系统类型\"></a>判断操作系统类型</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">\n<span class=\"token comment\">#coding=utf-8</span>\n\n\n<span class=\"token keyword\">import</span> platform\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">TestPlatform</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"----------Operation System--------------------------\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">##  获取Python版本</span>\n    <span class=\"token keyword\">print</span> platform<span class=\"token punctuation\">.</span>python_version<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">##   获取操作系统可执行程序的结构，，(’32bit’, ‘WindowsPE’)</span>\n    <span class=\"token keyword\">print</span> platform<span class=\"token punctuation\">.</span>architecture<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">##   计算机的网络名称，’acer-PC’</span>\n    <span class=\"token keyword\">print</span> platform<span class=\"token punctuation\">.</span>node<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">#获取操作系统名称及版本号，’Windows-7-6.1.7601-SP1′</span>\n    <span class=\"token keyword\">print</span> platform<span class=\"token punctuation\">.</span>platform<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  \n\n    <span class=\"token comment\">#计算机处理器信息，’Intel64 Family 6 Model 42 Stepping 7, GenuineIntel’</span>\n    <span class=\"token keyword\">print</span> platform<span class=\"token punctuation\">.</span>processor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">## 获取操作系统中Python的构建日期</span>\n    <span class=\"token keyword\">print</span> platform<span class=\"token punctuation\">.</span>python_build<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">##  获取系统中python解释器的信息</span>\n    <span class=\"token keyword\">print</span> platform<span class=\"token punctuation\">.</span>python_compiler<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> platform<span class=\"token punctuation\">.</span>python_branch<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span> platform<span class=\"token punctuation\">.</span>python_implementation<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span> platform<span class=\"token punctuation\">.</span>python_revision<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span> platform<span class=\"token punctuation\">.</span>release<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span> platform<span class=\"token punctuation\">.</span>system<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">#print platform.system_alias()</span>\n    <span class=\"token comment\">##  获取操作系统的版本</span>\n    <span class=\"token keyword\">print</span> platform<span class=\"token punctuation\">.</span>version<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">##  包含上面所有的信息汇总</span>\n    <span class=\"token keyword\">print</span> platform<span class=\"token punctuation\">.</span>uname<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">UsePlatform</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    sysstr <span class=\"token operator\">=</span> platform<span class=\"token punctuation\">.</span>system<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>sysstr <span class=\"token operator\">==</span><span class=\"token string\">\"Windows\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Call Windows tasks\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">elif</span><span class=\"token punctuation\">(</span>sysstr <span class=\"token operator\">==</span> <span class=\"token string\">\"Linux\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Call Linux tasks\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Other System tasks\"</span><span class=\"token punctuation\">)</span>\n\n\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span> <span class=\"token punctuation\">:</span>\n\n    TestPlatform<span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span>\n\n    UsePlatform<span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span>\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"Python与操作系统有关的模块\"><a href=\"#Python与操作系统有关的模块\" class=\"headerlink\" title=\"Python与操作系统有关的模块\"></a>Python与操作系统有关的模块</h2><hr>\n<h3 id=\"Os模块\"><a href=\"#Os模块\" class=\"headerlink\" title=\"Os模块\"></a>Os模块</h3><hr>\n<p>Python的标准库中的os模块主要涉及普遍的操作系统功能。可以在Linux和Windows下运行，与平台无关。<br>os.sep 可以取代操作系统特定的路径分割符。<br>os.name字符串指示你正在使用的平台。比如对于Windows，它是’nt’，而对于Linux/Unix用户，它是’posix’。<br>os.getcwd()函数得到当前工作目录，即当前Python脚本工作的目录路径。<br>os.getenv()和os.putenv()函数分别用来读取和设置环境变量。<br>os.listdir()返回指定目录下的所有文件和目录名。<br>os.remove()函数用来删除一个文件。<br>os.system()函数用来运行shell命令。<br>os.linesep字符串给出当前平台使用的行终止符。例如，Windows使用’\\r\\n’，Linux使用’\\n’而Mac使用’\\r’。<br>os.path.split()函数返回一个路径的目录名和文件名。<br>os.path.isfile()和os.path.isdir()函数分别检验给出的路径是一个文件还是目录。<br>os.path.existe()函数用来检验给出的路径是否真地存在<br>os和os.path模块<br>os.listdir(dirname)：列出dirname下的目录和文件<br>os.getcwd()：获得当前工作目录<br>os.curdir:返回但前目录（’.’)<br>os.chdir(dirname):改变工作目录到dirname<br>os.path.isdir(name):判断name是不是一个目录，name不是目录就返回false<br>os.path.isfile(name):判断name是不是一个文件，不存在name也返回false<br>os.path.exists(name):判断是否存在文件或目录name<br>os.path.getsize(name):获得文件大小，如果name是目录返回0L<br>os.path.abspath(name):获得绝对路径<br>os.path.normpath(path):规范path字符串形式<br>os.path.split(name):分割文件名与目录（事实上，如果你完全使用目录，它也会将最后一个目录作为文件名而分离，同时它不会判断文件或目录是否存在）<br>os.path.splitext():分离文件名与扩展名<br>os.path.join(path,name):连接目录与文件名或目录<br>os.path.basename(path):返回文件名<br>os.path.dirname(path):返回文件路径</p>\n<h3 id=\"Sys模块\"><a href=\"#Sys模块\" class=\"headerlink\" title=\"Sys模块\"></a>Sys模块</h3><hr>\n<p>sys.argv: 实现从程序外部向程序传递参数。<br>sys.exit([arg]): 程序中间的退出，arg=0为正常退出。<br>sys.getdefaultencoding(): 获取系统当前编码，一般默认为ascii。<br>sys.setdefaultencoding():<br>设置系统默认编码，执行dir（sys）时不会看到这个方法，在解释器中执行不通过，可以先执行reload(sys)，在执行<br>setdefaultencoding(‘utf8’)，此时将系统默认编码设置为utf8。（见设置系统默认编码 ）<br>sys.getfilesystemencoding(): 获取文件系统使用编码方式，Windows下返回’mbcs’，mac下返回’utf-8’.<br>sys.path: 获取指定模块搜索路径的字符串集合，可以将写好的模块放在得到的某个路径下，就可以在程序中import时正确找到。<br>sys.platform: 获取当前系统平台。<br>sys.stdin,sys.stdout,sys.stderr stdin , stdout , 以及stderr 变量包含与标准I/O 流对应的流对象.<br>如果需要更好地控制输出,而print 不能满足你的要求, 它们就是你所需要的. 你也可以替换它们, 这时候你就可以重定向输出和输入到其它设备( device<br>), 或者以非标准的方式处理它们</p>\n<h3 id=\"Paltform模块\"><a href=\"#Paltform模块\" class=\"headerlink\" title=\"Paltform模块\"></a>Paltform模块</h3><hr>\n<p>platform.system() 获取操作系统类型，windows、linux等<br>platform.platform() 获取操作系统，Darwin-9.8.0-i386-32bit<br>platform.version() 获取系统版本信息 6.2.0<br>platform.mac_ver()<br>platform.win32_ver() (‘post2008Server’, ‘6.2.9200’, ”, u’Multiprocessor Free’)</p>\n"},{"title":"Python图像处理库PIL中图像格式转换（一）","author":"Will Holmes","date":"2021-11-06T20:51:04.000Z","_content":"\n\n在数字图像处理中，针对不同的图像格式有其特定的处理算法。所以，在做图像处理之前，我们需要考虑清楚自己要基于哪种格式的图像进行算法设计及其实现。本文基于这个需求，使用python中的图像处理库PIL来实现不同图像格式的转换。\n\n对于彩色图像，不管其图像格式是PNG，还是BMP，或者JPG，在PIL中，使用Image模块的open()函数打开后，返回的图像对象的模式都是“RGB”。而对于灰度图像，不管其图像格式是PNG，还是BMP，或者JPG，打开后，其模式为“L”。\n\n通过之前的博客对Image模块的介绍，对于PNG、BMP和JPG彩色图像格式之间的互相转换都可以通过Image模块的open()和save()函数来完成。具体说就是，在打开这些图像时，PIL会将它们解码为三通道的“RGB”图像。用户可以基于这个“RGB”图像，对其进行处理。处理完毕，使用函数save()，可以将处理结果保存成PNG、BMP和JPG中任何格式。这样也就完成了几种格式之间的转换。同理，其他格式的彩色图像也可以通过这种方式完成转换。当然，对于不同格式的灰度图像，也可通过类似途径完成，只是PIL解码后是模式为“L”的图像。\n\n这里，我想详细介绍一下Image模块的convert()函数，用于不同模式图像之间的转换。\n\nConvert()函数有三种形式的定义，它们定义形式如下：\n\nim.convert(mode) ⇒ image\n\nim.convert(“P”, **options)  ⇒ image\n\nim.convert(mode, matrix)  ⇒ image\n\n使用不同的参数，将当前的图像转换为新的模式，并产生新的图像作为返回值。\n\n通过博客“[Python图像处理库PIL的基本概念介绍](http://blog.csdn.net/icamera0/article/details/50647465)”，我们知道PIL中有九种不同模式。分别为1，L，P，RGB，RGBA，CMYK，YCbCr，I，F。\n\n本文我采用的示例图像是图像处理中经典的lena照片。分辨率为512x512的lena图片如下：\n\n![](https://img-blog.csdn.net/20160310080807668?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n一、模式“RGB”转换为其他不同模式\n\n## 模式“1”\n\n模式“1”为二值图像，非黑即白。但是它每个像素用8个bit表示，0表示黑，255表示白。下面我们将lena图像转换为“1”图像。\n\n例子：\n\n```python\n\n    >>>from PIL import Image\n    \n    >>> lena =Image.open(\"D:\\\\Code\\\\Python\\\\test\\\\img\\\\lena.jpg\")\n    \n    >>> lena.mode\n    \n    'RGB'\n    \n    >>> lena.getpixel((0,0))\n    \n    (197, 111, 78)\n    \n    >>> lena_1 = lena.convert(\"1\")\n    \n    >>> lena_1.mode\n    \n    '1'\n    \n    >>> lena_1.size\n    \n    (512, 512)\n    \n    >>>lena_1.getpixel((0,0))\n    \n    255\n    \n    >>> lena_1.getpixel((10,10))\n    \n    255\n    \n    >>>lena_1.getpixel((10,120))\n    \n    0\n    \n    >>>lena_1.getpixel((130,120))\n    \n    255\n\n```\n图像lena_1的模式为“1”，分辨率为512x512，如下：\n\n![](https://img-blog.csdn.net/20160310080929507?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n## 模式“L”\n\n模式“L”为灰色图像，它的每个像素用8个bit表示，0表示黑，255表示白，其他数字表示不同的灰度。在PIL中，从模式“RGB”转换为“L”模式是按照下面的公式转换的：\n\nL = R * 299/1000 + G * 587/1000+ B * 114/1000\n\n下面我们将lena图像转换为“L”图像。\n\n例子：\n\n```python\n\n    >>> from PIL importImage\n    \n    >>> lena = Image.open(\"D:\\\\Code\\\\Python\\\\test\\\\img\\\\lena.jpg\")\n    \n    >>> lena.mode\n    \n    'RGB'\n    \n    >>> lena.getpixel((0,0))\n    \n    (197, 111, 78)\n    \n    >>> lena_L =lena.convert(\"L\")\n    \n    >>> lena_L.mode\n    \n    'L'\n    \n    >>> lena_L.size\n    \n    (512, 512)\n    \n    >>>lena.getpixel((0,0))\n    \n    (197, 111, 78)\n    \n    >>>lena_L.getpixel((0,0))\n    \n    132\n\n```\n对于第一个像素点，原始图像lena为(197, 111, 78)，其转换为灰色值为：\n\n197 *299/1000 + 111 * 587/1000 + 78 * 114/1000 = 132.952，PIL中只取了整数部分，即为132。\n\n转换后的图像lena_L如下：\n\n![](https://img-blog.csdn.net/20160310081028211?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n## 模式“P”\n\n模式“P”为8位彩色图像，它的每个像素用8个bit表示，其对应的彩色值是按照调色板查询出来的。\n\n下面我们使用默认的调色板将lena图像转换为“P”图像。\n\n例子：\n\n```python\n\n    >>> from PIL importImage\n    \n    >>> lena = Image.open(\"D:\\\\Code\\\\Python\\\\test\\\\img\\\\lena.jpg\")\n    \n    >>> lena.mode\n    \n    'RGB'\n    \n    >>> lena.getpixel((0,0))\n    \n    (197, 111, 78)\n    \n    >>> lena_P =lena.convert(\"P\")\n    \n    >>> lena_P.mode\n    \n    'P'\n    \n    >>>lena_P.getpixel((0,0))\n    \n    62\n\n```\n转换后的图像lena_P如下：\n\n![](https://img-blog.csdn.net/20160310081127075?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n## 模式“RGBA”\n\n模式“RGBA”为32位彩色图像，它的每个像素用32个bit表示，其中24bit表示红色、绿色和蓝色三个通道，另外8bit表示alpha通道，即透明通道。\n\n下面我们将模式为“RGB”的lena图像转换为“RGBA”图像。\n\n例子：\n\n```python\n\n    >>> from PIL import Image\n    \n    >>>lena = Image.open(\"D:\\\\Code\\\\Python\\\\test\\\\img\\\\lena.jpg\")\n    \n    >>>lena.mode\n    \n    'RGB'\n    \n    >>>lena.getpixel((0,0))\n    \n    (197,111, 78)\n    \n    >>>lena_rgba = lena.convert(\"RGBA\")\n    \n    >>>lena_rgba.mode\n    \n    'RGBA'\n    \n    >>>lena_rgba.getpixel((0,0))\n    \n    (197,111, 78, 255)\n    \n    >>>lena_rgba.getpixel((0,1))\n    \n    (196,110, 77, 255)\n    \n    >>>lena.getpixel((0,0))\n    \n    (197,111, 78)\n    \n    >>>lena.getpixel((0,1))\n    \n    (196,110, 77)\n\n```\n从实例中可以看到，使用当前这个方式将“RGB”图像转为“RGBA”图像时，alpha通道全部设置为255，即完全不透明。\n\n转换后的图像lena_rgba如下：\n\n![](https://img-blog.csdn.net/20160310081249935?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n## 模式“CMYK”\n\n模式“CMYK”为32位彩色图像，它的每个像素用32个bit表示。模式“CMYK”就是印刷四分色模式，它是彩色印刷时采用的一种套色模式，利用色料的三原色混色原理，加上黑色油墨，共计四种颜色混合叠加，形成所谓“全彩印刷”。\n\n四种标准颜色是：C：Cyan = 青色，又称为‘天蓝色’或是‘湛蓝’M：Magenta = 品红色，又称为‘洋红色’；Y：Yellow = 黄色；K：Key\nPlate(blacK) = 定位套版色（黑色）。\n\n下面我们将模式为“RGB”的lena图像转换为“CMYK”图像。\n\n例子：\n\n```python\n\n    >>>from PIL import Image\n    \n    >>> lena =Image.open(\"D:\\\\Code\\\\Python\\\\test\\\\img\\\\lena.jpg\")\n    \n    >>> lena_cmyk =lena.convert(\"CMYK\")\n    \n    >>> lena_cmyk.mode\n    \n    'CMYK'\n    \n    >>>lena_cmyk.getpixel((0,0))\n    \n    (58, 144, 177, 0)\n    \n    >>> lena_cmyk.getpixel((0,1))\n    \n    (59, 145, 178, 0)\n    \n    >>>lena.getpixel((0,0))\n    \n    (197, 111, 78)\n    \n    >>>lena.getpixel((0,1))\n    \n    (196, 110, 77)\n\n```\n从实例中可以得知PIL中“RGB”转换为“CMYK”的公式如下：\n\nC = 255 - R  \nM = 255 - G  \nY = 255 - B  \nK = 0\n\n由于该转换公式比较简单，转换后的图像颜色有些失真。\n\n转换后的图像lena_cmyk如下：\n\n![](https://img-blog.csdn.net/20160310081334545?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n## 模式“YCbCr”\n\n模式“YCbCr”为24位彩色图像，它的每个像素用24个bit表示。YCbCr其中Y是指亮度分量，Cb指蓝色色度分量，而Cr指红色色度分量。人的肉眼对视频的Y分量更敏感，因此在通过对色度分量进行子采样来减少色度分量后，肉眼将察觉不到的图像质量的变化。\n\n模式“RGB”转换为“YCbCr”的公式如下：\n\nY= 0.257*R+0.504*G+0.098*B+16  \nCb = -0.148*R-0.291*G+0.439*B+128  \nCr = 0.439*R-0.368*G-0.071*B+128\n\n下面我们将模式为“RGB”的lena图像转换为“YCbCr”图像。\n\n例子：\n\n```python\n\n    >>>from PIL import Image\n    \n    >>> lena =Image.open(\"D:\\\\Code\\\\Python\\\\test\\\\img\\\\lena.jpg\")\n    \n    >>> lena_ycbcr =lena.convert(\"YCbCr\")\n    \n    >>>lena_ycbcr.mode\n    \n    'YCbCr'\n    \n    >>>lena_ycbcr.getpixel((0,0))\n    \n    (132, 97, 173)\n    \n    >>>lena.getpixel((0,0))\n    \n    (197, 111, 78)\n\n```\n按照公式，Y = 0.257*197+0.564*111+0.098*78+16= 136.877\n\nCb= -0.148*197-0.291*111+0.439*78+128= 100.785  \nCr = 0.439*197-0.368*111-0.071*78+128 = 168.097\n\n由此可见，PIL中并非按照这个公式进行“RGB”到“YCbCr”的转换。\n\n转换后的图像lena_ycbcr如下：\n\n![](https://img-blog.csdn.net/20160310081415264?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n## 模式“I”\n\n模式“I”为32位整型灰色图像，它的每个像素用32个bit表示，0表示黑，255表示白，(0,255)之间的数字表示不同的灰度。在PIL中，从模式“RGB”转换为“I”模式是按照下面的公式转换的：\n\nI = R * 299/1000 + G * 587/1000 + B * 114/1000\n\n下面我们将模式为“RGB”的lena图像转换为“I”图像。\n\n例子：\n\n```python\n\n    >>> from PIL import Image\n    \n    >>>lena = Image.open(\"D:\\\\Code\\\\Python\\\\test\\\\img\\\\lena.jpg\")\n    \n    >>>lena.getpixel((0,0))\n    \n    (197,111, 78)\n    \n    >>>lena.getpixel((0,1))\n    \n    (196,110, 77)\n    \n    >>> lena_I =lena.convert(\"I\")\n    \n    >>> lena_I.mode\n    \n    'I'\n    \n    >>>lena_I.getpixel((0,0))\n    \n    132\n    \n    >>>lena_I.getpixel((0,1))\n    \n    131\n    \n    >>> lena_L =lena.convert(\"L\")\n    \n    >>>lena_L.getpixel((0,0))\n    \n    132\n    \n    >>>lena_L.getpixel((0,1))\n    \n    131\n\n```\n从实验的结果看，模式“I”与模式“L”的结果是完全一样，只是模式“L”的像素是8bit，而模式“I”的像素是32bit。\n\n## 模式“F”\n\n模式“F”为32位浮点灰色图像，它的每个像素用32个bit表示，0表示黑，255表示白，(0,255)之间的数字表示不同的灰度。在PIL中，从模式“RGB”转换为“F”模式是按照下面的公式转换的：\n\nF = R * 299/1000+ G * 587/1000 + B * 114/1000\n\n下面我们将模式为“RGB”的lena图像转换为“F”图像。\n\n例子：\n\n```python\n\n    >>>from PIL import Image\n    \n    >>> lena =Image.open(\"D:\\\\Code\\\\Python\\\\test\\\\img\\\\lena.jpg\")\n    \n    >>>lena.getpixel((0,0))\n    \n    (197, 111, 78)\n    \n    >>>lena.getpixel((0,1))\n    \n    (196, 110, 77)\n    \n    >>> lena_F =lena.convert(\"F\")\n    \n    >>> lena_F.mode\n    \n    'F'\n    \n    >>>lena_F.getpixel((0,0))\n    \n    132.95199584960938\n    \n    >>>lena_F.getpixel((0,1))\n    \n    131.95199584960938\n\n```\n模式“F”与模式“L”的转换公式是一样的，都是RGB转换为灰色值的公式，但模式“F”会保留小数部分，如实验中的数据。\n\n\n\n","source":"_posts/Python图像处理库PIL中图像格式转换（一）.md","raw":"---\ntitle: Python图像处理库PIL中图像格式转换（一）\nauthor: Will Holmes\ncategories: Python\ntags:\n  - 图像处理\n  - PIL从入门到精通\n  - PIL\n  - Python\n  - 格式转换\n  - 模式转换\ndate: 2021-11-07 04:51:04\n---\n\n\n在数字图像处理中，针对不同的图像格式有其特定的处理算法。所以，在做图像处理之前，我们需要考虑清楚自己要基于哪种格式的图像进行算法设计及其实现。本文基于这个需求，使用python中的图像处理库PIL来实现不同图像格式的转换。\n\n对于彩色图像，不管其图像格式是PNG，还是BMP，或者JPG，在PIL中，使用Image模块的open()函数打开后，返回的图像对象的模式都是“RGB”。而对于灰度图像，不管其图像格式是PNG，还是BMP，或者JPG，打开后，其模式为“L”。\n\n通过之前的博客对Image模块的介绍，对于PNG、BMP和JPG彩色图像格式之间的互相转换都可以通过Image模块的open()和save()函数来完成。具体说就是，在打开这些图像时，PIL会将它们解码为三通道的“RGB”图像。用户可以基于这个“RGB”图像，对其进行处理。处理完毕，使用函数save()，可以将处理结果保存成PNG、BMP和JPG中任何格式。这样也就完成了几种格式之间的转换。同理，其他格式的彩色图像也可以通过这种方式完成转换。当然，对于不同格式的灰度图像，也可通过类似途径完成，只是PIL解码后是模式为“L”的图像。\n\n这里，我想详细介绍一下Image模块的convert()函数，用于不同模式图像之间的转换。\n\nConvert()函数有三种形式的定义，它们定义形式如下：\n\nim.convert(mode) ⇒ image\n\nim.convert(“P”, **options)  ⇒ image\n\nim.convert(mode, matrix)  ⇒ image\n\n使用不同的参数，将当前的图像转换为新的模式，并产生新的图像作为返回值。\n\n通过博客“[Python图像处理库PIL的基本概念介绍](http://blog.csdn.net/icamera0/article/details/50647465)”，我们知道PIL中有九种不同模式。分别为1，L，P，RGB，RGBA，CMYK，YCbCr，I，F。\n\n本文我采用的示例图像是图像处理中经典的lena照片。分辨率为512x512的lena图片如下：\n\n![](https://img-blog.csdn.net/20160310080807668?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n一、模式“RGB”转换为其他不同模式\n\n## 模式“1”\n\n模式“1”为二值图像，非黑即白。但是它每个像素用8个bit表示，0表示黑，255表示白。下面我们将lena图像转换为“1”图像。\n\n例子：\n\n```python\n\n    >>>from PIL import Image\n    \n    >>> lena =Image.open(\"D:\\\\Code\\\\Python\\\\test\\\\img\\\\lena.jpg\")\n    \n    >>> lena.mode\n    \n    'RGB'\n    \n    >>> lena.getpixel((0,0))\n    \n    (197, 111, 78)\n    \n    >>> lena_1 = lena.convert(\"1\")\n    \n    >>> lena_1.mode\n    \n    '1'\n    \n    >>> lena_1.size\n    \n    (512, 512)\n    \n    >>>lena_1.getpixel((0,0))\n    \n    255\n    \n    >>> lena_1.getpixel((10,10))\n    \n    255\n    \n    >>>lena_1.getpixel((10,120))\n    \n    0\n    \n    >>>lena_1.getpixel((130,120))\n    \n    255\n\n```\n图像lena_1的模式为“1”，分辨率为512x512，如下：\n\n![](https://img-blog.csdn.net/20160310080929507?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n## 模式“L”\n\n模式“L”为灰色图像，它的每个像素用8个bit表示，0表示黑，255表示白，其他数字表示不同的灰度。在PIL中，从模式“RGB”转换为“L”模式是按照下面的公式转换的：\n\nL = R * 299/1000 + G * 587/1000+ B * 114/1000\n\n下面我们将lena图像转换为“L”图像。\n\n例子：\n\n```python\n\n    >>> from PIL importImage\n    \n    >>> lena = Image.open(\"D:\\\\Code\\\\Python\\\\test\\\\img\\\\lena.jpg\")\n    \n    >>> lena.mode\n    \n    'RGB'\n    \n    >>> lena.getpixel((0,0))\n    \n    (197, 111, 78)\n    \n    >>> lena_L =lena.convert(\"L\")\n    \n    >>> lena_L.mode\n    \n    'L'\n    \n    >>> lena_L.size\n    \n    (512, 512)\n    \n    >>>lena.getpixel((0,0))\n    \n    (197, 111, 78)\n    \n    >>>lena_L.getpixel((0,0))\n    \n    132\n\n```\n对于第一个像素点，原始图像lena为(197, 111, 78)，其转换为灰色值为：\n\n197 *299/1000 + 111 * 587/1000 + 78 * 114/1000 = 132.952，PIL中只取了整数部分，即为132。\n\n转换后的图像lena_L如下：\n\n![](https://img-blog.csdn.net/20160310081028211?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n## 模式“P”\n\n模式“P”为8位彩色图像，它的每个像素用8个bit表示，其对应的彩色值是按照调色板查询出来的。\n\n下面我们使用默认的调色板将lena图像转换为“P”图像。\n\n例子：\n\n```python\n\n    >>> from PIL importImage\n    \n    >>> lena = Image.open(\"D:\\\\Code\\\\Python\\\\test\\\\img\\\\lena.jpg\")\n    \n    >>> lena.mode\n    \n    'RGB'\n    \n    >>> lena.getpixel((0,0))\n    \n    (197, 111, 78)\n    \n    >>> lena_P =lena.convert(\"P\")\n    \n    >>> lena_P.mode\n    \n    'P'\n    \n    >>>lena_P.getpixel((0,0))\n    \n    62\n\n```\n转换后的图像lena_P如下：\n\n![](https://img-blog.csdn.net/20160310081127075?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n## 模式“RGBA”\n\n模式“RGBA”为32位彩色图像，它的每个像素用32个bit表示，其中24bit表示红色、绿色和蓝色三个通道，另外8bit表示alpha通道，即透明通道。\n\n下面我们将模式为“RGB”的lena图像转换为“RGBA”图像。\n\n例子：\n\n```python\n\n    >>> from PIL import Image\n    \n    >>>lena = Image.open(\"D:\\\\Code\\\\Python\\\\test\\\\img\\\\lena.jpg\")\n    \n    >>>lena.mode\n    \n    'RGB'\n    \n    >>>lena.getpixel((0,0))\n    \n    (197,111, 78)\n    \n    >>>lena_rgba = lena.convert(\"RGBA\")\n    \n    >>>lena_rgba.mode\n    \n    'RGBA'\n    \n    >>>lena_rgba.getpixel((0,0))\n    \n    (197,111, 78, 255)\n    \n    >>>lena_rgba.getpixel((0,1))\n    \n    (196,110, 77, 255)\n    \n    >>>lena.getpixel((0,0))\n    \n    (197,111, 78)\n    \n    >>>lena.getpixel((0,1))\n    \n    (196,110, 77)\n\n```\n从实例中可以看到，使用当前这个方式将“RGB”图像转为“RGBA”图像时，alpha通道全部设置为255，即完全不透明。\n\n转换后的图像lena_rgba如下：\n\n![](https://img-blog.csdn.net/20160310081249935?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n## 模式“CMYK”\n\n模式“CMYK”为32位彩色图像，它的每个像素用32个bit表示。模式“CMYK”就是印刷四分色模式，它是彩色印刷时采用的一种套色模式，利用色料的三原色混色原理，加上黑色油墨，共计四种颜色混合叠加，形成所谓“全彩印刷”。\n\n四种标准颜色是：C：Cyan = 青色，又称为‘天蓝色’或是‘湛蓝’M：Magenta = 品红色，又称为‘洋红色’；Y：Yellow = 黄色；K：Key\nPlate(blacK) = 定位套版色（黑色）。\n\n下面我们将模式为“RGB”的lena图像转换为“CMYK”图像。\n\n例子：\n\n```python\n\n    >>>from PIL import Image\n    \n    >>> lena =Image.open(\"D:\\\\Code\\\\Python\\\\test\\\\img\\\\lena.jpg\")\n    \n    >>> lena_cmyk =lena.convert(\"CMYK\")\n    \n    >>> lena_cmyk.mode\n    \n    'CMYK'\n    \n    >>>lena_cmyk.getpixel((0,0))\n    \n    (58, 144, 177, 0)\n    \n    >>> lena_cmyk.getpixel((0,1))\n    \n    (59, 145, 178, 0)\n    \n    >>>lena.getpixel((0,0))\n    \n    (197, 111, 78)\n    \n    >>>lena.getpixel((0,1))\n    \n    (196, 110, 77)\n\n```\n从实例中可以得知PIL中“RGB”转换为“CMYK”的公式如下：\n\nC = 255 - R  \nM = 255 - G  \nY = 255 - B  \nK = 0\n\n由于该转换公式比较简单，转换后的图像颜色有些失真。\n\n转换后的图像lena_cmyk如下：\n\n![](https://img-blog.csdn.net/20160310081334545?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n## 模式“YCbCr”\n\n模式“YCbCr”为24位彩色图像，它的每个像素用24个bit表示。YCbCr其中Y是指亮度分量，Cb指蓝色色度分量，而Cr指红色色度分量。人的肉眼对视频的Y分量更敏感，因此在通过对色度分量进行子采样来减少色度分量后，肉眼将察觉不到的图像质量的变化。\n\n模式“RGB”转换为“YCbCr”的公式如下：\n\nY= 0.257*R+0.504*G+0.098*B+16  \nCb = -0.148*R-0.291*G+0.439*B+128  \nCr = 0.439*R-0.368*G-0.071*B+128\n\n下面我们将模式为“RGB”的lena图像转换为“YCbCr”图像。\n\n例子：\n\n```python\n\n    >>>from PIL import Image\n    \n    >>> lena =Image.open(\"D:\\\\Code\\\\Python\\\\test\\\\img\\\\lena.jpg\")\n    \n    >>> lena_ycbcr =lena.convert(\"YCbCr\")\n    \n    >>>lena_ycbcr.mode\n    \n    'YCbCr'\n    \n    >>>lena_ycbcr.getpixel((0,0))\n    \n    (132, 97, 173)\n    \n    >>>lena.getpixel((0,0))\n    \n    (197, 111, 78)\n\n```\n按照公式，Y = 0.257*197+0.564*111+0.098*78+16= 136.877\n\nCb= -0.148*197-0.291*111+0.439*78+128= 100.785  \nCr = 0.439*197-0.368*111-0.071*78+128 = 168.097\n\n由此可见，PIL中并非按照这个公式进行“RGB”到“YCbCr”的转换。\n\n转换后的图像lena_ycbcr如下：\n\n![](https://img-blog.csdn.net/20160310081415264?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center)\n\n## 模式“I”\n\n模式“I”为32位整型灰色图像，它的每个像素用32个bit表示，0表示黑，255表示白，(0,255)之间的数字表示不同的灰度。在PIL中，从模式“RGB”转换为“I”模式是按照下面的公式转换的：\n\nI = R * 299/1000 + G * 587/1000 + B * 114/1000\n\n下面我们将模式为“RGB”的lena图像转换为“I”图像。\n\n例子：\n\n```python\n\n    >>> from PIL import Image\n    \n    >>>lena = Image.open(\"D:\\\\Code\\\\Python\\\\test\\\\img\\\\lena.jpg\")\n    \n    >>>lena.getpixel((0,0))\n    \n    (197,111, 78)\n    \n    >>>lena.getpixel((0,1))\n    \n    (196,110, 77)\n    \n    >>> lena_I =lena.convert(\"I\")\n    \n    >>> lena_I.mode\n    \n    'I'\n    \n    >>>lena_I.getpixel((0,0))\n    \n    132\n    \n    >>>lena_I.getpixel((0,1))\n    \n    131\n    \n    >>> lena_L =lena.convert(\"L\")\n    \n    >>>lena_L.getpixel((0,0))\n    \n    132\n    \n    >>>lena_L.getpixel((0,1))\n    \n    131\n\n```\n从实验的结果看，模式“I”与模式“L”的结果是完全一样，只是模式“L”的像素是8bit，而模式“I”的像素是32bit。\n\n## 模式“F”\n\n模式“F”为32位浮点灰色图像，它的每个像素用32个bit表示，0表示黑，255表示白，(0,255)之间的数字表示不同的灰度。在PIL中，从模式“RGB”转换为“F”模式是按照下面的公式转换的：\n\nF = R * 299/1000+ G * 587/1000 + B * 114/1000\n\n下面我们将模式为“RGB”的lena图像转换为“F”图像。\n\n例子：\n\n```python\n\n    >>>from PIL import Image\n    \n    >>> lena =Image.open(\"D:\\\\Code\\\\Python\\\\test\\\\img\\\\lena.jpg\")\n    \n    >>>lena.getpixel((0,0))\n    \n    (197, 111, 78)\n    \n    >>>lena.getpixel((0,1))\n    \n    (196, 110, 77)\n    \n    >>> lena_F =lena.convert(\"F\")\n    \n    >>> lena_F.mode\n    \n    'F'\n    \n    >>>lena_F.getpixel((0,0))\n    \n    132.95199584960938\n    \n    >>>lena_F.getpixel((0,1))\n    \n    131.95199584960938\n\n```\n模式“F”与模式“L”的转换公式是一样的，都是RGB转换为灰色值的公式，但模式“F”会保留小数部分，如实验中的数据。\n\n\n\n","slug":"Python图像处理库PIL中图像格式转换（一）","published":1,"updated":"2021-11-06T20:58:57.119Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckw4ars5o001gtyox3famhqks","content":"<p>在数字图像处理中，针对不同的图像格式有其特定的处理算法。所以，在做图像处理之前，我们需要考虑清楚自己要基于哪种格式的图像进行算法设计及其实现。本文基于这个需求，使用python中的图像处理库PIL来实现不同图像格式的转换。</p>\n<p>对于彩色图像，不管其图像格式是PNG，还是BMP，或者JPG，在PIL中，使用Image模块的open()函数打开后，返回的图像对象的模式都是“RGB”。而对于灰度图像，不管其图像格式是PNG，还是BMP，或者JPG，打开后，其模式为“L”。</p>\n<p>通过之前的博客对Image模块的介绍，对于PNG、BMP和JPG彩色图像格式之间的互相转换都可以通过Image模块的open()和save()函数来完成。具体说就是，在打开这些图像时，PIL会将它们解码为三通道的“RGB”图像。用户可以基于这个“RGB”图像，对其进行处理。处理完毕，使用函数save()，可以将处理结果保存成PNG、BMP和JPG中任何格式。这样也就完成了几种格式之间的转换。同理，其他格式的彩色图像也可以通过这种方式完成转换。当然，对于不同格式的灰度图像，也可通过类似途径完成，只是PIL解码后是模式为“L”的图像。</p>\n<p>这里，我想详细介绍一下Image模块的convert()函数，用于不同模式图像之间的转换。</p>\n<p>Convert()函数有三种形式的定义，它们定义形式如下：</p>\n<p>im.convert(mode) ⇒ image</p>\n<p>im.convert(“P”, **options)  ⇒ image</p>\n<p>im.convert(mode, matrix)  ⇒ image</p>\n<p>使用不同的参数，将当前的图像转换为新的模式，并产生新的图像作为返回值。</p>\n<p>通过博客“<a href=\"http://blog.csdn.net/icamera0/article/details/50647465\">Python图像处理库PIL的基本概念介绍</a>”，我们知道PIL中有九种不同模式。分别为1，L，P，RGB，RGBA，CMYK，YCbCr，I，F。</p>\n<p>本文我采用的示例图像是图像处理中经典的lena照片。分辨率为512x512的lena图片如下：</p>\n<p><img src=\"https://img-blog.csdn.net/20160310080807668?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\"></p>\n<p>一、模式“RGB”转换为其他不同模式</p>\n<h2 id=\"模式“1”\"><a href=\"#模式“1”\" class=\"headerlink\" title=\"模式“1”\"></a>模式“1”</h2><p>模式“1”为二值图像，非黑即白。但是它每个像素用8个bit表示，0表示黑，255表示白。下面我们将lena图像转换为“1”图像。</p>\n<p>例子：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">\n<span class=\"token operator\">>></span><span class=\"token operator\">></span><span class=\"token keyword\">from</span> PIL <span class=\"token keyword\">import</span> Image\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> lena <span class=\"token operator\">=</span>Image<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D:\\\\Code\\\\Python\\\\test\\\\img\\\\lena.jpg\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> lena<span class=\"token punctuation\">.</span>mode\n\n<span class=\"token string\">'RGB'</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> lena<span class=\"token punctuation\">.</span>getpixel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token number\">197</span><span class=\"token punctuation\">,</span> <span class=\"token number\">111</span><span class=\"token punctuation\">,</span> <span class=\"token number\">78</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> lena_1 <span class=\"token operator\">=</span> lena<span class=\"token punctuation\">.</span>convert<span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> lena_1<span class=\"token punctuation\">.</span>mode\n\n<span class=\"token string\">'1'</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> lena_1<span class=\"token punctuation\">.</span>size\n\n<span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span> <span class=\"token number\">512</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>lena_1<span class=\"token punctuation\">.</span>getpixel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token number\">255</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> lena_1<span class=\"token punctuation\">.</span>getpixel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token number\">255</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>lena_1<span class=\"token punctuation\">.</span>getpixel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">120</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token number\">0</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>lena_1<span class=\"token punctuation\">.</span>getpixel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">130</span><span class=\"token punctuation\">,</span><span class=\"token number\">120</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token number\">255</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>图像lena_1的模式为“1”，分辨率为512x512，如下：</p>\n<p><img src=\"https://img-blog.csdn.net/20160310080929507?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\"></p>\n<h2 id=\"模式“L”\"><a href=\"#模式“L”\" class=\"headerlink\" title=\"模式“L”\"></a>模式“L”</h2><p>模式“L”为灰色图像，它的每个像素用8个bit表示，0表示黑，255表示白，其他数字表示不同的灰度。在PIL中，从模式“RGB”转换为“L”模式是按照下面的公式转换的：</p>\n<p>L = R * 299/1000 + G * 587/1000+ B * 114/1000</p>\n<p>下面我们将lena图像转换为“L”图像。</p>\n<p>例子：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> PIL importImage\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> lena <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D:\\\\Code\\\\Python\\\\test\\\\img\\\\lena.jpg\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> lena<span class=\"token punctuation\">.</span>mode\n\n<span class=\"token string\">'RGB'</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> lena<span class=\"token punctuation\">.</span>getpixel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token number\">197</span><span class=\"token punctuation\">,</span> <span class=\"token number\">111</span><span class=\"token punctuation\">,</span> <span class=\"token number\">78</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> lena_L <span class=\"token operator\">=</span>lena<span class=\"token punctuation\">.</span>convert<span class=\"token punctuation\">(</span><span class=\"token string\">\"L\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> lena_L<span class=\"token punctuation\">.</span>mode\n\n<span class=\"token string\">'L'</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> lena_L<span class=\"token punctuation\">.</span>size\n\n<span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span> <span class=\"token number\">512</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>lena<span class=\"token punctuation\">.</span>getpixel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token number\">197</span><span class=\"token punctuation\">,</span> <span class=\"token number\">111</span><span class=\"token punctuation\">,</span> <span class=\"token number\">78</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>lena_L<span class=\"token punctuation\">.</span>getpixel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token number\">132</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>对于第一个像素点，原始图像lena为(197, 111, 78)，其转换为灰色值为：</p>\n<p>197 *299/1000 + 111 * 587/1000 + 78 * 114/1000 = 132.952，PIL中只取了整数部分，即为132。</p>\n<p>转换后的图像lena_L如下：</p>\n<p><img src=\"https://img-blog.csdn.net/20160310081028211?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\"></p>\n<h2 id=\"模式“P”\"><a href=\"#模式“P”\" class=\"headerlink\" title=\"模式“P”\"></a>模式“P”</h2><p>模式“P”为8位彩色图像，它的每个像素用8个bit表示，其对应的彩色值是按照调色板查询出来的。</p>\n<p>下面我们使用默认的调色板将lena图像转换为“P”图像。</p>\n<p>例子：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> PIL importImage\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> lena <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D:\\\\Code\\\\Python\\\\test\\\\img\\\\lena.jpg\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> lena<span class=\"token punctuation\">.</span>mode\n\n<span class=\"token string\">'RGB'</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> lena<span class=\"token punctuation\">.</span>getpixel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token number\">197</span><span class=\"token punctuation\">,</span> <span class=\"token number\">111</span><span class=\"token punctuation\">,</span> <span class=\"token number\">78</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> lena_P <span class=\"token operator\">=</span>lena<span class=\"token punctuation\">.</span>convert<span class=\"token punctuation\">(</span><span class=\"token string\">\"P\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> lena_P<span class=\"token punctuation\">.</span>mode\n\n<span class=\"token string\">'P'</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>lena_P<span class=\"token punctuation\">.</span>getpixel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token number\">62</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>转换后的图像lena_P如下：</p>\n<p><img src=\"https://img-blog.csdn.net/20160310081127075?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\"></p>\n<h2 id=\"模式“RGBA”\"><a href=\"#模式“RGBA”\" class=\"headerlink\" title=\"模式“RGBA”\"></a>模式“RGBA”</h2><p>模式“RGBA”为32位彩色图像，它的每个像素用32个bit表示，其中24bit表示红色、绿色和蓝色三个通道，另外8bit表示alpha通道，即透明通道。</p>\n<p>下面我们将模式为“RGB”的lena图像转换为“RGBA”图像。</p>\n<p>例子：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> PIL <span class=\"token keyword\">import</span> Image\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>lena <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D:\\\\Code\\\\Python\\\\test\\\\img\\\\lena.jpg\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>lena<span class=\"token punctuation\">.</span>mode\n\n<span class=\"token string\">'RGB'</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>lena<span class=\"token punctuation\">.</span>getpixel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token number\">197</span><span class=\"token punctuation\">,</span><span class=\"token number\">111</span><span class=\"token punctuation\">,</span> <span class=\"token number\">78</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>lena_rgba <span class=\"token operator\">=</span> lena<span class=\"token punctuation\">.</span>convert<span class=\"token punctuation\">(</span><span class=\"token string\">\"RGBA\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>lena_rgba<span class=\"token punctuation\">.</span>mode\n\n<span class=\"token string\">'RGBA'</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>lena_rgba<span class=\"token punctuation\">.</span>getpixel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token number\">197</span><span class=\"token punctuation\">,</span><span class=\"token number\">111</span><span class=\"token punctuation\">,</span> <span class=\"token number\">78</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>lena_rgba<span class=\"token punctuation\">.</span>getpixel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token number\">196</span><span class=\"token punctuation\">,</span><span class=\"token number\">110</span><span class=\"token punctuation\">,</span> <span class=\"token number\">77</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>lena<span class=\"token punctuation\">.</span>getpixel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token number\">197</span><span class=\"token punctuation\">,</span><span class=\"token number\">111</span><span class=\"token punctuation\">,</span> <span class=\"token number\">78</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>lena<span class=\"token punctuation\">.</span>getpixel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token number\">196</span><span class=\"token punctuation\">,</span><span class=\"token number\">110</span><span class=\"token punctuation\">,</span> <span class=\"token number\">77</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>从实例中可以看到，使用当前这个方式将“RGB”图像转为“RGBA”图像时，alpha通道全部设置为255，即完全不透明。</p>\n<p>转换后的图像lena_rgba如下：</p>\n<p><img src=\"https://img-blog.csdn.net/20160310081249935?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\"></p>\n<h2 id=\"模式“CMYK”\"><a href=\"#模式“CMYK”\" class=\"headerlink\" title=\"模式“CMYK”\"></a>模式“CMYK”</h2><p>模式“CMYK”为32位彩色图像，它的每个像素用32个bit表示。模式“CMYK”就是印刷四分色模式，它是彩色印刷时采用的一种套色模式，利用色料的三原色混色原理，加上黑色油墨，共计四种颜色混合叠加，形成所谓“全彩印刷”。</p>\n<p>四种标准颜色是：C：Cyan = 青色，又称为‘天蓝色’或是‘湛蓝’M：Magenta = 品红色，又称为‘洋红色’；Y：Yellow = 黄色；K：Key<br>Plate(blacK) = 定位套版色（黑色）。</p>\n<p>下面我们将模式为“RGB”的lena图像转换为“CMYK”图像。</p>\n<p>例子：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">\n<span class=\"token operator\">>></span><span class=\"token operator\">></span><span class=\"token keyword\">from</span> PIL <span class=\"token keyword\">import</span> Image\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> lena <span class=\"token operator\">=</span>Image<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D:\\\\Code\\\\Python\\\\test\\\\img\\\\lena.jpg\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> lena_cmyk <span class=\"token operator\">=</span>lena<span class=\"token punctuation\">.</span>convert<span class=\"token punctuation\">(</span><span class=\"token string\">\"CMYK\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> lena_cmyk<span class=\"token punctuation\">.</span>mode\n\n<span class=\"token string\">'CMYK'</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>lena_cmyk<span class=\"token punctuation\">.</span>getpixel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token number\">58</span><span class=\"token punctuation\">,</span> <span class=\"token number\">144</span><span class=\"token punctuation\">,</span> <span class=\"token number\">177</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> lena_cmyk<span class=\"token punctuation\">.</span>getpixel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token number\">59</span><span class=\"token punctuation\">,</span> <span class=\"token number\">145</span><span class=\"token punctuation\">,</span> <span class=\"token number\">178</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>lena<span class=\"token punctuation\">.</span>getpixel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token number\">197</span><span class=\"token punctuation\">,</span> <span class=\"token number\">111</span><span class=\"token punctuation\">,</span> <span class=\"token number\">78</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>lena<span class=\"token punctuation\">.</span>getpixel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token number\">196</span><span class=\"token punctuation\">,</span> <span class=\"token number\">110</span><span class=\"token punctuation\">,</span> <span class=\"token number\">77</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>从实例中可以得知PIL中“RGB”转换为“CMYK”的公式如下：</p>\n<p>C = 255 - R<br>M = 255 - G<br>Y = 255 - B<br>K = 0</p>\n<p>由于该转换公式比较简单，转换后的图像颜色有些失真。</p>\n<p>转换后的图像lena_cmyk如下：</p>\n<p><img src=\"https://img-blog.csdn.net/20160310081334545?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\"></p>\n<h2 id=\"模式“YCbCr”\"><a href=\"#模式“YCbCr”\" class=\"headerlink\" title=\"模式“YCbCr”\"></a>模式“YCbCr”</h2><p>模式“YCbCr”为24位彩色图像，它的每个像素用24个bit表示。YCbCr其中Y是指亮度分量，Cb指蓝色色度分量，而Cr指红色色度分量。人的肉眼对视频的Y分量更敏感，因此在通过对色度分量进行子采样来减少色度分量后，肉眼将察觉不到的图像质量的变化。</p>\n<p>模式“RGB”转换为“YCbCr”的公式如下：</p>\n<p>Y= 0.257<em>R+0.504</em>G+0.098<em>B+16<br>Cb = -0.148</em>R-0.291<em>G+0.439</em>B+128<br>Cr = 0.439<em>R-0.368</em>G-0.071*B+128</p>\n<p>下面我们将模式为“RGB”的lena图像转换为“YCbCr”图像。</p>\n<p>例子：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">\n<span class=\"token operator\">>></span><span class=\"token operator\">></span><span class=\"token keyword\">from</span> PIL <span class=\"token keyword\">import</span> Image\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> lena <span class=\"token operator\">=</span>Image<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D:\\\\Code\\\\Python\\\\test\\\\img\\\\lena.jpg\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> lena_ycbcr <span class=\"token operator\">=</span>lena<span class=\"token punctuation\">.</span>convert<span class=\"token punctuation\">(</span><span class=\"token string\">\"YCbCr\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>lena_ycbcr<span class=\"token punctuation\">.</span>mode\n\n<span class=\"token string\">'YCbCr'</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>lena_ycbcr<span class=\"token punctuation\">.</span>getpixel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token number\">132</span><span class=\"token punctuation\">,</span> <span class=\"token number\">97</span><span class=\"token punctuation\">,</span> <span class=\"token number\">173</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>lena<span class=\"token punctuation\">.</span>getpixel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token number\">197</span><span class=\"token punctuation\">,</span> <span class=\"token number\">111</span><span class=\"token punctuation\">,</span> <span class=\"token number\">78</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>按照公式，Y = 0.257<em>197+0.564</em>111+0.098*78+16= 136.877</p>\n<p>Cb= -0.148<em>197-0.291</em>111+0.439<em>78+128= 100.785<br>Cr = 0.439</em>197-0.368<em>111-0.071</em>78+128 = 168.097</p>\n<p>由此可见，PIL中并非按照这个公式进行“RGB”到“YCbCr”的转换。</p>\n<p>转换后的图像lena_ycbcr如下：</p>\n<p><img src=\"https://img-blog.csdn.net/20160310081415264?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\"></p>\n<h2 id=\"模式“I”\"><a href=\"#模式“I”\" class=\"headerlink\" title=\"模式“I”\"></a>模式“I”</h2><p>模式“I”为32位整型灰色图像，它的每个像素用32个bit表示，0表示黑，255表示白，(0,255)之间的数字表示不同的灰度。在PIL中，从模式“RGB”转换为“I”模式是按照下面的公式转换的：</p>\n<p>I = R * 299/1000 + G * 587/1000 + B * 114/1000</p>\n<p>下面我们将模式为“RGB”的lena图像转换为“I”图像。</p>\n<p>例子：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> PIL <span class=\"token keyword\">import</span> Image\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>lena <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D:\\\\Code\\\\Python\\\\test\\\\img\\\\lena.jpg\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>lena<span class=\"token punctuation\">.</span>getpixel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token number\">197</span><span class=\"token punctuation\">,</span><span class=\"token number\">111</span><span class=\"token punctuation\">,</span> <span class=\"token number\">78</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>lena<span class=\"token punctuation\">.</span>getpixel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token number\">196</span><span class=\"token punctuation\">,</span><span class=\"token number\">110</span><span class=\"token punctuation\">,</span> <span class=\"token number\">77</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> lena_I <span class=\"token operator\">=</span>lena<span class=\"token punctuation\">.</span>convert<span class=\"token punctuation\">(</span><span class=\"token string\">\"I\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> lena_I<span class=\"token punctuation\">.</span>mode\n\n<span class=\"token string\">'I'</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>lena_I<span class=\"token punctuation\">.</span>getpixel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token number\">132</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>lena_I<span class=\"token punctuation\">.</span>getpixel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token number\">131</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> lena_L <span class=\"token operator\">=</span>lena<span class=\"token punctuation\">.</span>convert<span class=\"token punctuation\">(</span><span class=\"token string\">\"L\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>lena_L<span class=\"token punctuation\">.</span>getpixel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token number\">132</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>lena_L<span class=\"token punctuation\">.</span>getpixel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token number\">131</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>从实验的结果看，模式“I”与模式“L”的结果是完全一样，只是模式“L”的像素是8bit，而模式“I”的像素是32bit。</p>\n<h2 id=\"模式“F”\"><a href=\"#模式“F”\" class=\"headerlink\" title=\"模式“F”\"></a>模式“F”</h2><p>模式“F”为32位浮点灰色图像，它的每个像素用32个bit表示，0表示黑，255表示白，(0,255)之间的数字表示不同的灰度。在PIL中，从模式“RGB”转换为“F”模式是按照下面的公式转换的：</p>\n<p>F = R * 299/1000+ G * 587/1000 + B * 114/1000</p>\n<p>下面我们将模式为“RGB”的lena图像转换为“F”图像。</p>\n<p>例子：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">\n<span class=\"token operator\">>></span><span class=\"token operator\">></span><span class=\"token keyword\">from</span> PIL <span class=\"token keyword\">import</span> Image\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> lena <span class=\"token operator\">=</span>Image<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D:\\\\Code\\\\Python\\\\test\\\\img\\\\lena.jpg\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>lena<span class=\"token punctuation\">.</span>getpixel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token number\">197</span><span class=\"token punctuation\">,</span> <span class=\"token number\">111</span><span class=\"token punctuation\">,</span> <span class=\"token number\">78</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>lena<span class=\"token punctuation\">.</span>getpixel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token number\">196</span><span class=\"token punctuation\">,</span> <span class=\"token number\">110</span><span class=\"token punctuation\">,</span> <span class=\"token number\">77</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> lena_F <span class=\"token operator\">=</span>lena<span class=\"token punctuation\">.</span>convert<span class=\"token punctuation\">(</span><span class=\"token string\">\"F\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> lena_F<span class=\"token punctuation\">.</span>mode\n\n<span class=\"token string\">'F'</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>lena_F<span class=\"token punctuation\">.</span>getpixel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token number\">132.95199584960938</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>lena_F<span class=\"token punctuation\">.</span>getpixel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token number\">131.95199584960938</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>模式“F”与模式“L”的转换公式是一样的，都是RGB转换为灰色值的公式，但模式“F”会保留小数部分，如实验中的数据。</p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>在数字图像处理中，针对不同的图像格式有其特定的处理算法。所以，在做图像处理之前，我们需要考虑清楚自己要基于哪种格式的图像进行算法设计及其实现。本文基于这个需求，使用python中的图像处理库PIL来实现不同图像格式的转换。</p>\n<p>对于彩色图像，不管其图像格式是PNG，还是BMP，或者JPG，在PIL中，使用Image模块的open()函数打开后，返回的图像对象的模式都是“RGB”。而对于灰度图像，不管其图像格式是PNG，还是BMP，或者JPG，打开后，其模式为“L”。</p>\n<p>通过之前的博客对Image模块的介绍，对于PNG、BMP和JPG彩色图像格式之间的互相转换都可以通过Image模块的open()和save()函数来完成。具体说就是，在打开这些图像时，PIL会将它们解码为三通道的“RGB”图像。用户可以基于这个“RGB”图像，对其进行处理。处理完毕，使用函数save()，可以将处理结果保存成PNG、BMP和JPG中任何格式。这样也就完成了几种格式之间的转换。同理，其他格式的彩色图像也可以通过这种方式完成转换。当然，对于不同格式的灰度图像，也可通过类似途径完成，只是PIL解码后是模式为“L”的图像。</p>\n<p>这里，我想详细介绍一下Image模块的convert()函数，用于不同模式图像之间的转换。</p>\n<p>Convert()函数有三种形式的定义，它们定义形式如下：</p>\n<p>im.convert(mode) ⇒ image</p>\n<p>im.convert(“P”, **options)  ⇒ image</p>\n<p>im.convert(mode, matrix)  ⇒ image</p>\n<p>使用不同的参数，将当前的图像转换为新的模式，并产生新的图像作为返回值。</p>\n<p>通过博客“<a href=\"http://blog.csdn.net/icamera0/article/details/50647465\">Python图像处理库PIL的基本概念介绍</a>”，我们知道PIL中有九种不同模式。分别为1，L，P，RGB，RGBA，CMYK，YCbCr，I，F。</p>\n<p>本文我采用的示例图像是图像处理中经典的lena照片。分辨率为512x512的lena图片如下：</p>\n<p><img src=\"https://img-blog.csdn.net/20160310080807668?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\"></p>\n<p>一、模式“RGB”转换为其他不同模式</p>\n<h2 id=\"模式“1”\"><a href=\"#模式“1”\" class=\"headerlink\" title=\"模式“1”\"></a>模式“1”</h2><p>模式“1”为二值图像，非黑即白。但是它每个像素用8个bit表示，0表示黑，255表示白。下面我们将lena图像转换为“1”图像。</p>\n<p>例子：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">\n<span class=\"token operator\">>></span><span class=\"token operator\">></span><span class=\"token keyword\">from</span> PIL <span class=\"token keyword\">import</span> Image\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> lena <span class=\"token operator\">=</span>Image<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D:\\\\Code\\\\Python\\\\test\\\\img\\\\lena.jpg\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> lena<span class=\"token punctuation\">.</span>mode\n\n<span class=\"token string\">'RGB'</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> lena<span class=\"token punctuation\">.</span>getpixel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token number\">197</span><span class=\"token punctuation\">,</span> <span class=\"token number\">111</span><span class=\"token punctuation\">,</span> <span class=\"token number\">78</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> lena_1 <span class=\"token operator\">=</span> lena<span class=\"token punctuation\">.</span>convert<span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> lena_1<span class=\"token punctuation\">.</span>mode\n\n<span class=\"token string\">'1'</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> lena_1<span class=\"token punctuation\">.</span>size\n\n<span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span> <span class=\"token number\">512</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>lena_1<span class=\"token punctuation\">.</span>getpixel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token number\">255</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> lena_1<span class=\"token punctuation\">.</span>getpixel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token number\">255</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>lena_1<span class=\"token punctuation\">.</span>getpixel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">120</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token number\">0</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>lena_1<span class=\"token punctuation\">.</span>getpixel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">130</span><span class=\"token punctuation\">,</span><span class=\"token number\">120</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token number\">255</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>图像lena_1的模式为“1”，分辨率为512x512，如下：</p>\n<p><img src=\"https://img-blog.csdn.net/20160310080929507?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\"></p>\n<h2 id=\"模式“L”\"><a href=\"#模式“L”\" class=\"headerlink\" title=\"模式“L”\"></a>模式“L”</h2><p>模式“L”为灰色图像，它的每个像素用8个bit表示，0表示黑，255表示白，其他数字表示不同的灰度。在PIL中，从模式“RGB”转换为“L”模式是按照下面的公式转换的：</p>\n<p>L = R * 299/1000 + G * 587/1000+ B * 114/1000</p>\n<p>下面我们将lena图像转换为“L”图像。</p>\n<p>例子：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> PIL importImage\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> lena <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D:\\\\Code\\\\Python\\\\test\\\\img\\\\lena.jpg\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> lena<span class=\"token punctuation\">.</span>mode\n\n<span class=\"token string\">'RGB'</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> lena<span class=\"token punctuation\">.</span>getpixel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token number\">197</span><span class=\"token punctuation\">,</span> <span class=\"token number\">111</span><span class=\"token punctuation\">,</span> <span class=\"token number\">78</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> lena_L <span class=\"token operator\">=</span>lena<span class=\"token punctuation\">.</span>convert<span class=\"token punctuation\">(</span><span class=\"token string\">\"L\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> lena_L<span class=\"token punctuation\">.</span>mode\n\n<span class=\"token string\">'L'</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> lena_L<span class=\"token punctuation\">.</span>size\n\n<span class=\"token punctuation\">(</span><span class=\"token number\">512</span><span class=\"token punctuation\">,</span> <span class=\"token number\">512</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>lena<span class=\"token punctuation\">.</span>getpixel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token number\">197</span><span class=\"token punctuation\">,</span> <span class=\"token number\">111</span><span class=\"token punctuation\">,</span> <span class=\"token number\">78</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>lena_L<span class=\"token punctuation\">.</span>getpixel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token number\">132</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>对于第一个像素点，原始图像lena为(197, 111, 78)，其转换为灰色值为：</p>\n<p>197 *299/1000 + 111 * 587/1000 + 78 * 114/1000 = 132.952，PIL中只取了整数部分，即为132。</p>\n<p>转换后的图像lena_L如下：</p>\n<p><img src=\"https://img-blog.csdn.net/20160310081028211?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\"></p>\n<h2 id=\"模式“P”\"><a href=\"#模式“P”\" class=\"headerlink\" title=\"模式“P”\"></a>模式“P”</h2><p>模式“P”为8位彩色图像，它的每个像素用8个bit表示，其对应的彩色值是按照调色板查询出来的。</p>\n<p>下面我们使用默认的调色板将lena图像转换为“P”图像。</p>\n<p>例子：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> PIL importImage\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> lena <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D:\\\\Code\\\\Python\\\\test\\\\img\\\\lena.jpg\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> lena<span class=\"token punctuation\">.</span>mode\n\n<span class=\"token string\">'RGB'</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> lena<span class=\"token punctuation\">.</span>getpixel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token number\">197</span><span class=\"token punctuation\">,</span> <span class=\"token number\">111</span><span class=\"token punctuation\">,</span> <span class=\"token number\">78</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> lena_P <span class=\"token operator\">=</span>lena<span class=\"token punctuation\">.</span>convert<span class=\"token punctuation\">(</span><span class=\"token string\">\"P\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> lena_P<span class=\"token punctuation\">.</span>mode\n\n<span class=\"token string\">'P'</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>lena_P<span class=\"token punctuation\">.</span>getpixel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token number\">62</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>转换后的图像lena_P如下：</p>\n<p><img src=\"https://img-blog.csdn.net/20160310081127075?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\"></p>\n<h2 id=\"模式“RGBA”\"><a href=\"#模式“RGBA”\" class=\"headerlink\" title=\"模式“RGBA”\"></a>模式“RGBA”</h2><p>模式“RGBA”为32位彩色图像，它的每个像素用32个bit表示，其中24bit表示红色、绿色和蓝色三个通道，另外8bit表示alpha通道，即透明通道。</p>\n<p>下面我们将模式为“RGB”的lena图像转换为“RGBA”图像。</p>\n<p>例子：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> PIL <span class=\"token keyword\">import</span> Image\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>lena <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D:\\\\Code\\\\Python\\\\test\\\\img\\\\lena.jpg\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>lena<span class=\"token punctuation\">.</span>mode\n\n<span class=\"token string\">'RGB'</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>lena<span class=\"token punctuation\">.</span>getpixel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token number\">197</span><span class=\"token punctuation\">,</span><span class=\"token number\">111</span><span class=\"token punctuation\">,</span> <span class=\"token number\">78</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>lena_rgba <span class=\"token operator\">=</span> lena<span class=\"token punctuation\">.</span>convert<span class=\"token punctuation\">(</span><span class=\"token string\">\"RGBA\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>lena_rgba<span class=\"token punctuation\">.</span>mode\n\n<span class=\"token string\">'RGBA'</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>lena_rgba<span class=\"token punctuation\">.</span>getpixel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token number\">197</span><span class=\"token punctuation\">,</span><span class=\"token number\">111</span><span class=\"token punctuation\">,</span> <span class=\"token number\">78</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>lena_rgba<span class=\"token punctuation\">.</span>getpixel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token number\">196</span><span class=\"token punctuation\">,</span><span class=\"token number\">110</span><span class=\"token punctuation\">,</span> <span class=\"token number\">77</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>lena<span class=\"token punctuation\">.</span>getpixel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token number\">197</span><span class=\"token punctuation\">,</span><span class=\"token number\">111</span><span class=\"token punctuation\">,</span> <span class=\"token number\">78</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>lena<span class=\"token punctuation\">.</span>getpixel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token number\">196</span><span class=\"token punctuation\">,</span><span class=\"token number\">110</span><span class=\"token punctuation\">,</span> <span class=\"token number\">77</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>从实例中可以看到，使用当前这个方式将“RGB”图像转为“RGBA”图像时，alpha通道全部设置为255，即完全不透明。</p>\n<p>转换后的图像lena_rgba如下：</p>\n<p><img src=\"https://img-blog.csdn.net/20160310081249935?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\"></p>\n<h2 id=\"模式“CMYK”\"><a href=\"#模式“CMYK”\" class=\"headerlink\" title=\"模式“CMYK”\"></a>模式“CMYK”</h2><p>模式“CMYK”为32位彩色图像，它的每个像素用32个bit表示。模式“CMYK”就是印刷四分色模式，它是彩色印刷时采用的一种套色模式，利用色料的三原色混色原理，加上黑色油墨，共计四种颜色混合叠加，形成所谓“全彩印刷”。</p>\n<p>四种标准颜色是：C：Cyan = 青色，又称为‘天蓝色’或是‘湛蓝’M：Magenta = 品红色，又称为‘洋红色’；Y：Yellow = 黄色；K：Key<br>Plate(blacK) = 定位套版色（黑色）。</p>\n<p>下面我们将模式为“RGB”的lena图像转换为“CMYK”图像。</p>\n<p>例子：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">\n<span class=\"token operator\">>></span><span class=\"token operator\">></span><span class=\"token keyword\">from</span> PIL <span class=\"token keyword\">import</span> Image\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> lena <span class=\"token operator\">=</span>Image<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D:\\\\Code\\\\Python\\\\test\\\\img\\\\lena.jpg\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> lena_cmyk <span class=\"token operator\">=</span>lena<span class=\"token punctuation\">.</span>convert<span class=\"token punctuation\">(</span><span class=\"token string\">\"CMYK\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> lena_cmyk<span class=\"token punctuation\">.</span>mode\n\n<span class=\"token string\">'CMYK'</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>lena_cmyk<span class=\"token punctuation\">.</span>getpixel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token number\">58</span><span class=\"token punctuation\">,</span> <span class=\"token number\">144</span><span class=\"token punctuation\">,</span> <span class=\"token number\">177</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> lena_cmyk<span class=\"token punctuation\">.</span>getpixel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token number\">59</span><span class=\"token punctuation\">,</span> <span class=\"token number\">145</span><span class=\"token punctuation\">,</span> <span class=\"token number\">178</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>lena<span class=\"token punctuation\">.</span>getpixel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token number\">197</span><span class=\"token punctuation\">,</span> <span class=\"token number\">111</span><span class=\"token punctuation\">,</span> <span class=\"token number\">78</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>lena<span class=\"token punctuation\">.</span>getpixel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token number\">196</span><span class=\"token punctuation\">,</span> <span class=\"token number\">110</span><span class=\"token punctuation\">,</span> <span class=\"token number\">77</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>从实例中可以得知PIL中“RGB”转换为“CMYK”的公式如下：</p>\n<p>C = 255 - R<br>M = 255 - G<br>Y = 255 - B<br>K = 0</p>\n<p>由于该转换公式比较简单，转换后的图像颜色有些失真。</p>\n<p>转换后的图像lena_cmyk如下：</p>\n<p><img src=\"https://img-blog.csdn.net/20160310081334545?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\"></p>\n<h2 id=\"模式“YCbCr”\"><a href=\"#模式“YCbCr”\" class=\"headerlink\" title=\"模式“YCbCr”\"></a>模式“YCbCr”</h2><p>模式“YCbCr”为24位彩色图像，它的每个像素用24个bit表示。YCbCr其中Y是指亮度分量，Cb指蓝色色度分量，而Cr指红色色度分量。人的肉眼对视频的Y分量更敏感，因此在通过对色度分量进行子采样来减少色度分量后，肉眼将察觉不到的图像质量的变化。</p>\n<p>模式“RGB”转换为“YCbCr”的公式如下：</p>\n<p>Y= 0.257<em>R+0.504</em>G+0.098<em>B+16<br>Cb = -0.148</em>R-0.291<em>G+0.439</em>B+128<br>Cr = 0.439<em>R-0.368</em>G-0.071*B+128</p>\n<p>下面我们将模式为“RGB”的lena图像转换为“YCbCr”图像。</p>\n<p>例子：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">\n<span class=\"token operator\">>></span><span class=\"token operator\">></span><span class=\"token keyword\">from</span> PIL <span class=\"token keyword\">import</span> Image\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> lena <span class=\"token operator\">=</span>Image<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D:\\\\Code\\\\Python\\\\test\\\\img\\\\lena.jpg\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> lena_ycbcr <span class=\"token operator\">=</span>lena<span class=\"token punctuation\">.</span>convert<span class=\"token punctuation\">(</span><span class=\"token string\">\"YCbCr\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>lena_ycbcr<span class=\"token punctuation\">.</span>mode\n\n<span class=\"token string\">'YCbCr'</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>lena_ycbcr<span class=\"token punctuation\">.</span>getpixel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token number\">132</span><span class=\"token punctuation\">,</span> <span class=\"token number\">97</span><span class=\"token punctuation\">,</span> <span class=\"token number\">173</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>lena<span class=\"token punctuation\">.</span>getpixel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token number\">197</span><span class=\"token punctuation\">,</span> <span class=\"token number\">111</span><span class=\"token punctuation\">,</span> <span class=\"token number\">78</span><span class=\"token punctuation\">)</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>按照公式，Y = 0.257<em>197+0.564</em>111+0.098*78+16= 136.877</p>\n<p>Cb= -0.148<em>197-0.291</em>111+0.439<em>78+128= 100.785<br>Cr = 0.439</em>197-0.368<em>111-0.071</em>78+128 = 168.097</p>\n<p>由此可见，PIL中并非按照这个公式进行“RGB”到“YCbCr”的转换。</p>\n<p>转换后的图像lena_ycbcr如下：</p>\n<p><img src=\"https://img-blog.csdn.net/20160310081415264?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQv/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center\"></p>\n<h2 id=\"模式“I”\"><a href=\"#模式“I”\" class=\"headerlink\" title=\"模式“I”\"></a>模式“I”</h2><p>模式“I”为32位整型灰色图像，它的每个像素用32个bit表示，0表示黑，255表示白，(0,255)之间的数字表示不同的灰度。在PIL中，从模式“RGB”转换为“I”模式是按照下面的公式转换的：</p>\n<p>I = R * 299/1000 + G * 587/1000 + B * 114/1000</p>\n<p>下面我们将模式为“RGB”的lena图像转换为“I”图像。</p>\n<p>例子：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">from</span> PIL <span class=\"token keyword\">import</span> Image\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>lena <span class=\"token operator\">=</span> Image<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D:\\\\Code\\\\Python\\\\test\\\\img\\\\lena.jpg\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>lena<span class=\"token punctuation\">.</span>getpixel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token number\">197</span><span class=\"token punctuation\">,</span><span class=\"token number\">111</span><span class=\"token punctuation\">,</span> <span class=\"token number\">78</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>lena<span class=\"token punctuation\">.</span>getpixel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token number\">196</span><span class=\"token punctuation\">,</span><span class=\"token number\">110</span><span class=\"token punctuation\">,</span> <span class=\"token number\">77</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> lena_I <span class=\"token operator\">=</span>lena<span class=\"token punctuation\">.</span>convert<span class=\"token punctuation\">(</span><span class=\"token string\">\"I\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> lena_I<span class=\"token punctuation\">.</span>mode\n\n<span class=\"token string\">'I'</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>lena_I<span class=\"token punctuation\">.</span>getpixel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token number\">132</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>lena_I<span class=\"token punctuation\">.</span>getpixel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token number\">131</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> lena_L <span class=\"token operator\">=</span>lena<span class=\"token punctuation\">.</span>convert<span class=\"token punctuation\">(</span><span class=\"token string\">\"L\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>lena_L<span class=\"token punctuation\">.</span>getpixel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token number\">132</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>lena_L<span class=\"token punctuation\">.</span>getpixel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token number\">131</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>从实验的结果看，模式“I”与模式“L”的结果是完全一样，只是模式“L”的像素是8bit，而模式“I”的像素是32bit。</p>\n<h2 id=\"模式“F”\"><a href=\"#模式“F”\" class=\"headerlink\" title=\"模式“F”\"></a>模式“F”</h2><p>模式“F”为32位浮点灰色图像，它的每个像素用32个bit表示，0表示黑，255表示白，(0,255)之间的数字表示不同的灰度。在PIL中，从模式“RGB”转换为“F”模式是按照下面的公式转换的：</p>\n<p>F = R * 299/1000+ G * 587/1000 + B * 114/1000</p>\n<p>下面我们将模式为“RGB”的lena图像转换为“F”图像。</p>\n<p>例子：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">\n<span class=\"token operator\">>></span><span class=\"token operator\">></span><span class=\"token keyword\">from</span> PIL <span class=\"token keyword\">import</span> Image\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> lena <span class=\"token operator\">=</span>Image<span class=\"token punctuation\">.</span><span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"D:\\\\Code\\\\Python\\\\test\\\\img\\\\lena.jpg\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>lena<span class=\"token punctuation\">.</span>getpixel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token number\">197</span><span class=\"token punctuation\">,</span> <span class=\"token number\">111</span><span class=\"token punctuation\">,</span> <span class=\"token number\">78</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>lena<span class=\"token punctuation\">.</span>getpixel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token number\">196</span><span class=\"token punctuation\">,</span> <span class=\"token number\">110</span><span class=\"token punctuation\">,</span> <span class=\"token number\">77</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> lena_F <span class=\"token operator\">=</span>lena<span class=\"token punctuation\">.</span>convert<span class=\"token punctuation\">(</span><span class=\"token string\">\"F\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> lena_F<span class=\"token punctuation\">.</span>mode\n\n<span class=\"token string\">'F'</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>lena_F<span class=\"token punctuation\">.</span>getpixel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token number\">132.95199584960938</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span>lena_F<span class=\"token punctuation\">.</span>getpixel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token number\">131.95199584960938</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>模式“F”与模式“L”的转换公式是一样的，都是RGB转换为灰色值的公式，但模式“F”会保留小数部分，如实验中的数据。</p>\n"},{"title":"Python遍历文件夹的两种方法","author":"Will Holmes","date":"2021-11-06T19:25:32.000Z","_content":"\n\n在处理数据的过程中，经常需要遍历文件夹，如果远程服务器的文件是分布式存储，遍历需要更快的速度。\n\n  1. 一种是通过os.walk()遍历，直接处理文件即可。\n  2. 一种是通过pathlib.Path().rglob()遍历，需要过滤出文件，速度较快。注意glob()不支持递归遍历。\n\n实测pathlib.Path().rglob()方案要快于os.walk()方案。\n\nos.walk的遍历方式，支持筛选后缀和排序：\n\n```python\n\n    def traverse_dir_files(root_dir, ext=None, is_sorted=True):\n        \"\"\"\n        列出文件夹中的文件, 深度遍历\n        :param root_dir: 根目录\n        :param ext: 后缀名\n        :param is_sorted: 是否排序，耗时较长\n        :return: [文件路径列表, 文件名称列表]\n        \"\"\"\n        names_list = []\n        paths_list = []\n        for parent, _, fileNames in os.walk(root_dir):\n            for name in fileNames:\n                if name.startswith('.'):  # 去除隐藏文件\n                    continue\n                if ext:  # 根据后缀名搜索\n                    if name.endswith(tuple(ext)):\n                        names_list.append(name)\n                        paths_list.append(os.path.join(parent, name))\n                else:\n                    names_list.append(name)\n                    paths_list.append(os.path.join(parent, name))\n        if not names_list:  # 文件夹为空\n            return paths_list, names_list\n        if is_sorted:\n            paths_list, names_list = sort_two_list(paths_list, names_list)\n        return paths_list, names_list\n    \n\n```\npathlib.Path().rglob()的遍历方式，也支持筛选后缀和排序：\n\n  * 注意：通过判断是否有后缀名（\".\"），来判断是文件还是文件夹\n  * list()之后再for循环，避免出现Bug\n\n```python\n\n    def traverse_dir_files(root_dir, ext=None, is_sorted=True):\n        \"\"\"\n        列出文件夹中的文件, 深度遍历\n        :param root_dir: 根目录\n        :param ext: 后缀名\n        :param is_sorted: 是否排序，耗时较长\n        :return: [文件路径列表, 文件名称列表]\n        \"\"\"\n        names_list = []\n        paths_list = []\n        for path in list(pathlib.Path(root_dir).rglob(\"*\")):\n            path = str(path)\n            name = path.split(\"/\")[-1]\n            if name.startswith('.') or \".\" not in name:  # 去除隐藏文件\n                continue\n            if ext:  # 根据后缀名搜索\n                if name.endswith(ext):\n                    names_list.append(name)\n                    paths_list.append(path)\n            else:\n                names_list.append(name)\n                paths_list.append(path)\n        if not names_list:  # 文件夹为空\n            return paths_list, names_list\n        if is_sorted:\n            paths_list, names_list = sort_two_list(paths_list, names_list)\n        return paths_list, names_list\n    \n\n```\n参考：\n\n  * [How to use glob() to find files recursively?](https://stackoverflow.com/questions/2186525/how-to-use-glob-to-find-files-recursively)\n\n","source":"_posts/Python遍历文件夹的两种方法.md","raw":"---\ntitle: Python遍历文件夹的两种方法\nauthor: Will Holmes\ncategories: Python\ntags:\n  - Python\n  - 文件管理\ndate: 2021-11-07 03:25:32\n---\n\n\n在处理数据的过程中，经常需要遍历文件夹，如果远程服务器的文件是分布式存储，遍历需要更快的速度。\n\n  1. 一种是通过os.walk()遍历，直接处理文件即可。\n  2. 一种是通过pathlib.Path().rglob()遍历，需要过滤出文件，速度较快。注意glob()不支持递归遍历。\n\n实测pathlib.Path().rglob()方案要快于os.walk()方案。\n\nos.walk的遍历方式，支持筛选后缀和排序：\n\n```python\n\n    def traverse_dir_files(root_dir, ext=None, is_sorted=True):\n        \"\"\"\n        列出文件夹中的文件, 深度遍历\n        :param root_dir: 根目录\n        :param ext: 后缀名\n        :param is_sorted: 是否排序，耗时较长\n        :return: [文件路径列表, 文件名称列表]\n        \"\"\"\n        names_list = []\n        paths_list = []\n        for parent, _, fileNames in os.walk(root_dir):\n            for name in fileNames:\n                if name.startswith('.'):  # 去除隐藏文件\n                    continue\n                if ext:  # 根据后缀名搜索\n                    if name.endswith(tuple(ext)):\n                        names_list.append(name)\n                        paths_list.append(os.path.join(parent, name))\n                else:\n                    names_list.append(name)\n                    paths_list.append(os.path.join(parent, name))\n        if not names_list:  # 文件夹为空\n            return paths_list, names_list\n        if is_sorted:\n            paths_list, names_list = sort_two_list(paths_list, names_list)\n        return paths_list, names_list\n    \n\n```\npathlib.Path().rglob()的遍历方式，也支持筛选后缀和排序：\n\n  * 注意：通过判断是否有后缀名（\".\"），来判断是文件还是文件夹\n  * list()之后再for循环，避免出现Bug\n\n```python\n\n    def traverse_dir_files(root_dir, ext=None, is_sorted=True):\n        \"\"\"\n        列出文件夹中的文件, 深度遍历\n        :param root_dir: 根目录\n        :param ext: 后缀名\n        :param is_sorted: 是否排序，耗时较长\n        :return: [文件路径列表, 文件名称列表]\n        \"\"\"\n        names_list = []\n        paths_list = []\n        for path in list(pathlib.Path(root_dir).rglob(\"*\")):\n            path = str(path)\n            name = path.split(\"/\")[-1]\n            if name.startswith('.') or \".\" not in name:  # 去除隐藏文件\n                continue\n            if ext:  # 根据后缀名搜索\n                if name.endswith(ext):\n                    names_list.append(name)\n                    paths_list.append(path)\n            else:\n                names_list.append(name)\n                paths_list.append(path)\n        if not names_list:  # 文件夹为空\n            return paths_list, names_list\n        if is_sorted:\n            paths_list, names_list = sort_two_list(paths_list, names_list)\n        return paths_list, names_list\n    \n\n```\n参考：\n\n  * [How to use glob() to find files recursively?](https://stackoverflow.com/questions/2186525/how-to-use-glob-to-find-files-recursively)\n\n","slug":"Python遍历文件夹的两种方法","published":1,"updated":"2021-11-06T19:40:02.838Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckw4ars5t001ityoxezkta5vd","content":"<p>在处理数据的过程中，经常需要遍历文件夹，如果远程服务器的文件是分布式存储，遍历需要更快的速度。</p>\n<ol>\n<li>一种是通过os.walk()遍历，直接处理文件即可。</li>\n<li>一种是通过pathlib.Path().rglob()遍历，需要过滤出文件，速度较快。注意glob()不支持递归遍历。</li>\n</ol>\n<p>实测pathlib.Path().rglob()方案要快于os.walk()方案。</p>\n<p>os.walk的遍历方式，支持筛选后缀和排序：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">\n<span class=\"token keyword\">def</span> <span class=\"token function\">traverse_dir_files</span><span class=\"token punctuation\">(</span>root_dir<span class=\"token punctuation\">,</span> ext<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> is_sorted<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    列出文件夹中的文件, 深度遍历\n    :param root_dir: 根目录\n    :param ext: 后缀名\n    :param is_sorted: 是否排序，耗时较长\n    :return: [文件路径列表, 文件名称列表]\n    \"\"\"</span>\n    names_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    paths_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> parent<span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">,</span> fileNames <span class=\"token keyword\">in</span> os<span class=\"token punctuation\">.</span>walk<span class=\"token punctuation\">(</span>root_dir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> name <span class=\"token keyword\">in</span> fileNames<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> name<span class=\"token punctuation\">.</span>startswith<span class=\"token punctuation\">(</span><span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 去除隐藏文件</span>\n                <span class=\"token keyword\">continue</span>\n            <span class=\"token keyword\">if</span> ext<span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 根据后缀名搜索</span>\n                <span class=\"token keyword\">if</span> name<span class=\"token punctuation\">.</span>endswith<span class=\"token punctuation\">(</span><span class=\"token builtin\">tuple</span><span class=\"token punctuation\">(</span>ext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    names_list<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n                    paths_list<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                names_list<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n                paths_list<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> names_list<span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 文件夹为空</span>\n        <span class=\"token keyword\">return</span> paths_list<span class=\"token punctuation\">,</span> names_list\n    <span class=\"token keyword\">if</span> is_sorted<span class=\"token punctuation\">:</span>\n        paths_list<span class=\"token punctuation\">,</span> names_list <span class=\"token operator\">=</span> sort_two_list<span class=\"token punctuation\">(</span>paths_list<span class=\"token punctuation\">,</span> names_list<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> paths_list<span class=\"token punctuation\">,</span> names_list\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>pathlib.Path().rglob()的遍历方式，也支持筛选后缀和排序：</p>\n<ul>\n<li>注意：通过判断是否有后缀名（”.”），来判断是文件还是文件夹</li>\n<li>list()之后再for循环，避免出现Bug</li>\n</ul>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">\n<span class=\"token keyword\">def</span> <span class=\"token function\">traverse_dir_files</span><span class=\"token punctuation\">(</span>root_dir<span class=\"token punctuation\">,</span> ext<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> is_sorted<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    列出文件夹中的文件, 深度遍历\n    :param root_dir: 根目录\n    :param ext: 后缀名\n    :param is_sorted: 是否排序，耗时较长\n    :return: [文件路径列表, 文件名称列表]\n    \"\"\"</span>\n    names_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    paths_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> path <span class=\"token keyword\">in</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>pathlib<span class=\"token punctuation\">.</span>Path<span class=\"token punctuation\">(</span>root_dir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>rglob<span class=\"token punctuation\">(</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        path <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span>\n        name <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">if</span> name<span class=\"token punctuation\">.</span>startswith<span class=\"token punctuation\">(</span><span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> <span class=\"token string\">\".\"</span> <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> name<span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 去除隐藏文件</span>\n            <span class=\"token keyword\">continue</span>\n        <span class=\"token keyword\">if</span> ext<span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 根据后缀名搜索</span>\n            <span class=\"token keyword\">if</span> name<span class=\"token punctuation\">.</span>endswith<span class=\"token punctuation\">(</span>ext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                names_list<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n                paths_list<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            names_list<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n            paths_list<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> names_list<span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 文件夹为空</span>\n        <span class=\"token keyword\">return</span> paths_list<span class=\"token punctuation\">,</span> names_list\n    <span class=\"token keyword\">if</span> is_sorted<span class=\"token punctuation\">:</span>\n        paths_list<span class=\"token punctuation\">,</span> names_list <span class=\"token operator\">=</span> sort_two_list<span class=\"token punctuation\">(</span>paths_list<span class=\"token punctuation\">,</span> names_list<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> paths_list<span class=\"token punctuation\">,</span> names_list\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>参考：</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/2186525/how-to-use-glob-to-find-files-recursively\">How to use glob() to find files recursively?</a></li>\n</ul>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>在处理数据的过程中，经常需要遍历文件夹，如果远程服务器的文件是分布式存储，遍历需要更快的速度。</p>\n<ol>\n<li>一种是通过os.walk()遍历，直接处理文件即可。</li>\n<li>一种是通过pathlib.Path().rglob()遍历，需要过滤出文件，速度较快。注意glob()不支持递归遍历。</li>\n</ol>\n<p>实测pathlib.Path().rglob()方案要快于os.walk()方案。</p>\n<p>os.walk的遍历方式，支持筛选后缀和排序：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">\n<span class=\"token keyword\">def</span> <span class=\"token function\">traverse_dir_files</span><span class=\"token punctuation\">(</span>root_dir<span class=\"token punctuation\">,</span> ext<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> is_sorted<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    列出文件夹中的文件, 深度遍历\n    :param root_dir: 根目录\n    :param ext: 后缀名\n    :param is_sorted: 是否排序，耗时较长\n    :return: [文件路径列表, 文件名称列表]\n    \"\"\"</span>\n    names_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    paths_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> parent<span class=\"token punctuation\">,</span> _<span class=\"token punctuation\">,</span> fileNames <span class=\"token keyword\">in</span> os<span class=\"token punctuation\">.</span>walk<span class=\"token punctuation\">(</span>root_dir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> name <span class=\"token keyword\">in</span> fileNames<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> name<span class=\"token punctuation\">.</span>startswith<span class=\"token punctuation\">(</span><span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 去除隐藏文件</span>\n                <span class=\"token keyword\">continue</span>\n            <span class=\"token keyword\">if</span> ext<span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 根据后缀名搜索</span>\n                <span class=\"token keyword\">if</span> name<span class=\"token punctuation\">.</span>endswith<span class=\"token punctuation\">(</span><span class=\"token builtin\">tuple</span><span class=\"token punctuation\">(</span>ext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    names_list<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n                    paths_list<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                names_list<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n                paths_list<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> names_list<span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 文件夹为空</span>\n        <span class=\"token keyword\">return</span> paths_list<span class=\"token punctuation\">,</span> names_list\n    <span class=\"token keyword\">if</span> is_sorted<span class=\"token punctuation\">:</span>\n        paths_list<span class=\"token punctuation\">,</span> names_list <span class=\"token operator\">=</span> sort_two_list<span class=\"token punctuation\">(</span>paths_list<span class=\"token punctuation\">,</span> names_list<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> paths_list<span class=\"token punctuation\">,</span> names_list\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>pathlib.Path().rglob()的遍历方式，也支持筛选后缀和排序：</p>\n<ul>\n<li>注意：通过判断是否有后缀名（”.”），来判断是文件还是文件夹</li>\n<li>list()之后再for循环，避免出现Bug</li>\n</ul>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">\n<span class=\"token keyword\">def</span> <span class=\"token function\">traverse_dir_files</span><span class=\"token punctuation\">(</span>root_dir<span class=\"token punctuation\">,</span> ext<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> is_sorted<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    列出文件夹中的文件, 深度遍历\n    :param root_dir: 根目录\n    :param ext: 后缀名\n    :param is_sorted: 是否排序，耗时较长\n    :return: [文件路径列表, 文件名称列表]\n    \"\"\"</span>\n    names_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    paths_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> path <span class=\"token keyword\">in</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>pathlib<span class=\"token punctuation\">.</span>Path<span class=\"token punctuation\">(</span>root_dir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>rglob<span class=\"token punctuation\">(</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        path <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span>\n        name <span class=\"token operator\">=</span> path<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">if</span> name<span class=\"token punctuation\">.</span>startswith<span class=\"token punctuation\">(</span><span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">or</span> <span class=\"token string\">\".\"</span> <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> name<span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 去除隐藏文件</span>\n            <span class=\"token keyword\">continue</span>\n        <span class=\"token keyword\">if</span> ext<span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 根据后缀名搜索</span>\n            <span class=\"token keyword\">if</span> name<span class=\"token punctuation\">.</span>endswith<span class=\"token punctuation\">(</span>ext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                names_list<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n                paths_list<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            names_list<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n            paths_list<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> names_list<span class=\"token punctuation\">:</span>  <span class=\"token comment\"># 文件夹为空</span>\n        <span class=\"token keyword\">return</span> paths_list<span class=\"token punctuation\">,</span> names_list\n    <span class=\"token keyword\">if</span> is_sorted<span class=\"token punctuation\">:</span>\n        paths_list<span class=\"token punctuation\">,</span> names_list <span class=\"token operator\">=</span> sort_two_list<span class=\"token punctuation\">(</span>paths_list<span class=\"token punctuation\">,</span> names_list<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> paths_list<span class=\"token punctuation\">,</span> names_list\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>参考：</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/2186525/how-to-use-glob-to-find-files-recursively\">How to use glob() to find files recursively?</a></li>\n</ul>\n"},{"title":"python- 获取 后缀名(扩展名) / 文件名","author":"Will Holmes","date":"2021-11-15T04:43:57.000Z","_content":"\n## method\n使用 `os.path.splitext(file)[0]` 可获得 **文件名** 。   \n 使用 `os.path.splitext(file)[-1]` 可获得以 `.` 开头的 **文件后缀名** 。\n## code\n```python\nimport os\nfile = \"Hello.py\"\n# 获取前缀（文件名称）\nassert os.path.splitext(file)[0] == \"Hello\"\n# 获取后缀（文件类型）\nassert os.path.splitext(file)[-1] == \".py\"\nassert os.path.splitext(file)[-1][1:] == \"py\"\n```\n","source":"_posts/python- 获取 后缀名-扩展名- - 文件名.md","raw":"---\ntitle: python- 获取 后缀名(扩展名) / 文件名\nauthor: Will Holmes\ncategories: Python\ntags:\n  - Python\n  - 文件处理\ndate: 2021-11-15 12:43:57\n---\n\n## method\n使用 `os.path.splitext(file)[0]` 可获得 **文件名** 。   \n 使用 `os.path.splitext(file)[-1]` 可获得以 `.` 开头的 **文件后缀名** 。\n## code\n```python\nimport os\nfile = \"Hello.py\"\n# 获取前缀（文件名称）\nassert os.path.splitext(file)[0] == \"Hello\"\n# 获取后缀（文件类型）\nassert os.path.splitext(file)[-1] == \".py\"\nassert os.path.splitext(file)[-1][1:] == \"py\"\n```\n","slug":"python- 获取 后缀名-扩展名- - 文件名","published":1,"updated":"2021-11-15T04:45:27.635Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckw4ars5v001ktyox1ikcc84l","content":"<h2 id=\"method\"><a href=\"#method\" class=\"headerlink\" title=\"method\"></a>method</h2><p>使用 <code>os.path.splitext(file)[0]</code> 可获得 <strong>文件名</strong> 。<br> 使用 <code>os.path.splitext(file)[-1]</code> 可获得以 <code>.</code> 开头的 <strong>文件后缀名</strong> 。</p>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> os\n<span class=\"token builtin\">file</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello.py\"</span>\n<span class=\"token comment\"># 获取前缀（文件名称）</span>\n<span class=\"token keyword\">assert</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>splitext<span class=\"token punctuation\">(</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"Hello\"</span>\n<span class=\"token comment\"># 获取后缀（文件类型）</span>\n<span class=\"token keyword\">assert</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>splitext<span class=\"token punctuation\">(</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\".py\"</span>\n<span class=\"token keyword\">assert</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>splitext<span class=\"token punctuation\">(</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"py\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"method\"><a href=\"#method\" class=\"headerlink\" title=\"method\"></a>method</h2><p>使用 <code>os.path.splitext(file)[0]</code> 可获得 <strong>文件名</strong> 。<br> 使用 <code>os.path.splitext(file)[-1]</code> 可获得以 <code>.</code> 开头的 <strong>文件后缀名</strong> 。</p>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> os\n<span class=\"token builtin\">file</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello.py\"</span>\n<span class=\"token comment\"># 获取前缀（文件名称）</span>\n<span class=\"token keyword\">assert</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>splitext<span class=\"token punctuation\">(</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"Hello\"</span>\n<span class=\"token comment\"># 获取后缀（文件类型）</span>\n<span class=\"token keyword\">assert</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>splitext<span class=\"token punctuation\">(</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\".py\"</span>\n<span class=\"token keyword\">assert</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>splitext<span class=\"token punctuation\">(</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"py\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"music-tag Python库介绍（英文）","author":"Will Holmes","date":"2021-11-15T04:48:31.000Z","_content":"\n\n## Project description\n### music-tag\nmusic-tag is a library for editing audio metadata with an interface\nthat does not depend on the underlying file format. In other words, editing\nmp3 files shouldn not be any different than flac, m4a, ... This library is\njust a layer on top of [mutagen](https://mutagen.readthedocs.io/en/latest/),\nwhich does all the heavy lifting.\n## Formats\nThe following file formats are actively tested.\n* `aac`\n* `aiff`\n* `dsf`\n* `flac`\n* `m4a`\n* `mp3`\n* `ogg`\n* `opus`\n* `wav`\n* `wv`\n## Keys\nMetadata is available using a dictionary-like interface with the following keys.\nKeys are not case sensitive and can contain arbitrary whitespace, '-', and '\\_'\ncharacters. In other words, `Album Artist`, `album-artist`, and\n`album_artist` are all synonyms for `albumartist`. Also, `disk` is synonymous with `disc`.\n* `album`\n* `albumartist`\n* `artist`\n* `artwork`\n* `comment`\n* `compilation`\n* `composer`\n* `discnumber`\n* `genre`\n* `lyrics`\n* `totaldiscs`\n* `totaltracks`\n* `tracknumber`\n* `tracktitle`\n* `year`\n* `isrc`\n* `#bitrate` (read only)\n* `#codec` (read only)\n* `#length` (read only)\n* `#channels` (read only)\n* `#bitspersample` (read only)\n* `#samplerate` (read only)\n## Examples\n### Reading tags\n```\nimport music\\_tag\nf = music\\_tag.load\\_file(\"music-tag/sample/440Hz.m4a\")\n# dict access returns a MetadataItem\ntitle\\_item = f['title']\n# MetadataItems keep track of multi-valued keys\ntitle\\_item.values  # -> ['440Hz']\n# A single value can be extracted\ntitle\\_item.first  # -> '440Hz'\ntitle\\_item.value  # -> '440Hz'\n# MetadataItems can also be cast to a string\nstr(title\\_item)  # -> '440Hz'\n```\n### Setting tags\n```\n# tags can be set as if the file were a dictionary\nf['title'] = '440Hz'\n# additional values can be appended to the tags\nf.append\\_tag('title', 'subtitle')\ntitle\\_item.values  # -> ['440Hz', 'subtitle']\ntitle\\_item.first  # -> '440Hz'\ntitle\\_item.value  # -> '440Hz, subtitle'\nstr(title\\_item)  # -> '440Hz, subtitle'\n```\n### Removing tags\n```\ndel f['title']\nf.remove\\_tag('title')\n```\n### Album artwork\nAlbum artwork is wrapped in an object that keeps track of some of the\nextra metadata associated with images. Note that some album art functionality\nrequires the Pillow (modern day PIL) library.\n```\n# get artwork\nart = f['artwork']\n# Note: `art` is a MetadataItem. Use ``art.value`` if there is\n# only one image embeded in the file. This will raise a\n# ValueError if there is more than one image. You can also\n# use ``art.first``, or iterate through ``art.values``.\nart.first.mime  # -> 'image/jpeg'\nart.first.width  # -> 1280\nart.first.height  # -> 1280\nart.first.depth  # -> 24\nart.first.data  # -> b'... raw image data ...'\n# set artwork\nwith open('music\\_tag/test/sample/imgA.jpg', 'rb') as img\\_in:\n    f['artwork'] = img\\_in.read()\nwith open('music\\_tag/test/sample/imgB.jpg', 'rb') as img\\_in:\n    f.append\\_tag('artwork', img\\_in.read())\n# Make a thumbnail (requires Pillow)\nart.first.thumbnail([64, 64])  # -> pillow image\nart.first.raw\\_thumbnail([64, 64])  # -> b'... raw thumbnail data ...'\n```\n### Saving tags\n```\n# finally, you can bounce the edits to disk\nf.save()\n```\n### Skipping Type Normalization\nBy default, tags are validated and normalized. For instance, track numbers\nand years are return as integers. Some tag formats store everything as strings\nto enable things like leading zeros in tracknumbers (i.e., track '01'). I think\nthis is ugly, but you can use the file object's `raw` property if you like\nthis kind of thing.\n```\nf.raw['tracknumber'] = '01'\nf.raw['tracknumber'].value  # -> '01'\n```\n## Resolvers\nSome tags may not exist in a file, but there could be enough information to\ndiscern the correct value. For instance, the `album artist` tag is probably\nequal to the `artist` tag, or `\"Various Artists\"` if the `compilation`\nflag is set. Here are some examples,\n```\nf['album artist'] = 'Brian'\nf.resolve('album artist')  # <- 'Brian'\nf['artist'] = 'Brian'\ndel f['album artist']\nf['compilation'] = False\nf.resolve('album artist')  # <- 'Brian'\nf['compilation'] = True\nf.resolve('album artist')  # <- 'Various Artists'\ndel f['compilation']\nf['album artist'] = 'Various Artists'\nf.resolve('compilation')  # <- True\nf['album artist'] = 'Brian'\nf.resolve('compilation')  # <- False\n```\n## Command Line Tool\nThe music\\_tag package can be used as a CLI to get / set tags. Here are some\nexamples,\n### Printing Tags\n```\n# Print tags from all audio files in sample directory\npython -m music\\_tag --print ./sample\n# Print specific tags from all audio files in sample directory \npython -m music\\_tag --print --tags=\"Title : Album\" ./sample\n# Write tags from all audio files in sample directory to a csv file\npython -m music\\_tag --to-csv tags.csv ./sample\n# Write specific tags from all audio files in sample directory to a csv file\npython -m music\\_tag --tags=\"Title : Album\" --to-csv tags.csv ./sample\n```\n### Setting Tags\n```\n# Set a couple tags for multiple files \npython -m music\\_tag --set \"genre:Pop\" --set \"comment:cli test\" \\\n    ./sample/440Hz.aac ./sample/440Hz.flac\n# Write tags from csv file to audio files (assuming file paths in\n# the csv file are relative to the sample directory\npython -m music\\_tag --from-csv tags.csv\n```\n## Project details\n### Project links\n* [Homepage](https://github.com/KristoforMaynard/music-tag)\n* [Download](https://github.com/KristoforMaynard/music-tag/archive/0.4.3.zip)\n","source":"_posts/music-tag · PyPI.md","raw":"---\ntitle: music-tag Python库介绍（英文）\nauthor: Will Holmes\ncategories: Python\ntags:\n\t- 音乐\n\t- Python\n\t- Music\ndate: 2021-11-15 12:48:31\n---\n\n\n## Project description\n### music-tag\nmusic-tag is a library for editing audio metadata with an interface\nthat does not depend on the underlying file format. In other words, editing\nmp3 files shouldn not be any different than flac, m4a, ... This library is\njust a layer on top of [mutagen](https://mutagen.readthedocs.io/en/latest/),\nwhich does all the heavy lifting.\n## Formats\nThe following file formats are actively tested.\n* `aac`\n* `aiff`\n* `dsf`\n* `flac`\n* `m4a`\n* `mp3`\n* `ogg`\n* `opus`\n* `wav`\n* `wv`\n## Keys\nMetadata is available using a dictionary-like interface with the following keys.\nKeys are not case sensitive and can contain arbitrary whitespace, '-', and '\\_'\ncharacters. In other words, `Album Artist`, `album-artist`, and\n`album_artist` are all synonyms for `albumartist`. Also, `disk` is synonymous with `disc`.\n* `album`\n* `albumartist`\n* `artist`\n* `artwork`\n* `comment`\n* `compilation`\n* `composer`\n* `discnumber`\n* `genre`\n* `lyrics`\n* `totaldiscs`\n* `totaltracks`\n* `tracknumber`\n* `tracktitle`\n* `year`\n* `isrc`\n* `#bitrate` (read only)\n* `#codec` (read only)\n* `#length` (read only)\n* `#channels` (read only)\n* `#bitspersample` (read only)\n* `#samplerate` (read only)\n## Examples\n### Reading tags\n```\nimport music\\_tag\nf = music\\_tag.load\\_file(\"music-tag/sample/440Hz.m4a\")\n# dict access returns a MetadataItem\ntitle\\_item = f['title']\n# MetadataItems keep track of multi-valued keys\ntitle\\_item.values  # -> ['440Hz']\n# A single value can be extracted\ntitle\\_item.first  # -> '440Hz'\ntitle\\_item.value  # -> '440Hz'\n# MetadataItems can also be cast to a string\nstr(title\\_item)  # -> '440Hz'\n```\n### Setting tags\n```\n# tags can be set as if the file were a dictionary\nf['title'] = '440Hz'\n# additional values can be appended to the tags\nf.append\\_tag('title', 'subtitle')\ntitle\\_item.values  # -> ['440Hz', 'subtitle']\ntitle\\_item.first  # -> '440Hz'\ntitle\\_item.value  # -> '440Hz, subtitle'\nstr(title\\_item)  # -> '440Hz, subtitle'\n```\n### Removing tags\n```\ndel f['title']\nf.remove\\_tag('title')\n```\n### Album artwork\nAlbum artwork is wrapped in an object that keeps track of some of the\nextra metadata associated with images. Note that some album art functionality\nrequires the Pillow (modern day PIL) library.\n```\n# get artwork\nart = f['artwork']\n# Note: `art` is a MetadataItem. Use ``art.value`` if there is\n# only one image embeded in the file. This will raise a\n# ValueError if there is more than one image. You can also\n# use ``art.first``, or iterate through ``art.values``.\nart.first.mime  # -> 'image/jpeg'\nart.first.width  # -> 1280\nart.first.height  # -> 1280\nart.first.depth  # -> 24\nart.first.data  # -> b'... raw image data ...'\n# set artwork\nwith open('music\\_tag/test/sample/imgA.jpg', 'rb') as img\\_in:\n    f['artwork'] = img\\_in.read()\nwith open('music\\_tag/test/sample/imgB.jpg', 'rb') as img\\_in:\n    f.append\\_tag('artwork', img\\_in.read())\n# Make a thumbnail (requires Pillow)\nart.first.thumbnail([64, 64])  # -> pillow image\nart.first.raw\\_thumbnail([64, 64])  # -> b'... raw thumbnail data ...'\n```\n### Saving tags\n```\n# finally, you can bounce the edits to disk\nf.save()\n```\n### Skipping Type Normalization\nBy default, tags are validated and normalized. For instance, track numbers\nand years are return as integers. Some tag formats store everything as strings\nto enable things like leading zeros in tracknumbers (i.e., track '01'). I think\nthis is ugly, but you can use the file object's `raw` property if you like\nthis kind of thing.\n```\nf.raw['tracknumber'] = '01'\nf.raw['tracknumber'].value  # -> '01'\n```\n## Resolvers\nSome tags may not exist in a file, but there could be enough information to\ndiscern the correct value. For instance, the `album artist` tag is probably\nequal to the `artist` tag, or `\"Various Artists\"` if the `compilation`\nflag is set. Here are some examples,\n```\nf['album artist'] = 'Brian'\nf.resolve('album artist')  # <- 'Brian'\nf['artist'] = 'Brian'\ndel f['album artist']\nf['compilation'] = False\nf.resolve('album artist')  # <- 'Brian'\nf['compilation'] = True\nf.resolve('album artist')  # <- 'Various Artists'\ndel f['compilation']\nf['album artist'] = 'Various Artists'\nf.resolve('compilation')  # <- True\nf['album artist'] = 'Brian'\nf.resolve('compilation')  # <- False\n```\n## Command Line Tool\nThe music\\_tag package can be used as a CLI to get / set tags. Here are some\nexamples,\n### Printing Tags\n```\n# Print tags from all audio files in sample directory\npython -m music\\_tag --print ./sample\n# Print specific tags from all audio files in sample directory \npython -m music\\_tag --print --tags=\"Title : Album\" ./sample\n# Write tags from all audio files in sample directory to a csv file\npython -m music\\_tag --to-csv tags.csv ./sample\n# Write specific tags from all audio files in sample directory to a csv file\npython -m music\\_tag --tags=\"Title : Album\" --to-csv tags.csv ./sample\n```\n### Setting Tags\n```\n# Set a couple tags for multiple files \npython -m music\\_tag --set \"genre:Pop\" --set \"comment:cli test\" \\\n    ./sample/440Hz.aac ./sample/440Hz.flac\n# Write tags from csv file to audio files (assuming file paths in\n# the csv file are relative to the sample directory\npython -m music\\_tag --from-csv tags.csv\n```\n## Project details\n### Project links\n* [Homepage](https://github.com/KristoforMaynard/music-tag)\n* [Download](https://github.com/KristoforMaynard/music-tag/archive/0.4.3.zip)\n","slug":"music-tag · PyPI","published":1,"updated":"2021-11-15T04:53:54.201Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckw4ars5x001ntyox5f7p6bgo","content":"<h2 id=\"Project-description\"><a href=\"#Project-description\" class=\"headerlink\" title=\"Project description\"></a>Project description</h2><h3 id=\"music-tag\"><a href=\"#music-tag\" class=\"headerlink\" title=\"music-tag\"></a>music-tag</h3><p>music-tag is a library for editing audio metadata with an interface<br>that does not depend on the underlying file format. In other words, editing<br>mp3 files shouldn not be any different than flac, m4a, … This library is<br>just a layer on top of <a href=\"https://mutagen.readthedocs.io/en/latest/\">mutagen</a>,<br>which does all the heavy lifting.</p>\n<h2 id=\"Formats\"><a href=\"#Formats\" class=\"headerlink\" title=\"Formats\"></a>Formats</h2><p>The following file formats are actively tested.</p>\n<ul>\n<li><code>aac</code></li>\n<li><code>aiff</code></li>\n<li><code>dsf</code></li>\n<li><code>flac</code></li>\n<li><code>m4a</code></li>\n<li><code>mp3</code></li>\n<li><code>ogg</code></li>\n<li><code>opus</code></li>\n<li><code>wav</code></li>\n<li><code>wv</code><h2 id=\"Keys\"><a href=\"#Keys\" class=\"headerlink\" title=\"Keys\"></a>Keys</h2>Metadata is available using a dictionary-like interface with the following keys.<br>Keys are not case sensitive and can contain arbitrary whitespace, ‘-‘, and ‘_‘<br>characters. In other words, <code>Album Artist</code>, <code>album-artist</code>, and<br><code>album_artist</code> are all synonyms for <code>albumartist</code>. Also, <code>disk</code> is synonymous with <code>disc</code>.</li>\n<li><code>album</code></li>\n<li><code>albumartist</code></li>\n<li><code>artist</code></li>\n<li><code>artwork</code></li>\n<li><code>comment</code></li>\n<li><code>compilation</code></li>\n<li><code>composer</code></li>\n<li><code>discnumber</code></li>\n<li><code>genre</code></li>\n<li><code>lyrics</code></li>\n<li><code>totaldiscs</code></li>\n<li><code>totaltracks</code></li>\n<li><code>tracknumber</code></li>\n<li><code>tracktitle</code></li>\n<li><code>year</code></li>\n<li><code>isrc</code></li>\n<li><code>#bitrate</code> (read only)</li>\n<li><code>#codec</code> (read only)</li>\n<li><code>#length</code> (read only)</li>\n<li><code>#channels</code> (read only)</li>\n<li><code>#bitspersample</code> (read only)</li>\n<li><code>#samplerate</code> (read only)<h2 id=\"Examples\"><a href=\"#Examples\" class=\"headerlink\" title=\"Examples\"></a>Examples</h2><h3 id=\"Reading-tags\"><a href=\"#Reading-tags\" class=\"headerlink\" title=\"Reading tags\"></a>Reading tags</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">import music\\_tag\nf &#x3D; music\\_tag.load\\_file(&quot;music-tag&#x2F;sample&#x2F;440Hz.m4a&quot;)\n# dict access returns a MetadataItem\ntitle\\_item &#x3D; f[&#39;title&#39;]\n# MetadataItems keep track of multi-valued keys\ntitle\\_item.values  # -&gt; [&#39;440Hz&#39;]\n# A single value can be extracted\ntitle\\_item.first  # -&gt; &#39;440Hz&#39;\ntitle\\_item.value  # -&gt; &#39;440Hz&#39;\n# MetadataItems can also be cast to a string\nstr(title\\_item)  # -&gt; &#39;440Hz&#39;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"Setting-tags\"><a href=\"#Setting-tags\" class=\"headerlink\" title=\"Setting tags\"></a>Setting tags</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\"># tags can be set as if the file were a dictionary\nf[&#39;title&#39;] &#x3D; &#39;440Hz&#39;\n# additional values can be appended to the tags\nf.append\\_tag(&#39;title&#39;, &#39;subtitle&#39;)\ntitle\\_item.values  # -&gt; [&#39;440Hz&#39;, &#39;subtitle&#39;]\ntitle\\_item.first  # -&gt; &#39;440Hz&#39;\ntitle\\_item.value  # -&gt; &#39;440Hz, subtitle&#39;\nstr(title\\_item)  # -&gt; &#39;440Hz, subtitle&#39;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"Removing-tags\"><a href=\"#Removing-tags\" class=\"headerlink\" title=\"Removing tags\"></a>Removing tags</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">del f[&#39;title&#39;]\nf.remove\\_tag(&#39;title&#39;)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"Album-artwork\"><a href=\"#Album-artwork\" class=\"headerlink\" title=\"Album artwork\"></a>Album artwork</h3>Album artwork is wrapped in an object that keeps track of some of the<br>extra metadata associated with images. Note that some album art functionality<br>requires the Pillow (modern day PIL) library.<pre class=\"line-numbers language-none\"><code class=\"language-none\"># get artwork\nart &#x3D; f[&#39;artwork&#39;]\n# Note: &#96;art&#96; is a MetadataItem. Use &#96;&#96;art.value&#96;&#96; if there is\n# only one image embeded in the file. This will raise a\n# ValueError if there is more than one image. You can also\n# use &#96;&#96;art.first&#96;&#96;, or iterate through &#96;&#96;art.values&#96;&#96;.\nart.first.mime  # -&gt; &#39;image&#x2F;jpeg&#39;\nart.first.width  # -&gt; 1280\nart.first.height  # -&gt; 1280\nart.first.depth  # -&gt; 24\nart.first.data  # -&gt; b&#39;... raw image data ...&#39;\n# set artwork\nwith open(&#39;music\\_tag&#x2F;test&#x2F;sample&#x2F;imgA.jpg&#39;, &#39;rb&#39;) as img\\_in:\n    f[&#39;artwork&#39;] &#x3D; img\\_in.read()\nwith open(&#39;music\\_tag&#x2F;test&#x2F;sample&#x2F;imgB.jpg&#39;, &#39;rb&#39;) as img\\_in:\n    f.append\\_tag(&#39;artwork&#39;, img\\_in.read())\n# Make a thumbnail (requires Pillow)\nart.first.thumbnail([64, 64])  # -&gt; pillow image\nart.first.raw\\_thumbnail([64, 64])  # -&gt; b&#39;... raw thumbnail data ...&#39;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"Saving-tags\"><a href=\"#Saving-tags\" class=\"headerlink\" title=\"Saving tags\"></a>Saving tags</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\"># finally, you can bounce the edits to disk\nf.save()<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"Skipping-Type-Normalization\"><a href=\"#Skipping-Type-Normalization\" class=\"headerlink\" title=\"Skipping Type Normalization\"></a>Skipping Type Normalization</h3>By default, tags are validated and normalized. For instance, track numbers<br>and years are return as integers. Some tag formats store everything as strings<br>to enable things like leading zeros in tracknumbers (i.e., track ‘01’). I think<br>this is ugly, but you can use the file object’s <code>raw</code> property if you like<br>this kind of thing.<pre class=\"line-numbers language-none\"><code class=\"language-none\">f.raw[&#39;tracknumber&#39;] &#x3D; &#39;01&#39;\nf.raw[&#39;tracknumber&#39;].value  # -&gt; &#39;01&#39;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h2 id=\"Resolvers\"><a href=\"#Resolvers\" class=\"headerlink\" title=\"Resolvers\"></a>Resolvers</h2>Some tags may not exist in a file, but there could be enough information to<br>discern the correct value. For instance, the <code>album artist</code> tag is probably<br>equal to the <code>artist</code> tag, or <code>&quot;Various Artists&quot;</code> if the <code>compilation</code><br>flag is set. Here are some examples,<pre class=\"line-numbers language-none\"><code class=\"language-none\">f[&#39;album artist&#39;] &#x3D; &#39;Brian&#39;\nf.resolve(&#39;album artist&#39;)  # &lt;- &#39;Brian&#39;\nf[&#39;artist&#39;] &#x3D; &#39;Brian&#39;\ndel f[&#39;album artist&#39;]\nf[&#39;compilation&#39;] &#x3D; False\nf.resolve(&#39;album artist&#39;)  # &lt;- &#39;Brian&#39;\nf[&#39;compilation&#39;] &#x3D; True\nf.resolve(&#39;album artist&#39;)  # &lt;- &#39;Various Artists&#39;\ndel f[&#39;compilation&#39;]\nf[&#39;album artist&#39;] &#x3D; &#39;Various Artists&#39;\nf.resolve(&#39;compilation&#39;)  # &lt;- True\nf[&#39;album artist&#39;] &#x3D; &#39;Brian&#39;\nf.resolve(&#39;compilation&#39;)  # &lt;- False<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"Command-Line-Tool\"><a href=\"#Command-Line-Tool\" class=\"headerlink\" title=\"Command Line Tool\"></a>Command Line Tool</h2>The music_tag package can be used as a CLI to get / set tags. Here are some<br>examples,<h3 id=\"Printing-Tags\"><a href=\"#Printing-Tags\" class=\"headerlink\" title=\"Printing Tags\"></a>Printing Tags</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\"># Print tags from all audio files in sample directory\npython -m music\\_tag --print .&#x2F;sample\n# Print specific tags from all audio files in sample directory \npython -m music\\_tag --print --tags&#x3D;&quot;Title : Album&quot; .&#x2F;sample\n# Write tags from all audio files in sample directory to a csv file\npython -m music\\_tag --to-csv tags.csv .&#x2F;sample\n# Write specific tags from all audio files in sample directory to a csv file\npython -m music\\_tag --tags&#x3D;&quot;Title : Album&quot; --to-csv tags.csv .&#x2F;sample<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"Setting-Tags\"><a href=\"#Setting-Tags\" class=\"headerlink\" title=\"Setting Tags\"></a>Setting Tags</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\"># Set a couple tags for multiple files \npython -m music\\_tag --set &quot;genre:Pop&quot; --set &quot;comment:cli test&quot; \\\n    .&#x2F;sample&#x2F;440Hz.aac .&#x2F;sample&#x2F;440Hz.flac\n# Write tags from csv file to audio files (assuming file paths in\n# the csv file are relative to the sample directory\npython -m music\\_tag --from-csv tags.csv<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"Project-details\"><a href=\"#Project-details\" class=\"headerlink\" title=\"Project details\"></a>Project details</h2><h3 id=\"Project-links\"><a href=\"#Project-links\" class=\"headerlink\" title=\"Project links\"></a>Project links</h3></li>\n<li><a href=\"https://github.com/KristoforMaynard/music-tag\">Homepage</a></li>\n<li><a href=\"https://github.com/KristoforMaynard/music-tag/archive/0.4.3.zip\">Download</a></li>\n</ul>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"Project-description\"><a href=\"#Project-description\" class=\"headerlink\" title=\"Project description\"></a>Project description</h2><h3 id=\"music-tag\"><a href=\"#music-tag\" class=\"headerlink\" title=\"music-tag\"></a>music-tag</h3><p>music-tag is a library for editing audio metadata with an interface<br>that does not depend on the underlying file format. In other words, editing<br>mp3 files shouldn not be any different than flac, m4a, … This library is<br>just a layer on top of <a href=\"https://mutagen.readthedocs.io/en/latest/\">mutagen</a>,<br>which does all the heavy lifting.</p>\n<h2 id=\"Formats\"><a href=\"#Formats\" class=\"headerlink\" title=\"Formats\"></a>Formats</h2><p>The following file formats are actively tested.</p>\n<ul>\n<li><code>aac</code></li>\n<li><code>aiff</code></li>\n<li><code>dsf</code></li>\n<li><code>flac</code></li>\n<li><code>m4a</code></li>\n<li><code>mp3</code></li>\n<li><code>ogg</code></li>\n<li><code>opus</code></li>\n<li><code>wav</code></li>\n<li><code>wv</code><h2 id=\"Keys\"><a href=\"#Keys\" class=\"headerlink\" title=\"Keys\"></a>Keys</h2>Metadata is available using a dictionary-like interface with the following keys.<br>Keys are not case sensitive and can contain arbitrary whitespace, ‘-‘, and ‘_‘<br>characters. In other words, <code>Album Artist</code>, <code>album-artist</code>, and<br><code>album_artist</code> are all synonyms for <code>albumartist</code>. Also, <code>disk</code> is synonymous with <code>disc</code>.</li>\n<li><code>album</code></li>\n<li><code>albumartist</code></li>\n<li><code>artist</code></li>\n<li><code>artwork</code></li>\n<li><code>comment</code></li>\n<li><code>compilation</code></li>\n<li><code>composer</code></li>\n<li><code>discnumber</code></li>\n<li><code>genre</code></li>\n<li><code>lyrics</code></li>\n<li><code>totaldiscs</code></li>\n<li><code>totaltracks</code></li>\n<li><code>tracknumber</code></li>\n<li><code>tracktitle</code></li>\n<li><code>year</code></li>\n<li><code>isrc</code></li>\n<li><code>#bitrate</code> (read only)</li>\n<li><code>#codec</code> (read only)</li>\n<li><code>#length</code> (read only)</li>\n<li><code>#channels</code> (read only)</li>\n<li><code>#bitspersample</code> (read only)</li>\n<li><code>#samplerate</code> (read only)<h2 id=\"Examples\"><a href=\"#Examples\" class=\"headerlink\" title=\"Examples\"></a>Examples</h2><h3 id=\"Reading-tags\"><a href=\"#Reading-tags\" class=\"headerlink\" title=\"Reading tags\"></a>Reading tags</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">import music\\_tag\nf &#x3D; music\\_tag.load\\_file(&quot;music-tag&#x2F;sample&#x2F;440Hz.m4a&quot;)\n# dict access returns a MetadataItem\ntitle\\_item &#x3D; f[&#39;title&#39;]\n# MetadataItems keep track of multi-valued keys\ntitle\\_item.values  # -&gt; [&#39;440Hz&#39;]\n# A single value can be extracted\ntitle\\_item.first  # -&gt; &#39;440Hz&#39;\ntitle\\_item.value  # -&gt; &#39;440Hz&#39;\n# MetadataItems can also be cast to a string\nstr(title\\_item)  # -&gt; &#39;440Hz&#39;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"Setting-tags\"><a href=\"#Setting-tags\" class=\"headerlink\" title=\"Setting tags\"></a>Setting tags</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\"># tags can be set as if the file were a dictionary\nf[&#39;title&#39;] &#x3D; &#39;440Hz&#39;\n# additional values can be appended to the tags\nf.append\\_tag(&#39;title&#39;, &#39;subtitle&#39;)\ntitle\\_item.values  # -&gt; [&#39;440Hz&#39;, &#39;subtitle&#39;]\ntitle\\_item.first  # -&gt; &#39;440Hz&#39;\ntitle\\_item.value  # -&gt; &#39;440Hz, subtitle&#39;\nstr(title\\_item)  # -&gt; &#39;440Hz, subtitle&#39;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"Removing-tags\"><a href=\"#Removing-tags\" class=\"headerlink\" title=\"Removing tags\"></a>Removing tags</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\">del f[&#39;title&#39;]\nf.remove\\_tag(&#39;title&#39;)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"Album-artwork\"><a href=\"#Album-artwork\" class=\"headerlink\" title=\"Album artwork\"></a>Album artwork</h3>Album artwork is wrapped in an object that keeps track of some of the<br>extra metadata associated with images. Note that some album art functionality<br>requires the Pillow (modern day PIL) library.<pre class=\"line-numbers language-none\"><code class=\"language-none\"># get artwork\nart &#x3D; f[&#39;artwork&#39;]\n# Note: &#96;art&#96; is a MetadataItem. Use &#96;&#96;art.value&#96;&#96; if there is\n# only one image embeded in the file. This will raise a\n# ValueError if there is more than one image. You can also\n# use &#96;&#96;art.first&#96;&#96;, or iterate through &#96;&#96;art.values&#96;&#96;.\nart.first.mime  # -&gt; &#39;image&#x2F;jpeg&#39;\nart.first.width  # -&gt; 1280\nart.first.height  # -&gt; 1280\nart.first.depth  # -&gt; 24\nart.first.data  # -&gt; b&#39;... raw image data ...&#39;\n# set artwork\nwith open(&#39;music\\_tag&#x2F;test&#x2F;sample&#x2F;imgA.jpg&#39;, &#39;rb&#39;) as img\\_in:\n    f[&#39;artwork&#39;] &#x3D; img\\_in.read()\nwith open(&#39;music\\_tag&#x2F;test&#x2F;sample&#x2F;imgB.jpg&#39;, &#39;rb&#39;) as img\\_in:\n    f.append\\_tag(&#39;artwork&#39;, img\\_in.read())\n# Make a thumbnail (requires Pillow)\nart.first.thumbnail([64, 64])  # -&gt; pillow image\nart.first.raw\\_thumbnail([64, 64])  # -&gt; b&#39;... raw thumbnail data ...&#39;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"Saving-tags\"><a href=\"#Saving-tags\" class=\"headerlink\" title=\"Saving tags\"></a>Saving tags</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\"># finally, you can bounce the edits to disk\nf.save()<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h3 id=\"Skipping-Type-Normalization\"><a href=\"#Skipping-Type-Normalization\" class=\"headerlink\" title=\"Skipping Type Normalization\"></a>Skipping Type Normalization</h3>By default, tags are validated and normalized. For instance, track numbers<br>and years are return as integers. Some tag formats store everything as strings<br>to enable things like leading zeros in tracknumbers (i.e., track ‘01’). I think<br>this is ugly, but you can use the file object’s <code>raw</code> property if you like<br>this kind of thing.<pre class=\"line-numbers language-none\"><code class=\"language-none\">f.raw[&#39;tracknumber&#39;] &#x3D; &#39;01&#39;\nf.raw[&#39;tracknumber&#39;].value  # -&gt; &#39;01&#39;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h2 id=\"Resolvers\"><a href=\"#Resolvers\" class=\"headerlink\" title=\"Resolvers\"></a>Resolvers</h2>Some tags may not exist in a file, but there could be enough information to<br>discern the correct value. For instance, the <code>album artist</code> tag is probably<br>equal to the <code>artist</code> tag, or <code>&quot;Various Artists&quot;</code> if the <code>compilation</code><br>flag is set. Here are some examples,<pre class=\"line-numbers language-none\"><code class=\"language-none\">f[&#39;album artist&#39;] &#x3D; &#39;Brian&#39;\nf.resolve(&#39;album artist&#39;)  # &lt;- &#39;Brian&#39;\nf[&#39;artist&#39;] &#x3D; &#39;Brian&#39;\ndel f[&#39;album artist&#39;]\nf[&#39;compilation&#39;] &#x3D; False\nf.resolve(&#39;album artist&#39;)  # &lt;- &#39;Brian&#39;\nf[&#39;compilation&#39;] &#x3D; True\nf.resolve(&#39;album artist&#39;)  # &lt;- &#39;Various Artists&#39;\ndel f[&#39;compilation&#39;]\nf[&#39;album artist&#39;] &#x3D; &#39;Various Artists&#39;\nf.resolve(&#39;compilation&#39;)  # &lt;- True\nf[&#39;album artist&#39;] &#x3D; &#39;Brian&#39;\nf.resolve(&#39;compilation&#39;)  # &lt;- False<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"Command-Line-Tool\"><a href=\"#Command-Line-Tool\" class=\"headerlink\" title=\"Command Line Tool\"></a>Command Line Tool</h2>The music_tag package can be used as a CLI to get / set tags. Here are some<br>examples,<h3 id=\"Printing-Tags\"><a href=\"#Printing-Tags\" class=\"headerlink\" title=\"Printing Tags\"></a>Printing Tags</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\"># Print tags from all audio files in sample directory\npython -m music\\_tag --print .&#x2F;sample\n# Print specific tags from all audio files in sample directory \npython -m music\\_tag --print --tags&#x3D;&quot;Title : Album&quot; .&#x2F;sample\n# Write tags from all audio files in sample directory to a csv file\npython -m music\\_tag --to-csv tags.csv .&#x2F;sample\n# Write specific tags from all audio files in sample directory to a csv file\npython -m music\\_tag --tags&#x3D;&quot;Title : Album&quot; --to-csv tags.csv .&#x2F;sample<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"Setting-Tags\"><a href=\"#Setting-Tags\" class=\"headerlink\" title=\"Setting Tags\"></a>Setting Tags</h3><pre class=\"line-numbers language-none\"><code class=\"language-none\"># Set a couple tags for multiple files \npython -m music\\_tag --set &quot;genre:Pop&quot; --set &quot;comment:cli test&quot; \\\n    .&#x2F;sample&#x2F;440Hz.aac .&#x2F;sample&#x2F;440Hz.flac\n# Write tags from csv file to audio files (assuming file paths in\n# the csv file are relative to the sample directory\npython -m music\\_tag --from-csv tags.csv<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"Project-details\"><a href=\"#Project-details\" class=\"headerlink\" title=\"Project details\"></a>Project details</h2><h3 id=\"Project-links\"><a href=\"#Project-links\" class=\"headerlink\" title=\"Project links\"></a>Project links</h3></li>\n<li><a href=\"https://github.com/KristoforMaynard/music-tag\">Homepage</a></li>\n<li><a href=\"https://github.com/KristoforMaynard/music-tag/archive/0.4.3.zip\">Download</a></li>\n</ul>\n"},{"title":"python 把\\u开头的unicode转中文","author":"Will Holmes","date":"2021-10-17T14:53:04.000Z","_content":"> python3 把\\u开头的unicode转中文\n\n## python3 \n```python \n  i.encode('utf-8').decode('unicode_escape')  #i='\\u751F\\u5316\\u5371\\u673A'\n```\n\n## python2 \n```python \ni.encode('utf-8').decode('unicode_escape')  #i='\\u751F\\u5316\\u5371\\u673A'\ni.decode('unicode-escape')\n```\n\n总结 unicode_escape可看作Unicode的反向编码，属于unicode存储到文本的过程中另一种存储方式\n\n## 引用\n链接：[https://www.jianshu.com/p/541b62a7d4e5](https://www.jianshu.com/p/541b62a7d4e5)\n","source":"_posts/python-把-u开头的unicode转中文.md","raw":"---\ntitle: python 把\\u开头的unicode转中文\nauthor: Will Holmes\ncategories: Python\ntags:\n  - Python\n  - unicode\ndate: 2021-10-17 22:53:04\n---\n> python3 把\\u开头的unicode转中文\n\n## python3 \n```python \n  i.encode('utf-8').decode('unicode_escape')  #i='\\u751F\\u5316\\u5371\\u673A'\n```\n\n## python2 \n```python \ni.encode('utf-8').decode('unicode_escape')  #i='\\u751F\\u5316\\u5371\\u673A'\ni.decode('unicode-escape')\n```\n\n总结 unicode_escape可看作Unicode的反向编码，属于unicode存储到文本的过程中另一种存储方式\n\n## 引用\n链接：[https://www.jianshu.com/p/541b62a7d4e5](https://www.jianshu.com/p/541b62a7d4e5)\n","slug":"python-把-u开头的unicode转中文","published":1,"updated":"2021-10-17T15:00:28.778Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckw4ars5z001otyox0f402ntr","content":"<blockquote>\n<p>python3 把\\u开头的unicode转中文</p>\n</blockquote>\n<h2 id=\"python3\"><a href=\"#python3\" class=\"headerlink\" title=\"python3\"></a>python3</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">i<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'unicode_escape'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#i='\\u751F\\u5316\\u5371\\u673A'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"python2\"><a href=\"#python2\" class=\"headerlink\" title=\"python2\"></a>python2</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">i<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'unicode_escape'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#i='\\u751F\\u5316\\u5371\\u673A'</span>\ni<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'unicode-escape'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>总结 unicode_escape可看作Unicode的反向编码，属于unicode存储到文本的过程中另一种存储方式</p>\n<h2 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h2><p>链接：<a href=\"https://www.jianshu.com/p/541b62a7d4e5\">https://www.jianshu.com/p/541b62a7d4e5</a></p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<blockquote>\n<p>python3 把\\u开头的unicode转中文</p>\n</blockquote>\n<h2 id=\"python3\"><a href=\"#python3\" class=\"headerlink\" title=\"python3\"></a>python3</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">i<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'unicode_escape'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#i='\\u751F\\u5316\\u5371\\u673A'</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"python2\"><a href=\"#python2\" class=\"headerlink\" title=\"python2\"></a>python2</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">i<span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'unicode_escape'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">#i='\\u751F\\u5316\\u5371\\u673A'</span>\ni<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'unicode-escape'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>总结 unicode_escape可看作Unicode的反向编码，属于unicode存储到文本的过程中另一种存储方式</p>\n<h2 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h2><p>链接：<a href=\"https://www.jianshu.com/p/541b62a7d4e5\">https://www.jianshu.com/p/541b62a7d4e5</a></p>\n"},{"title":"【Python】类对象自动生成get,set方法","author":"Will Holmes","date":"2021-11-06T19:42:24.000Z","_content":"\n\n代码\n\n```python\n\n    class Student:\n        def __init__(self):\n            self.name = None\n            self.age = None\n    \n    if __name__ == '__main__':\n        student = Student()\n        print(student.__dict__)\n        for k in student.__dict__:\n            print(\"def set_\" + k + \"(self,\" + k + \"):\")\n            print(\"\\tself.\" + k, \"=\" + k)\n            print(\"def get_\" + k + \"(self):\")\n            print(\"\\treturn self.\" + k)\n    \n\n```\n输出结果：\n\n```python\n\n    {'name': None, 'age': None}\n    def set_name(self,name):\n    \tself.name =name\n    def get_name(self):\n    \treturn self.name\n    def set_age(self,age):\n    \tself.age =age\n    def get_age(self):\n    \treturn self.age\n    \n\n```\n将get,set方法赋值粘贴到类方法\n\n**将字典转化为对象**\n\n```python\n\n    def dict_to_obj(dictObject: dict, obj):\n        for k,v in dictObject.items():\n            obj.__dict__[k] = v\n        return obj\n    \n    \n    if __name__ == '__main__':\n        d = {\"id\":\"123\", \"name\":\"class\", \"age\":\"18\"}\n        stu: Student = dict_to_obj(d, Student())\n        print(stu.id)\n        print(stu.age)\n        print(stu.name)\n        print(stu.get_id())\n        print(stu.get_name())\n        print(stu.get_age())\n    \n\n```\n工具类\n\n```python\n\n    def dict_to_str(dict_object: dict, ensure_ascii=False):\n        return json.dumps(dict_object, ensure_ascii=ensure_ascii)\n    \n    def str_to_dict(str_object: str):\n        dic = json.loads(str_object)\n        return dic\n    \n    def object_to_json_string(self, ensure_ascii=False):\n        return json.dumps(self, default=lambda o: o.__dict__, ensure_ascii=ensure_ascii)\n    \n    \n\n```\n","source":"_posts/【Python】类对象自动生成get,set方法.md","raw":"---\ntitle: 【Python】类对象自动生成get,set方法\nauthor: Will Holmes\ncategories: Python\ntags:\n  - Python\n  - 面向对象\ndate: 2021-11-07 03:42:24\n---\n\n\n代码\n\n```python\n\n    class Student:\n        def __init__(self):\n            self.name = None\n            self.age = None\n    \n    if __name__ == '__main__':\n        student = Student()\n        print(student.__dict__)\n        for k in student.__dict__:\n            print(\"def set_\" + k + \"(self,\" + k + \"):\")\n            print(\"\\tself.\" + k, \"=\" + k)\n            print(\"def get_\" + k + \"(self):\")\n            print(\"\\treturn self.\" + k)\n    \n\n```\n输出结果：\n\n```python\n\n    {'name': None, 'age': None}\n    def set_name(self,name):\n    \tself.name =name\n    def get_name(self):\n    \treturn self.name\n    def set_age(self,age):\n    \tself.age =age\n    def get_age(self):\n    \treturn self.age\n    \n\n```\n将get,set方法赋值粘贴到类方法\n\n**将字典转化为对象**\n\n```python\n\n    def dict_to_obj(dictObject: dict, obj):\n        for k,v in dictObject.items():\n            obj.__dict__[k] = v\n        return obj\n    \n    \n    if __name__ == '__main__':\n        d = {\"id\":\"123\", \"name\":\"class\", \"age\":\"18\"}\n        stu: Student = dict_to_obj(d, Student())\n        print(stu.id)\n        print(stu.age)\n        print(stu.name)\n        print(stu.get_id())\n        print(stu.get_name())\n        print(stu.get_age())\n    \n\n```\n工具类\n\n```python\n\n    def dict_to_str(dict_object: dict, ensure_ascii=False):\n        return json.dumps(dict_object, ensure_ascii=ensure_ascii)\n    \n    def str_to_dict(str_object: str):\n        dic = json.loads(str_object)\n        return dic\n    \n    def object_to_json_string(self, ensure_ascii=False):\n        return json.dumps(self, default=lambda o: o.__dict__, ensure_ascii=ensure_ascii)\n    \n    \n\n```\n","slug":"【Python】类对象自动生成get,set方法","published":1,"updated":"2021-11-06T19:43:17.261Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckw4ars61001styox67hxbxzl","content":"<p>代码</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n        self<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    student <span class=\"token operator\">=</span> Student<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">.</span>__dict__<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> k <span class=\"token keyword\">in</span> student<span class=\"token punctuation\">.</span>__dict__<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"def set_\"</span> <span class=\"token operator\">+</span> k <span class=\"token operator\">+</span> <span class=\"token string\">\"(self,\"</span> <span class=\"token operator\">+</span> k <span class=\"token operator\">+</span> <span class=\"token string\">\"):\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\tself.\"</span> <span class=\"token operator\">+</span> k<span class=\"token punctuation\">,</span> <span class=\"token string\">\"=\"</span> <span class=\"token operator\">+</span> k<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"def get_\"</span> <span class=\"token operator\">+</span> k <span class=\"token operator\">+</span> <span class=\"token string\">\"(self):\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\treturn self.\"</span> <span class=\"token operator\">+</span> k<span class=\"token punctuation\">)</span>\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>输出结果：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">\n<span class=\"token punctuation\">&#123;</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'age'</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">set_name</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\tself<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span>name\n<span class=\"token keyword\">def</span> <span class=\"token function\">get_name</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>name\n<span class=\"token keyword\">def</span> <span class=\"token function\">set_age</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\tself<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span>age\n<span class=\"token keyword\">def</span> <span class=\"token function\">get_age</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>age\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>将get,set方法赋值粘贴到类方法</p>\n<p><strong>将字典转化为对象</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">\n<span class=\"token keyword\">def</span> <span class=\"token function\">dict_to_obj</span><span class=\"token punctuation\">(</span>dictObject<span class=\"token punctuation\">:</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span>v <span class=\"token keyword\">in</span> dictObject<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        obj<span class=\"token punctuation\">.</span>__dict__<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v\n    <span class=\"token keyword\">return</span> obj\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    d <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"123\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"class\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"age\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"18\"</span><span class=\"token punctuation\">&#125;</span>\n    stu<span class=\"token punctuation\">:</span> Student <span class=\"token operator\">=</span> dict_to_obj<span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">,</span> Student<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>stu<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>stu<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>stu<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>stu<span class=\"token punctuation\">.</span>get_id<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>stu<span class=\"token punctuation\">.</span>get_name<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>stu<span class=\"token punctuation\">.</span>get_age<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>工具类</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">\n<span class=\"token keyword\">def</span> <span class=\"token function\">dict_to_str</span><span class=\"token punctuation\">(</span>dict_object<span class=\"token punctuation\">:</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">,</span> ensure_ascii<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> json<span class=\"token punctuation\">.</span>dumps<span class=\"token punctuation\">(</span>dict_object<span class=\"token punctuation\">,</span> ensure_ascii<span class=\"token operator\">=</span>ensure_ascii<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">str_to_dict</span><span class=\"token punctuation\">(</span>str_object<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    dic <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>str_object<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> dic\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">object_to_json_string</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> ensure_ascii<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> json<span class=\"token punctuation\">.</span>dumps<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token keyword\">lambda</span> o<span class=\"token punctuation\">:</span> o<span class=\"token punctuation\">.</span>__dict__<span class=\"token punctuation\">,</span> ensure_ascii<span class=\"token operator\">=</span>ensure_ascii<span class=\"token punctuation\">)</span>\n\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<p>代码</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n        self<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    student <span class=\"token operator\">=</span> Student<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">.</span>__dict__<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> k <span class=\"token keyword\">in</span> student<span class=\"token punctuation\">.</span>__dict__<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"def set_\"</span> <span class=\"token operator\">+</span> k <span class=\"token operator\">+</span> <span class=\"token string\">\"(self,\"</span> <span class=\"token operator\">+</span> k <span class=\"token operator\">+</span> <span class=\"token string\">\"):\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\tself.\"</span> <span class=\"token operator\">+</span> k<span class=\"token punctuation\">,</span> <span class=\"token string\">\"=\"</span> <span class=\"token operator\">+</span> k<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"def get_\"</span> <span class=\"token operator\">+</span> k <span class=\"token operator\">+</span> <span class=\"token string\">\"(self):\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\treturn self.\"</span> <span class=\"token operator\">+</span> k<span class=\"token punctuation\">)</span>\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>输出结果：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">\n<span class=\"token punctuation\">&#123;</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'age'</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">set_name</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\tself<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span>name\n<span class=\"token keyword\">def</span> <span class=\"token function\">get_name</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>name\n<span class=\"token keyword\">def</span> <span class=\"token function\">set_age</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\tself<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span>age\n<span class=\"token keyword\">def</span> <span class=\"token function\">get_age</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>age\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>将get,set方法赋值粘贴到类方法</p>\n<p><strong>将字典转化为对象</strong></p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">\n<span class=\"token keyword\">def</span> <span class=\"token function\">dict_to_obj</span><span class=\"token punctuation\">(</span>dictObject<span class=\"token punctuation\">:</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span>v <span class=\"token keyword\">in</span> dictObject<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        obj<span class=\"token punctuation\">.</span>__dict__<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v\n    <span class=\"token keyword\">return</span> obj\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    d <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"123\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"class\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"age\"</span><span class=\"token punctuation\">:</span><span class=\"token string\">\"18\"</span><span class=\"token punctuation\">&#125;</span>\n    stu<span class=\"token punctuation\">:</span> Student <span class=\"token operator\">=</span> dict_to_obj<span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">,</span> Student<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>stu<span class=\"token punctuation\">.</span><span class=\"token builtin\">id</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>stu<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>stu<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>stu<span class=\"token punctuation\">.</span>get_id<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>stu<span class=\"token punctuation\">.</span>get_name<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>stu<span class=\"token punctuation\">.</span>get_age<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>工具类</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">\n<span class=\"token keyword\">def</span> <span class=\"token function\">dict_to_str</span><span class=\"token punctuation\">(</span>dict_object<span class=\"token punctuation\">:</span> <span class=\"token builtin\">dict</span><span class=\"token punctuation\">,</span> ensure_ascii<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> json<span class=\"token punctuation\">.</span>dumps<span class=\"token punctuation\">(</span>dict_object<span class=\"token punctuation\">,</span> ensure_ascii<span class=\"token operator\">=</span>ensure_ascii<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">str_to_dict</span><span class=\"token punctuation\">(</span>str_object<span class=\"token punctuation\">:</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    dic <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>str_object<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> dic\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">object_to_json_string</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> ensure_ascii<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> json<span class=\"token punctuation\">.</span>dumps<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token keyword\">lambda</span> o<span class=\"token punctuation\">:</span> o<span class=\"token punctuation\">.</span>__dict__<span class=\"token punctuation\">,</span> ensure_ascii<span class=\"token operator\">=</span>ensure_ascii<span class=\"token punctuation\">)</span>\n\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"免费好用的『电子书』下载网站分享","date":"2021-10-02T15:19:59.000Z","author":"小伟","_content":"\n\n## 『01』书单 \n- 网址： https://pan.shudan.vip\n- 简介：它是一个书籍搜索引擎，搜索后直接获取书籍的下载链接，操作简单，界面舒服，支持EPUB、MOBI、AZW3、PDF等格式。 \n- 是否需要注册登录：否 \n- 是否免费：是 \n\n## 『02』鸠摩搜索\n- 网址： https://www.jiumodiary.com/ \n- 简介：搜索框内进行搜索，直接获取书籍的下载链接，操作简单，界面舒服，支持text、EPUB 、MOBI 、、PDF、AZW等格式。 \n- 是否需要注册登录：否 \n- 是否免费：是 \n  \n## 『03』伴读 \n- 网址：https://www.bandubook.com/\n- 简介：非常简介的搜索界面，不过最好有一个百度网盘账号方便下载。\n- 是否需要注册登录：否 \n- 是否免费：是 ","source":"_posts/免费好用的『电子书』下载网站分享.md","raw":"---\ntitle: 免费好用的『电子书』下载网站分享\ndate: 2021-10-02 23:19:59\nauthor: 小伟\ncategories: 网站推荐\ntags:\n  - 电子书\n  - 网站推荐\n---\n\n\n## 『01』书单 \n- 网址： https://pan.shudan.vip\n- 简介：它是一个书籍搜索引擎，搜索后直接获取书籍的下载链接，操作简单，界面舒服，支持EPUB、MOBI、AZW3、PDF等格式。 \n- 是否需要注册登录：否 \n- 是否免费：是 \n\n## 『02』鸠摩搜索\n- 网址： https://www.jiumodiary.com/ \n- 简介：搜索框内进行搜索，直接获取书籍的下载链接，操作简单，界面舒服，支持text、EPUB 、MOBI 、、PDF、AZW等格式。 \n- 是否需要注册登录：否 \n- 是否免费：是 \n  \n## 『03』伴读 \n- 网址：https://www.bandubook.com/\n- 简介：非常简介的搜索界面，不过最好有一个百度网盘账号方便下载。\n- 是否需要注册登录：否 \n- 是否免费：是 ","slug":"免费好用的『电子书』下载网站分享","published":1,"updated":"2021-10-10T09:11:57.256Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckw4ars63001vtyoxaavu94ji","content":"<h2 id=\"『01』书单\"><a href=\"#『01』书单\" class=\"headerlink\" title=\"『01』书单\"></a>『01』书单</h2><ul>\n<li>网址： <a href=\"https://pan.shudan.vip/\">https://pan.shudan.vip</a></li>\n<li>简介：它是一个书籍搜索引擎，搜索后直接获取书籍的下载链接，操作简单，界面舒服，支持EPUB、MOBI、AZW3、PDF等格式。 </li>\n<li>是否需要注册登录：否 </li>\n<li>是否免费：是 </li>\n</ul>\n<h2 id=\"『02』鸠摩搜索\"><a href=\"#『02』鸠摩搜索\" class=\"headerlink\" title=\"『02』鸠摩搜索\"></a>『02』鸠摩搜索</h2><ul>\n<li>网址： <a href=\"https://www.jiumodiary.com/\">https://www.jiumodiary.com/</a> </li>\n<li>简介：搜索框内进行搜索，直接获取书籍的下载链接，操作简单，界面舒服，支持text、EPUB 、MOBI 、、PDF、AZW等格式。 </li>\n<li>是否需要注册登录：否 </li>\n<li>是否免费：是 </li>\n</ul>\n<h2 id=\"『03』伴读\"><a href=\"#『03』伴读\" class=\"headerlink\" title=\"『03』伴读\"></a>『03』伴读</h2><ul>\n<li>网址：<a href=\"https://www.bandubook.com/\">https://www.bandubook.com/</a></li>\n<li>简介：非常简介的搜索界面，不过最好有一个百度网盘账号方便下载。</li>\n<li>是否需要注册登录：否 </li>\n<li>是否免费：是 </li>\n</ul>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"『01』书单\"><a href=\"#『01』书单\" class=\"headerlink\" title=\"『01』书单\"></a>『01』书单</h2><ul>\n<li>网址： <a href=\"https://pan.shudan.vip/\">https://pan.shudan.vip</a></li>\n<li>简介：它是一个书籍搜索引擎，搜索后直接获取书籍的下载链接，操作简单，界面舒服，支持EPUB、MOBI、AZW3、PDF等格式。 </li>\n<li>是否需要注册登录：否 </li>\n<li>是否免费：是 </li>\n</ul>\n<h2 id=\"『02』鸠摩搜索\"><a href=\"#『02』鸠摩搜索\" class=\"headerlink\" title=\"『02』鸠摩搜索\"></a>『02』鸠摩搜索</h2><ul>\n<li>网址： <a href=\"https://www.jiumodiary.com/\">https://www.jiumodiary.com/</a> </li>\n<li>简介：搜索框内进行搜索，直接获取书籍的下载链接，操作简单，界面舒服，支持text、EPUB 、MOBI 、、PDF、AZW等格式。 </li>\n<li>是否需要注册登录：否 </li>\n<li>是否免费：是 </li>\n</ul>\n<h2 id=\"『03』伴读\"><a href=\"#『03』伴读\" class=\"headerlink\" title=\"『03』伴读\"></a>『03』伴读</h2><ul>\n<li>网址：<a href=\"https://www.bandubook.com/\">https://www.bandubook.com/</a></li>\n<li>简介：非常简介的搜索界面，不过最好有一个百度网盘账号方便下载。</li>\n<li>是否需要注册登录：否 </li>\n<li>是否免费：是 </li>\n</ul>\n"},{"title":"宝塔面板屏蔽、去除、解决强制绑定手机账号","author":"Will Holmes","date":"2021-10-23T15:30:48.000Z","_content":"\n\n## 屏蔽宝塔强制绑定手机方法\n```bash \nsed -i \"s|bind_user == 'True'|bind_user == 'XXXX'|\" /www/server/panel/BTPanel/static/js/index.js\n```\n\n如果需要恢复……\n```bash \nsed -i \"s|if (bind_user == 'REMOVED') {|if (bind_user == 'True') {|g\" /www/server/panel/BTPanel/static/js/index.js\n```\n\n## 删除宝塔强制绑定手机js文件\n```bash \nrm -f /www/server/panel/data/bind.pl\n```\n\n运行以上代码可以解除宝塔面板的强制绑定手机，运行完毕以后，请清除浏览器缓存并刷新宝塔面板！实在不会清理缓存的就用浏览器无痕模式！\n\n## 绕过宝塔强制绑定手机页面\n\n链接后面加上/soft（软件商店）、/files（文件）这样即可轻松越过强制绑定。\n\n安装宝塔国际版无强制绑定\n\n国际版是不会有强制绑定的要求的，而且和宝塔是一比一的相识，基本没有使用障碍。\n\n国际版地址：https://www.aapanel.com/\n\n## 引用\n\n[宝塔面板屏蔽、去除、解决强制绑定手机账号](https://www.dujin.org/17739.html)","source":"_posts/宝塔面板屏蔽、去除、解决强制绑定手机账号.md","raw":"---\ntitle: 宝塔面板屏蔽、去除、解决强制绑定手机账号\nauthor: Will Holmes\ncategories: 建站\ntags:\n  - 宝塔面板\n  - VPS\n  - 服务器\ndate: 2021-10-23 23:30:48\n---\n\n\n## 屏蔽宝塔强制绑定手机方法\n```bash \nsed -i \"s|bind_user == 'True'|bind_user == 'XXXX'|\" /www/server/panel/BTPanel/static/js/index.js\n```\n\n如果需要恢复……\n```bash \nsed -i \"s|if (bind_user == 'REMOVED') {|if (bind_user == 'True') {|g\" /www/server/panel/BTPanel/static/js/index.js\n```\n\n## 删除宝塔强制绑定手机js文件\n```bash \nrm -f /www/server/panel/data/bind.pl\n```\n\n运行以上代码可以解除宝塔面板的强制绑定手机，运行完毕以后，请清除浏览器缓存并刷新宝塔面板！实在不会清理缓存的就用浏览器无痕模式！\n\n## 绕过宝塔强制绑定手机页面\n\n链接后面加上/soft（软件商店）、/files（文件）这样即可轻松越过强制绑定。\n\n安装宝塔国际版无强制绑定\n\n国际版是不会有强制绑定的要求的，而且和宝塔是一比一的相识，基本没有使用障碍。\n\n国际版地址：https://www.aapanel.com/\n\n## 引用\n\n[宝塔面板屏蔽、去除、解决强制绑定手机账号](https://www.dujin.org/17739.html)","slug":"宝塔面板屏蔽、去除、解决强制绑定手机账号","published":1,"updated":"2021-10-23T15:35:26.846Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckw4ars65001ztyox82gvgaar","content":"<h2 id=\"屏蔽宝塔强制绑定手机方法\"><a href=\"#屏蔽宝塔强制绑定手机方法\" class=\"headerlink\" title=\"屏蔽宝塔强制绑定手机方法\"></a>屏蔽宝塔强制绑定手机方法</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sed</span> -i <span class=\"token string\">\"s|bind_user == 'True'|bind_user == 'XXXX'|\"</span> /www/server/panel/BTPanel/static/js/index.js<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>如果需要恢复……</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sed</span> -i <span class=\"token string\">\"s|if (bind_user == 'REMOVED') &#123;|if (bind_user == 'True') &#123;|g\"</span> /www/server/panel/BTPanel/static/js/index.js<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"删除宝塔强制绑定手机js文件\"><a href=\"#删除宝塔强制绑定手机js文件\" class=\"headerlink\" title=\"删除宝塔强制绑定手机js文件\"></a>删除宝塔强制绑定手机js文件</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">rm</span> -f /www/server/panel/data/bind.pl<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>运行以上代码可以解除宝塔面板的强制绑定手机，运行完毕以后，请清除浏览器缓存并刷新宝塔面板！实在不会清理缓存的就用浏览器无痕模式！</p>\n<h2 id=\"绕过宝塔强制绑定手机页面\"><a href=\"#绕过宝塔强制绑定手机页面\" class=\"headerlink\" title=\"绕过宝塔强制绑定手机页面\"></a>绕过宝塔强制绑定手机页面</h2><p>链接后面加上/soft（软件商店）、/files（文件）这样即可轻松越过强制绑定。</p>\n<p>安装宝塔国际版无强制绑定</p>\n<p>国际版是不会有强制绑定的要求的，而且和宝塔是一比一的相识，基本没有使用障碍。</p>\n<p>国际版地址：<a href=\"https://www.aapanel.com/\">https://www.aapanel.com/</a></p>\n<h2 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h2><p><a href=\"https://www.dujin.org/17739.html\">宝塔面板屏蔽、去除、解决强制绑定手机账号</a></p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"屏蔽宝塔强制绑定手机方法\"><a href=\"#屏蔽宝塔强制绑定手机方法\" class=\"headerlink\" title=\"屏蔽宝塔强制绑定手机方法\"></a>屏蔽宝塔强制绑定手机方法</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sed</span> -i <span class=\"token string\">\"s|bind_user == 'True'|bind_user == 'XXXX'|\"</span> /www/server/panel/BTPanel/static/js/index.js<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>如果需要恢复……</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">sed</span> -i <span class=\"token string\">\"s|if (bind_user == 'REMOVED') &#123;|if (bind_user == 'True') &#123;|g\"</span> /www/server/panel/BTPanel/static/js/index.js<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"删除宝塔强制绑定手机js文件\"><a href=\"#删除宝塔强制绑定手机js文件\" class=\"headerlink\" title=\"删除宝塔强制绑定手机js文件\"></a>删除宝塔强制绑定手机js文件</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">rm</span> -f /www/server/panel/data/bind.pl<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>运行以上代码可以解除宝塔面板的强制绑定手机，运行完毕以后，请清除浏览器缓存并刷新宝塔面板！实在不会清理缓存的就用浏览器无痕模式！</p>\n<h2 id=\"绕过宝塔强制绑定手机页面\"><a href=\"#绕过宝塔强制绑定手机页面\" class=\"headerlink\" title=\"绕过宝塔强制绑定手机页面\"></a>绕过宝塔强制绑定手机页面</h2><p>链接后面加上/soft（软件商店）、/files（文件）这样即可轻松越过强制绑定。</p>\n<p>安装宝塔国际版无强制绑定</p>\n<p>国际版是不会有强制绑定的要求的，而且和宝塔是一比一的相识，基本没有使用障碍。</p>\n<p>国际版地址：<a href=\"https://www.aapanel.com/\">https://www.aapanel.com/</a></p>\n<h2 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h2><p><a href=\"https://www.dujin.org/17739.html\">宝塔面板屏蔽、去除、解决强制绑定手机账号</a></p>\n"},{"title":"正则表达式的【贪婪匹配】和【懒惰匹配】","author":"Will Holmes","date":"2021-10-17T13:33:49.000Z","_content":"\n## 一、贪婪匹配\n\n正则表达式通常的行为是（在使整个表达式能得到匹配的前提下）匹配尽可能多的字符。比如这个表达式：a.*b，它将会匹配最长的以a开始，以b结束的字符串。如果用它来搜索aabab的话，它会匹配整个字符串aabab。这被称为贪婪匹配。\n\n\n## 二、懒惰匹配\n\n懒惰匹配，也就是匹配尽可能少的字符。在能使整个匹配成功的前提下使用最少的重复，只要在它后面加上一个问号?即可。现在看看懒惰版的例子吧：\n\na.*?b匹配最短的，以a开始，以b结束的字符串。如果把它应用于aabab的话，它会匹配aab（第一到第三个字符）和ab（第四到第五个字符）\n\n为什么第一个匹配是aab（第一到第三个字符）而不是ab（第二到第三个字符）？简单地说，因为正则表达式有一条比懒惰／贪婪规则优先级更高的规则，就是：最先开始的匹配拥有最高的优先权\n\n## 引用\n\n[CSDN-正则表达式的【贪婪匹配】和【懒惰匹配】](https://blog.csdn.net/zhengxiangwen/article/details/53583758)","source":"_posts/正则表达式的【贪婪匹配】和【懒惰匹配】.md","raw":"---\ntitle: 正则表达式的【贪婪匹配】和【懒惰匹配】\nauthor: Will Holmes\ncategories: 正则表达式\ntags:\n  - 正则表达式\n\ndate: 2021-10-17 21:33:49\n---\n\n## 一、贪婪匹配\n\n正则表达式通常的行为是（在使整个表达式能得到匹配的前提下）匹配尽可能多的字符。比如这个表达式：a.*b，它将会匹配最长的以a开始，以b结束的字符串。如果用它来搜索aabab的话，它会匹配整个字符串aabab。这被称为贪婪匹配。\n\n\n## 二、懒惰匹配\n\n懒惰匹配，也就是匹配尽可能少的字符。在能使整个匹配成功的前提下使用最少的重复，只要在它后面加上一个问号?即可。现在看看懒惰版的例子吧：\n\na.*?b匹配最短的，以a开始，以b结束的字符串。如果把它应用于aabab的话，它会匹配aab（第一到第三个字符）和ab（第四到第五个字符）\n\n为什么第一个匹配是aab（第一到第三个字符）而不是ab（第二到第三个字符）？简单地说，因为正则表达式有一条比懒惰／贪婪规则优先级更高的规则，就是：最先开始的匹配拥有最高的优先权\n\n## 引用\n\n[CSDN-正则表达式的【贪婪匹配】和【懒惰匹配】](https://blog.csdn.net/zhengxiangwen/article/details/53583758)","slug":"正则表达式的【贪婪匹配】和【懒惰匹配】","published":1,"updated":"2021-10-17T14:09:08.106Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckw4ars680023tyoxb1q07bcl","content":"<h2 id=\"一、贪婪匹配\"><a href=\"#一、贪婪匹配\" class=\"headerlink\" title=\"一、贪婪匹配\"></a>一、贪婪匹配</h2><p>正则表达式通常的行为是（在使整个表达式能得到匹配的前提下）匹配尽可能多的字符。比如这个表达式：a.*b，它将会匹配最长的以a开始，以b结束的字符串。如果用它来搜索aabab的话，它会匹配整个字符串aabab。这被称为贪婪匹配。</p>\n<h2 id=\"二、懒惰匹配\"><a href=\"#二、懒惰匹配\" class=\"headerlink\" title=\"二、懒惰匹配\"></a>二、懒惰匹配</h2><p>懒惰匹配，也就是匹配尽可能少的字符。在能使整个匹配成功的前提下使用最少的重复，只要在它后面加上一个问号?即可。现在看看懒惰版的例子吧：</p>\n<p>a.*?b匹配最短的，以a开始，以b结束的字符串。如果把它应用于aabab的话，它会匹配aab（第一到第三个字符）和ab（第四到第五个字符）</p>\n<p>为什么第一个匹配是aab（第一到第三个字符）而不是ab（第二到第三个字符）？简单地说，因为正则表达式有一条比懒惰／贪婪规则优先级更高的规则，就是：最先开始的匹配拥有最高的优先权</p>\n<h2 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h2><p><a href=\"https://blog.csdn.net/zhengxiangwen/article/details/53583758\">CSDN-正则表达式的【贪婪匹配】和【懒惰匹配】</a></p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"一、贪婪匹配\"><a href=\"#一、贪婪匹配\" class=\"headerlink\" title=\"一、贪婪匹配\"></a>一、贪婪匹配</h2><p>正则表达式通常的行为是（在使整个表达式能得到匹配的前提下）匹配尽可能多的字符。比如这个表达式：a.*b，它将会匹配最长的以a开始，以b结束的字符串。如果用它来搜索aabab的话，它会匹配整个字符串aabab。这被称为贪婪匹配。</p>\n<h2 id=\"二、懒惰匹配\"><a href=\"#二、懒惰匹配\" class=\"headerlink\" title=\"二、懒惰匹配\"></a>二、懒惰匹配</h2><p>懒惰匹配，也就是匹配尽可能少的字符。在能使整个匹配成功的前提下使用最少的重复，只要在它后面加上一个问号?即可。现在看看懒惰版的例子吧：</p>\n<p>a.*?b匹配最短的，以a开始，以b结束的字符串。如果把它应用于aabab的话，它会匹配aab（第一到第三个字符）和ab（第四到第五个字符）</p>\n<p>为什么第一个匹配是aab（第一到第三个字符）而不是ab（第二到第三个字符）？简单地说，因为正则表达式有一条比懒惰／贪婪规则优先级更高的规则，就是：最先开始的匹配拥有最高的优先权</p>\n<h2 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h2><p><a href=\"https://blog.csdn.net/zhengxiangwen/article/details/53583758\">CSDN-正则表达式的【贪婪匹配】和【懒惰匹配】</a></p>\n"},{"title":"Python3批量修改音频ID3等标签","author":"Will Holmes","date":"2021-11-06T21:28:04.000Z","_content":"\n## eyeD3的安装\n### 安装msgpack\n\n不安装会报错distributed 1.21.8 requires msgpack, which is not installed\n```bash \npip3 install msgpack\n```\n2、安装magic，不安装的话，在import eyed3时会报错ImportError: failed to find libmagic. Check\nyour installation\n```bash \npip3 install python-magic-bin==0.4.14\n```\n3、安装eyeD3\n```bash \npip3 install eyeD3\n```\n## 使用eyeD3修改mp3标签\n\n```python \nimport eyed3  \naudiofile = eyed3.load(\"hello word.mp3\")  # 读取mp3文件\naudiofile.initTag()  # 初始化所有标签信息，将之前所有的标签清除\naudiofile.tag.artist = u\"Jayson\"  # 参与创作的艺术家\naudiofile.tag.album = u\"Love Visions\"  # 唱片集\naudiofile.tag.album_artist = u\"art\"  # 唱片艺术家\naudiofile.tag.title = u\"Hello World\"  # 标题\naudiofile.tag.track_num = 4  # 音轨编号，专辑内歌曲编号：\"#\"\naudiofile.tag.save() # 保存文件\n```\n","source":"_posts/用python批量修改音频ID3等标签.md","raw":"---\ntitle: Python3批量修改音频ID3等标签\nauthor: Will Holmes\ncategories: Python\ntags:\n  - Python\n  - eyeD3\n  - Mp3\ndate: 2021-11-07 05:28:04\n---\n\n## eyeD3的安装\n### 安装msgpack\n\n不安装会报错distributed 1.21.8 requires msgpack, which is not installed\n```bash \npip3 install msgpack\n```\n2、安装magic，不安装的话，在import eyed3时会报错ImportError: failed to find libmagic. Check\nyour installation\n```bash \npip3 install python-magic-bin==0.4.14\n```\n3、安装eyeD3\n```bash \npip3 install eyeD3\n```\n## 使用eyeD3修改mp3标签\n\n```python \nimport eyed3  \naudiofile = eyed3.load(\"hello word.mp3\")  # 读取mp3文件\naudiofile.initTag()  # 初始化所有标签信息，将之前所有的标签清除\naudiofile.tag.artist = u\"Jayson\"  # 参与创作的艺术家\naudiofile.tag.album = u\"Love Visions\"  # 唱片集\naudiofile.tag.album_artist = u\"art\"  # 唱片艺术家\naudiofile.tag.title = u\"Hello World\"  # 标题\naudiofile.tag.track_num = 4  # 音轨编号，专辑内歌曲编号：\"#\"\naudiofile.tag.save() # 保存文件\n```\n","slug":"用python批量修改音频ID3等标签","published":1,"updated":"2021-11-06T21:33:41.239Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckw4ars6a0027tyox9t1175i1","content":"<h2 id=\"eyeD3的安装\"><a href=\"#eyeD3的安装\" class=\"headerlink\" title=\"eyeD3的安装\"></a>eyeD3的安装</h2><h3 id=\"安装msgpack\"><a href=\"#安装msgpack\" class=\"headerlink\" title=\"安装msgpack\"></a>安装msgpack</h3><p>不安装会报错distributed 1.21.8 requires msgpack, which is not installed</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pip3 <span class=\"token function\">install</span> msgpack<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>2、安装magic，不安装的话，在import eyed3时会报错ImportError: failed to find libmagic. Check<br>your installation</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pip3 <span class=\"token function\">install</span> python-magic-bin<span class=\"token operator\">==</span><span class=\"token number\">0.4</span>.14<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>3、安装eyeD3</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pip3 <span class=\"token function\">install</span> eyeD3<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"使用eyeD3修改mp3标签\"><a href=\"#使用eyeD3修改mp3标签\" class=\"headerlink\" title=\"使用eyeD3修改mp3标签\"></a>使用eyeD3修改mp3标签</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> eyed3  \naudiofile <span class=\"token operator\">=</span> eyed3<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span><span class=\"token string\">\"hello word.mp3\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 读取mp3文件</span>\naudiofile<span class=\"token punctuation\">.</span>initTag<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 初始化所有标签信息，将之前所有的标签清除</span>\naudiofile<span class=\"token punctuation\">.</span>tag<span class=\"token punctuation\">.</span>artist <span class=\"token operator\">=</span> <span class=\"token string\">u\"Jayson\"</span>  <span class=\"token comment\"># 参与创作的艺术家</span>\naudiofile<span class=\"token punctuation\">.</span>tag<span class=\"token punctuation\">.</span>album <span class=\"token operator\">=</span> <span class=\"token string\">u\"Love Visions\"</span>  <span class=\"token comment\"># 唱片集</span>\naudiofile<span class=\"token punctuation\">.</span>tag<span class=\"token punctuation\">.</span>album_artist <span class=\"token operator\">=</span> <span class=\"token string\">u\"art\"</span>  <span class=\"token comment\"># 唱片艺术家</span>\naudiofile<span class=\"token punctuation\">.</span>tag<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token string\">u\"Hello World\"</span>  <span class=\"token comment\"># 标题</span>\naudiofile<span class=\"token punctuation\">.</span>tag<span class=\"token punctuation\">.</span>track_num <span class=\"token operator\">=</span> <span class=\"token number\">4</span>  <span class=\"token comment\"># 音轨编号，专辑内歌曲编号：\"#\"</span>\naudiofile<span class=\"token punctuation\">.</span>tag<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 保存文件</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h2 id=\"eyeD3的安装\"><a href=\"#eyeD3的安装\" class=\"headerlink\" title=\"eyeD3的安装\"></a>eyeD3的安装</h2><h3 id=\"安装msgpack\"><a href=\"#安装msgpack\" class=\"headerlink\" title=\"安装msgpack\"></a>安装msgpack</h3><p>不安装会报错distributed 1.21.8 requires msgpack, which is not installed</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pip3 <span class=\"token function\">install</span> msgpack<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>2、安装magic，不安装的话，在import eyed3时会报错ImportError: failed to find libmagic. Check<br>your installation</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pip3 <span class=\"token function\">install</span> python-magic-bin<span class=\"token operator\">==</span><span class=\"token number\">0.4</span>.14<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>3、安装eyeD3</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pip3 <span class=\"token function\">install</span> eyeD3<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"使用eyeD3修改mp3标签\"><a href=\"#使用eyeD3修改mp3标签\" class=\"headerlink\" title=\"使用eyeD3修改mp3标签\"></a>使用eyeD3修改mp3标签</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> eyed3  \naudiofile <span class=\"token operator\">=</span> eyed3<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span><span class=\"token string\">\"hello word.mp3\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 读取mp3文件</span>\naudiofile<span class=\"token punctuation\">.</span>initTag<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 初始化所有标签信息，将之前所有的标签清除</span>\naudiofile<span class=\"token punctuation\">.</span>tag<span class=\"token punctuation\">.</span>artist <span class=\"token operator\">=</span> <span class=\"token string\">u\"Jayson\"</span>  <span class=\"token comment\"># 参与创作的艺术家</span>\naudiofile<span class=\"token punctuation\">.</span>tag<span class=\"token punctuation\">.</span>album <span class=\"token operator\">=</span> <span class=\"token string\">u\"Love Visions\"</span>  <span class=\"token comment\"># 唱片集</span>\naudiofile<span class=\"token punctuation\">.</span>tag<span class=\"token punctuation\">.</span>album_artist <span class=\"token operator\">=</span> <span class=\"token string\">u\"art\"</span>  <span class=\"token comment\"># 唱片艺术家</span>\naudiofile<span class=\"token punctuation\">.</span>tag<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token string\">u\"Hello World\"</span>  <span class=\"token comment\"># 标题</span>\naudiofile<span class=\"token punctuation\">.</span>tag<span class=\"token punctuation\">.</span>track_num <span class=\"token operator\">=</span> <span class=\"token number\">4</span>  <span class=\"token comment\"># 音轨编号，专辑内歌曲编号：\"#\"</span>\naudiofile<span class=\"token punctuation\">.</span>tag<span class=\"token punctuation\">.</span>save<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 保存文件</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n"},{"title":"整理最全的 python 之markdown与HTML的互转的几个模块","author":"Will Holmes","date":"2021-11-06T20:07:17.000Z","_content":"\n\n# 一、说明：\n\n今天突然想着学习一下如何将markdown和HTML互转的知识，因为我在CSDN的写的博客可以导出的时候有俩种方式，所以想着也可以把他们相互转化下。我觉得python现在很成熟了，肯定有这方面的轮子。于是就上网搜索找了一些整理下。\n\n如果你只是转换单个文件，推荐直接在线转换：[在线互转地址](http://www.atool9.com/html2markdown.php)\n\n其实这个在线地址里面有好多在线工具，需要的自己研究吧：  \n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191128113313528.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjA4MTM4OQ==,size_16,color_FFFFFF,t_70)  \n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191128113535233.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjA4MTM4OQ==,size_16,color_FFFFFF,t_70)\n\n# 二、互转模块：\n\n## 1、md转html\n\n这里我找到俩个模块可以使用，但是[md-to-html](https://pypi.org/project/md-to-html/)模块效果不好，网上大多数使用的也是[markdown](https://pypi.org/project/Markdown/)的模块。\n\n### ①、markdown模块（推荐）：\n\n这里有一个我感觉还不错的[博客地址](https://www.smslit.top/2018/10/16/md2html_python/)，感兴趣的可以去学习看看：  \n第一步：下载安装：[markdown](https://pypi.org/project/Markdown/)\n\n第二步：准备一个md文件，我这里是使用CSDN写作的部分帮助文档md。\n\n```markdown\n\n    快捷键\n    ---------------------------\n    撤销：Ctrl/Command + Z\n    重做：Ctrl/Command + Y\n    加粗：Ctrl/Command + B\n    斜体：Ctrl/Command + I\n    标题：Ctrl/Command + Shift + H\n    无序列表：Ctrl/Command + Shift + U\n    有序列表：Ctrl/Command + Shift + O\n    检查列表：Ctrl/Command + Shift + C\n    插入代码：Ctrl/Command + Shift + K\n    插入链接：Ctrl/Command + Shift + L\n    插入图片：Ctrl/Command + Shift + G\n    查找：Command + F\n    替换：Command + G\n    \n    标题\n    ---------------------------\n    # 1级标题\n    ## 2级标题\n    ### 3级标题\n    #### 四级标题 \n    ##### 五级标题  \n    ###### 六级标题\n    \n    文本样式\n    ---------------------------\n    *强调文本* _强调文本_\n    \n    **加粗文本** __加粗文本__\n    \n    ==标记文本==\n    \n    ~~删除文本~~\n    \n    > 引用文本\n    \n    H~2~O is是液体。\n    \n    2^10^ 运算结果是 1024。\n    \n    列表\n    ---------------------------\n    - 项目\n      * 项目\n        + 项目\n    \n    1. 项目1\n    2. 项目2\n    3. 项目3\n    \n    - [ ] 计划任务\n    - [x] 完成任务\n    \n    链接\n    ---------------------------\n    链接: [link](https://mp.csdn.net).\n    \n    图片: ![Alt](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw)\n    \n    带尺寸的图片: ![Alt](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw =30x30)\n    \n    居中的图片: ![Alt](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center)\n    \n    居中并且带尺寸的图片: ![Alt](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center =30x30)\n    \n    \n    \n\n```\n第三步：可以直接复制测试：\n\n```python\n\n    from markdown import markdown\n    \n    print(dir(markdown))\n    file = open('help.md','r',encoding='utf-8').read()\n    \n    html = markdown(file)\n    print(html)\n    \n    \n    with open('ret.html', 'w', encoding='utf-8') as file:\n        file.write(html)\n    \n    \n    \n    \n\n```\n然后看出输入的ret.html文件。  \n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191128112813299.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjA4MTM4OQ==,size_16,color_FFFFFF,t_70)\n\n### ②、md-to-html模块（不推荐）：\n\n[模块地址：](https://pypi.org/project/md-to-html/)  \n第一步:安装md-to-html：\n\n```bash\n\n    pip install md-to-html\n    \n\n```\n第二步：准备一个gbk的md文件，我直接使用刚刚的会报编码错误，然后桌面新建一个dbk的txt就可以了，但是转换效果极差。\n\n第三步：\n\ncmd或者powershell中执行命令：\n\n```bash\n     md-to-html -i .\\help.txt -o .\\ret2.html\n    \n\n```\n结果就是：  \n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191128114156449.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjA4MTM4OQ==,size_16,color_FFFFFF,t_70)  \n发现没有，笔者刚刚的转换少了很多东西，所以这个模块做的效果不好，不建议使用这个，推荐使用第一个模块。  \n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191128114021640.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjA4MTM4OQ==,size_16,color_FFFFFF,t_70)\n\n## 2、html转md：\n\n### ①、tomd模块：\n\n[模块地址。](https://pypi.org/project/tomd/)  \n安装：\n\n```bash\n\n    pip install tomd\n    \n\n```\n第一步：使用刚刚成的html或者导出自己的一份博客的HTML文件进行测试。  \n这里我贴下我刚刚转存成功的。\n\n```html\n\n    <h2>快捷键</h2>\n    <p>撤销：Ctrl/Command + Z\n    重做：Ctrl/Command + Y\n    加粗：Ctrl/Command + B\n    斜体：Ctrl/Command + I\n    标题：Ctrl/Command + Shift + H\n    无序列表：Ctrl/Command + Shift + U\n    有序列表：Ctrl/Command + Shift + O\n    检查列表：Ctrl/Command + Shift + C\n    插入代码：Ctrl/Command + Shift + K\n    插入链接：Ctrl/Command + Shift + L\n    插入图片：Ctrl/Command + Shift + G\n    查找：Command + F\n    替换：Command + G</p>\n    <h2>标题</h2>\n    <h1>1级标题</h1>\n    <h2>2级标题</h2>\n    <h3>3级标题</h3>\n    <h4>四级标题</h4>\n    <h5>五级标题</h5>\n    <h6>六级标题</h6>\n    <h2>文本样式</h2>\n    <p><em>强调文本</em> <em>强调文本</em></p>\n    <p><strong>加粗文本</strong> <strong>加粗文本</strong></p>\n    <p>==标记文本==</p>\n    <p>~~删除文本~~</p>\n    <blockquote>\n    <p>引用文本</p>\n    </blockquote>\n    <p>H~2~O is是液体。</p>\n    <p>2^10^ 运算结果是 1024。</p>\n    <h2>列表</h2>\n    <ul>\n    <li>项目</li>\n    <li>\n    <p>项目</p>\n    <ul>\n    <li>项目</li>\n    </ul>\n    </li>\n    <li>\n    <p>项目1</p>\n    </li>\n    <li>项目2</li>\n    <li>\n    <p>项目3</p>\n    </li>\n    <li>\n    <p>[ ] 计划任务</p>\n    </li>\n    <li>[x] 完成任务</li>\n    </ul>\n    <h2>链接</h2>\n    <p>链接: <a href=\"https://mp.csdn.net\">link</a>.</p>\n    <p>图片: <img alt=\"Alt\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw\" /></p>\n    <p>带尺寸的图片: <img alt=\"Alt\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw =30x30\" /></p>\n    <p>居中的图片: <img alt=\"Alt\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center\" /></p>\n    <p>居中并且带尺寸的图片: <img alt=\"Alt\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center =30x30\" /></p>\n    \n\n```\n第二步：  \n转换代码：  \n其中：ret.html就是上面的html，make.md就是转换成功的markdown文件。\n\n```python\n\n    from tomd import Tomd\n    \n    md_text = open('ret.html', 'r', encoding='utf-8').read()\n    markdown = Tomd(md_text).markdown\n    with open('make.md', 'w', encoding='utf-8') as file:\n        file.write(markdown)\n    \n    \n\n```\n成功的md文件：\n\n```markdown\n\n    ## 快捷键\n    \n    撤销：Ctrl/Command + Z\n    重做：Ctrl/Command + Y\n    加粗：Ctrl/Command + B\n    斜体：Ctrl/Command + I\n    标题：Ctrl/Command + Shift + H\n    无序列表：Ctrl/Command + Shift + U\n    有序列表：Ctrl/Command + Shift + O\n    检查列表：Ctrl/Command + Shift + C\n    插入代码：Ctrl/Command + Shift + K\n    插入链接：Ctrl/Command + Shift + L\n    插入图片：Ctrl/Command + Shift + G\n    查找：Command + F\n    替换：Command + G\n    \n    ## 标题\n    \n    # 1级标题\n    \n    ## 2级标题\n    \n    ### 3级标题\n    \n    #### 四级标题\n    \n    ##### 五级标题\n    \n    ###### 六级标题\n    \n    ## 文本样式\n    \n    **强调文本** **强调文本**\n    \n    **加粗文本** **加粗文本**\n    \n    ==标记文本==\n    \n    ~~删除文本~~\n    \n    > \n    引用文本\n    \n    \n    H~2~O is是液体。\n    \n    2^10^ 运算结果是 1024。\n    \n    ## 列表\n    \n    - 项目\n    <li>\n    项目\n    <ul>\n    - 项目\n    \n    项目1\n    \n    项目3\n    \n    [ ] 计划任务\n    \n    ## 链接\n    \n    链接: [link](https://mp.csdn.net).\n    \n    图片: <img alt=\"Alt\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw\" />\n    \n    带尺寸的图片: <img alt=\"Alt\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw =30x30\" />\n    \n    居中的图片: <img alt=\"Alt\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center\" />\n    \n    居中并且带尺寸的图片: <img alt=\"Alt\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center =30x30\" />\n    \n    \n\n```\n### ②、html2text文件（推荐）：\n\n[模块地址：](https://pypi.org/project/html2text/)\n\n安装模块：\n\n```bash\n\n    pip install html2text\n    \n\n```\n转换代码：\n\n```python\n\n    import html2text\n    \n    \n    md_text = open('ret.html', 'r', encoding='utf-8').read()\n    \n    markdown = html2text.html2text(md_text)\n    with open('make2.md', 'w', encoding='utf-8') as file:\n        file.write(markdown)\n    \n    \n\n```\n最后生成一个make2.md文件。\n\n```\n\n    ## 快捷键\n    \n    撤销：Ctrl/Command + Z 重做：Ctrl/Command + Y 加粗：Ctrl/Command + B 斜体：Ctrl/Command +\n    I 标题：Ctrl/Command + Shift + H 无序列表：Ctrl/Command + Shift + U 有序列表：Ctrl/Command\n    + Shift + O 检查列表：Ctrl/Command + Shift + C 插入代码：Ctrl/Command + Shift + K\n    插入链接：Ctrl/Command + Shift + L 插入图片：Ctrl/Command + Shift + G 查找：Command + F\n    替换：Command + G\n    \n    ## 标题\n    \n    # 1级标题\n    \n    ## 2级标题\n    \n    ### 3级标题\n    \n    #### 四级标题\n    \n    ##### 五级标题\n    \n    ###### 六级标题\n    \n    ## 文本样式\n    \n    _强调文本_ _强调文本_\n    \n    **加粗文本** **加粗文本**\n    \n    ==标记文本==\n    \n    ~~删除文本~~\n    \n    > 引用文本\n    \n    H~2~O is是液体。\n    \n    2^10^ 运算结果是 1024。\n    \n    ## 列表\n    \n      * 项目\n      * 项目\n    \n        * 项目\n      * 项目1\n    \n    项目2\n    \n      * 项目3\n    \n      * [ ] 计划任务\n    \n      * [x] 完成任务\n    \n    ## 链接\n    \n    链接: [link](https://mp.csdn.net).\n    \n    图片:\n    ![Alt](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw)\n    \n    带尺寸的图片:\n    ![Alt](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw\n    =30x30)\n    \n    居中的图片:\n    ![Alt](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center)\n    \n    居中并且带尺寸的图片:\n    ![Alt](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center\n    =30x30)\n    \n    \n    \n\n```\n### ③、html2markdown模块：\n\n[模块地址：](https://pypi.org/project/html2markdown/)\n\n安装：\n\n```bash\n    pip install html2markdown\n```\n转换代码：\n\n```python\n\n    import html2markdown\n    \n    \n    md_text = open('ret.html', 'r', encoding='utf-8').read()\n    \n    markdown = html2markdown.convert(md_text)\n    \n    with open('make3.md', 'w', encoding='utf-8') as file:\n        file.write(markdown)\n    \n\n```\n最后生成md文件：\n\n```\n\n    ## 快捷键\n    \n    撤销：Ctrl/Command + Z重做：Ctrl/Command + Y加粗：Ctrl/Command + B斜体：Ctrl/Command + I标题：Ctrl/Command + Shift + H无序列表：Ctrl/Command + Shift + U有序列表：Ctrl/Command + Shift + O检查列表：Ctrl/Command + Shift + C插入代码：Ctrl/Command + Shift + K插入链接：Ctrl/Command + Shift + L插入图片：Ctrl/Command + Shift + G查找：Command + F替换：Command + G\n    \n    ## 标题\n    \n    # 1级标题\n    \n    ## 2级标题\n    \n    ### 3级标题\n    \n    #### 四级标题\n    \n    ##### 五级标题\n    \n    ###### 六级标题\n    \n    ## 文本样式\n    \n    _强调文本_ _强调文本_\n    \n    __加粗文本__ __加粗文本__\n    \n    ==标记文本==\n    \n    ~~删除文本~~\n    \n    >  \n    > 引用文本\n    > \n    \n    H~2~O is是液体。\n    \n    2^10^ 运算结果是 1024。\n    \n    ## 列表\n    \n    *   项目\n    *   \n        \n        项目\n        \n        \n        \n        *   项目\n        \n        \n        \n    *   \n        \n        项目1\n        \n        \n    *   项目2\n    *   \n        \n        项目3\n        \n        \n    *   \n        \n        \\[ \\] 计划任务\n        \n        \n    *   \\[x\\] 完成任务\n    \n    ## 链接\n    \n    链接: [link](https://mp.csdn.net).\n    \n    图片: ![Alt](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw)\n    \n    带尺寸的图片: ![Alt](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw =30x30)\n    \n    居中的图片: ![Alt](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center)\n    \n    居中并且带尺寸的图片: ![Alt](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center =30x30)\n    \n\n```\n通过对比三个模块的markdown文件的结果，发现生成的效果第二个模块的我感觉还不错（对比项目那一块的结果，其他的基本上都一样。）\n\n","source":"_posts/整理最全的 python 之markdown与HTML的互转的几个模块.md","raw":"---\ntitle: 整理最全的 python 之markdown与HTML的互转的几个模块\nauthor: Will Holmes\ncategories: Python\ntags:\n  - Python\n  - MarkDown\ndate: 2021-11-07 04:07:17\n---\n\n\n# 一、说明：\n\n今天突然想着学习一下如何将markdown和HTML互转的知识，因为我在CSDN的写的博客可以导出的时候有俩种方式，所以想着也可以把他们相互转化下。我觉得python现在很成熟了，肯定有这方面的轮子。于是就上网搜索找了一些整理下。\n\n如果你只是转换单个文件，推荐直接在线转换：[在线互转地址](http://www.atool9.com/html2markdown.php)\n\n其实这个在线地址里面有好多在线工具，需要的自己研究吧：  \n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191128113313528.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjA4MTM4OQ==,size_16,color_FFFFFF,t_70)  \n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191128113535233.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjA4MTM4OQ==,size_16,color_FFFFFF,t_70)\n\n# 二、互转模块：\n\n## 1、md转html\n\n这里我找到俩个模块可以使用，但是[md-to-html](https://pypi.org/project/md-to-html/)模块效果不好，网上大多数使用的也是[markdown](https://pypi.org/project/Markdown/)的模块。\n\n### ①、markdown模块（推荐）：\n\n这里有一个我感觉还不错的[博客地址](https://www.smslit.top/2018/10/16/md2html_python/)，感兴趣的可以去学习看看：  \n第一步：下载安装：[markdown](https://pypi.org/project/Markdown/)\n\n第二步：准备一个md文件，我这里是使用CSDN写作的部分帮助文档md。\n\n```markdown\n\n    快捷键\n    ---------------------------\n    撤销：Ctrl/Command + Z\n    重做：Ctrl/Command + Y\n    加粗：Ctrl/Command + B\n    斜体：Ctrl/Command + I\n    标题：Ctrl/Command + Shift + H\n    无序列表：Ctrl/Command + Shift + U\n    有序列表：Ctrl/Command + Shift + O\n    检查列表：Ctrl/Command + Shift + C\n    插入代码：Ctrl/Command + Shift + K\n    插入链接：Ctrl/Command + Shift + L\n    插入图片：Ctrl/Command + Shift + G\n    查找：Command + F\n    替换：Command + G\n    \n    标题\n    ---------------------------\n    # 1级标题\n    ## 2级标题\n    ### 3级标题\n    #### 四级标题 \n    ##### 五级标题  \n    ###### 六级标题\n    \n    文本样式\n    ---------------------------\n    *强调文本* _强调文本_\n    \n    **加粗文本** __加粗文本__\n    \n    ==标记文本==\n    \n    ~~删除文本~~\n    \n    > 引用文本\n    \n    H~2~O is是液体。\n    \n    2^10^ 运算结果是 1024。\n    \n    列表\n    ---------------------------\n    - 项目\n      * 项目\n        + 项目\n    \n    1. 项目1\n    2. 项目2\n    3. 项目3\n    \n    - [ ] 计划任务\n    - [x] 完成任务\n    \n    链接\n    ---------------------------\n    链接: [link](https://mp.csdn.net).\n    \n    图片: ![Alt](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw)\n    \n    带尺寸的图片: ![Alt](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw =30x30)\n    \n    居中的图片: ![Alt](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center)\n    \n    居中并且带尺寸的图片: ![Alt](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center =30x30)\n    \n    \n    \n\n```\n第三步：可以直接复制测试：\n\n```python\n\n    from markdown import markdown\n    \n    print(dir(markdown))\n    file = open('help.md','r',encoding='utf-8').read()\n    \n    html = markdown(file)\n    print(html)\n    \n    \n    with open('ret.html', 'w', encoding='utf-8') as file:\n        file.write(html)\n    \n    \n    \n    \n\n```\n然后看出输入的ret.html文件。  \n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191128112813299.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjA4MTM4OQ==,size_16,color_FFFFFF,t_70)\n\n### ②、md-to-html模块（不推荐）：\n\n[模块地址：](https://pypi.org/project/md-to-html/)  \n第一步:安装md-to-html：\n\n```bash\n\n    pip install md-to-html\n    \n\n```\n第二步：准备一个gbk的md文件，我直接使用刚刚的会报编码错误，然后桌面新建一个dbk的txt就可以了，但是转换效果极差。\n\n第三步：\n\ncmd或者powershell中执行命令：\n\n```bash\n     md-to-html -i .\\help.txt -o .\\ret2.html\n    \n\n```\n结果就是：  \n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191128114156449.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjA4MTM4OQ==,size_16,color_FFFFFF,t_70)  \n发现没有，笔者刚刚的转换少了很多东西，所以这个模块做的效果不好，不建议使用这个，推荐使用第一个模块。  \n![在这里插入图片描述](https://img-blog.csdnimg.cn/20191128114021640.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjA4MTM4OQ==,size_16,color_FFFFFF,t_70)\n\n## 2、html转md：\n\n### ①、tomd模块：\n\n[模块地址。](https://pypi.org/project/tomd/)  \n安装：\n\n```bash\n\n    pip install tomd\n    \n\n```\n第一步：使用刚刚成的html或者导出自己的一份博客的HTML文件进行测试。  \n这里我贴下我刚刚转存成功的。\n\n```html\n\n    <h2>快捷键</h2>\n    <p>撤销：Ctrl/Command + Z\n    重做：Ctrl/Command + Y\n    加粗：Ctrl/Command + B\n    斜体：Ctrl/Command + I\n    标题：Ctrl/Command + Shift + H\n    无序列表：Ctrl/Command + Shift + U\n    有序列表：Ctrl/Command + Shift + O\n    检查列表：Ctrl/Command + Shift + C\n    插入代码：Ctrl/Command + Shift + K\n    插入链接：Ctrl/Command + Shift + L\n    插入图片：Ctrl/Command + Shift + G\n    查找：Command + F\n    替换：Command + G</p>\n    <h2>标题</h2>\n    <h1>1级标题</h1>\n    <h2>2级标题</h2>\n    <h3>3级标题</h3>\n    <h4>四级标题</h4>\n    <h5>五级标题</h5>\n    <h6>六级标题</h6>\n    <h2>文本样式</h2>\n    <p><em>强调文本</em> <em>强调文本</em></p>\n    <p><strong>加粗文本</strong> <strong>加粗文本</strong></p>\n    <p>==标记文本==</p>\n    <p>~~删除文本~~</p>\n    <blockquote>\n    <p>引用文本</p>\n    </blockquote>\n    <p>H~2~O is是液体。</p>\n    <p>2^10^ 运算结果是 1024。</p>\n    <h2>列表</h2>\n    <ul>\n    <li>项目</li>\n    <li>\n    <p>项目</p>\n    <ul>\n    <li>项目</li>\n    </ul>\n    </li>\n    <li>\n    <p>项目1</p>\n    </li>\n    <li>项目2</li>\n    <li>\n    <p>项目3</p>\n    </li>\n    <li>\n    <p>[ ] 计划任务</p>\n    </li>\n    <li>[x] 完成任务</li>\n    </ul>\n    <h2>链接</h2>\n    <p>链接: <a href=\"https://mp.csdn.net\">link</a>.</p>\n    <p>图片: <img alt=\"Alt\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw\" /></p>\n    <p>带尺寸的图片: <img alt=\"Alt\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw =30x30\" /></p>\n    <p>居中的图片: <img alt=\"Alt\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center\" /></p>\n    <p>居中并且带尺寸的图片: <img alt=\"Alt\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center =30x30\" /></p>\n    \n\n```\n第二步：  \n转换代码：  \n其中：ret.html就是上面的html，make.md就是转换成功的markdown文件。\n\n```python\n\n    from tomd import Tomd\n    \n    md_text = open('ret.html', 'r', encoding='utf-8').read()\n    markdown = Tomd(md_text).markdown\n    with open('make.md', 'w', encoding='utf-8') as file:\n        file.write(markdown)\n    \n    \n\n```\n成功的md文件：\n\n```markdown\n\n    ## 快捷键\n    \n    撤销：Ctrl/Command + Z\n    重做：Ctrl/Command + Y\n    加粗：Ctrl/Command + B\n    斜体：Ctrl/Command + I\n    标题：Ctrl/Command + Shift + H\n    无序列表：Ctrl/Command + Shift + U\n    有序列表：Ctrl/Command + Shift + O\n    检查列表：Ctrl/Command + Shift + C\n    插入代码：Ctrl/Command + Shift + K\n    插入链接：Ctrl/Command + Shift + L\n    插入图片：Ctrl/Command + Shift + G\n    查找：Command + F\n    替换：Command + G\n    \n    ## 标题\n    \n    # 1级标题\n    \n    ## 2级标题\n    \n    ### 3级标题\n    \n    #### 四级标题\n    \n    ##### 五级标题\n    \n    ###### 六级标题\n    \n    ## 文本样式\n    \n    **强调文本** **强调文本**\n    \n    **加粗文本** **加粗文本**\n    \n    ==标记文本==\n    \n    ~~删除文本~~\n    \n    > \n    引用文本\n    \n    \n    H~2~O is是液体。\n    \n    2^10^ 运算结果是 1024。\n    \n    ## 列表\n    \n    - 项目\n    <li>\n    项目\n    <ul>\n    - 项目\n    \n    项目1\n    \n    项目3\n    \n    [ ] 计划任务\n    \n    ## 链接\n    \n    链接: [link](https://mp.csdn.net).\n    \n    图片: <img alt=\"Alt\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw\" />\n    \n    带尺寸的图片: <img alt=\"Alt\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw =30x30\" />\n    \n    居中的图片: <img alt=\"Alt\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center\" />\n    \n    居中并且带尺寸的图片: <img alt=\"Alt\" src=\"https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center =30x30\" />\n    \n    \n\n```\n### ②、html2text文件（推荐）：\n\n[模块地址：](https://pypi.org/project/html2text/)\n\n安装模块：\n\n```bash\n\n    pip install html2text\n    \n\n```\n转换代码：\n\n```python\n\n    import html2text\n    \n    \n    md_text = open('ret.html', 'r', encoding='utf-8').read()\n    \n    markdown = html2text.html2text(md_text)\n    with open('make2.md', 'w', encoding='utf-8') as file:\n        file.write(markdown)\n    \n    \n\n```\n最后生成一个make2.md文件。\n\n```\n\n    ## 快捷键\n    \n    撤销：Ctrl/Command + Z 重做：Ctrl/Command + Y 加粗：Ctrl/Command + B 斜体：Ctrl/Command +\n    I 标题：Ctrl/Command + Shift + H 无序列表：Ctrl/Command + Shift + U 有序列表：Ctrl/Command\n    + Shift + O 检查列表：Ctrl/Command + Shift + C 插入代码：Ctrl/Command + Shift + K\n    插入链接：Ctrl/Command + Shift + L 插入图片：Ctrl/Command + Shift + G 查找：Command + F\n    替换：Command + G\n    \n    ## 标题\n    \n    # 1级标题\n    \n    ## 2级标题\n    \n    ### 3级标题\n    \n    #### 四级标题\n    \n    ##### 五级标题\n    \n    ###### 六级标题\n    \n    ## 文本样式\n    \n    _强调文本_ _强调文本_\n    \n    **加粗文本** **加粗文本**\n    \n    ==标记文本==\n    \n    ~~删除文本~~\n    \n    > 引用文本\n    \n    H~2~O is是液体。\n    \n    2^10^ 运算结果是 1024。\n    \n    ## 列表\n    \n      * 项目\n      * 项目\n    \n        * 项目\n      * 项目1\n    \n    项目2\n    \n      * 项目3\n    \n      * [ ] 计划任务\n    \n      * [x] 完成任务\n    \n    ## 链接\n    \n    链接: [link](https://mp.csdn.net).\n    \n    图片:\n    ![Alt](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw)\n    \n    带尺寸的图片:\n    ![Alt](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw\n    =30x30)\n    \n    居中的图片:\n    ![Alt](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center)\n    \n    居中并且带尺寸的图片:\n    ![Alt](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center\n    =30x30)\n    \n    \n    \n\n```\n### ③、html2markdown模块：\n\n[模块地址：](https://pypi.org/project/html2markdown/)\n\n安装：\n\n```bash\n    pip install html2markdown\n```\n转换代码：\n\n```python\n\n    import html2markdown\n    \n    \n    md_text = open('ret.html', 'r', encoding='utf-8').read()\n    \n    markdown = html2markdown.convert(md_text)\n    \n    with open('make3.md', 'w', encoding='utf-8') as file:\n        file.write(markdown)\n    \n\n```\n最后生成md文件：\n\n```\n\n    ## 快捷键\n    \n    撤销：Ctrl/Command + Z重做：Ctrl/Command + Y加粗：Ctrl/Command + B斜体：Ctrl/Command + I标题：Ctrl/Command + Shift + H无序列表：Ctrl/Command + Shift + U有序列表：Ctrl/Command + Shift + O检查列表：Ctrl/Command + Shift + C插入代码：Ctrl/Command + Shift + K插入链接：Ctrl/Command + Shift + L插入图片：Ctrl/Command + Shift + G查找：Command + F替换：Command + G\n    \n    ## 标题\n    \n    # 1级标题\n    \n    ## 2级标题\n    \n    ### 3级标题\n    \n    #### 四级标题\n    \n    ##### 五级标题\n    \n    ###### 六级标题\n    \n    ## 文本样式\n    \n    _强调文本_ _强调文本_\n    \n    __加粗文本__ __加粗文本__\n    \n    ==标记文本==\n    \n    ~~删除文本~~\n    \n    >  \n    > 引用文本\n    > \n    \n    H~2~O is是液体。\n    \n    2^10^ 运算结果是 1024。\n    \n    ## 列表\n    \n    *   项目\n    *   \n        \n        项目\n        \n        \n        \n        *   项目\n        \n        \n        \n    *   \n        \n        项目1\n        \n        \n    *   项目2\n    *   \n        \n        项目3\n        \n        \n    *   \n        \n        \\[ \\] 计划任务\n        \n        \n    *   \\[x\\] 完成任务\n    \n    ## 链接\n    \n    链接: [link](https://mp.csdn.net).\n    \n    图片: ![Alt](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw)\n    \n    带尺寸的图片: ![Alt](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw =30x30)\n    \n    居中的图片: ![Alt](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center)\n    \n    居中并且带尺寸的图片: ![Alt](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center =30x30)\n    \n\n```\n通过对比三个模块的markdown文件的结果，发现生成的效果第二个模块的我感觉还不错（对比项目那一块的结果，其他的基本上都一样。）\n\n","slug":"整理最全的 python 之markdown与HTML的互转的几个模块","published":1,"updated":"2021-11-06T20:15:34.746Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckw4ars6c002atyox4n1k4byx","content":"<h1 id=\"一、说明：\"><a href=\"#一、说明：\" class=\"headerlink\" title=\"一、说明：\"></a>一、说明：</h1><p>今天突然想着学习一下如何将markdown和HTML互转的知识，因为我在CSDN的写的博客可以导出的时候有俩种方式，所以想着也可以把他们相互转化下。我觉得python现在很成熟了，肯定有这方面的轮子。于是就上网搜索找了一些整理下。</p>\n<p>如果你只是转换单个文件，推荐直接在线转换：<a href=\"http://www.atool9.com/html2markdown.php\">在线互转地址</a></p>\n<p>其实这个在线地址里面有好多在线工具，需要的自己研究吧：<br><img src=\"https://img-blog.csdnimg.cn/20191128113313528.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjA4MTM4OQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/20191128113535233.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjA4MTM4OQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"二、互转模块：\"><a href=\"#二、互转模块：\" class=\"headerlink\" title=\"二、互转模块：\"></a>二、互转模块：</h1><h2 id=\"1、md转html\"><a href=\"#1、md转html\" class=\"headerlink\" title=\"1、md转html\"></a>1、md转html</h2><p>这里我找到俩个模块可以使用，但是<a href=\"https://pypi.org/project/md-to-html/\">md-to-html</a>模块效果不好，网上大多数使用的也是<a href=\"https://pypi.org/project/Markdown/\">markdown</a>的模块。</p>\n<h3 id=\"①、markdown模块（推荐）：\"><a href=\"#①、markdown模块（推荐）：\" class=\"headerlink\" title=\"①、markdown模块（推荐）：\"></a>①、markdown模块（推荐）：</h3><p>这里有一个我感觉还不错的<a href=\"https://www.smslit.top/2018/10/16/md2html_python/\">博客地址</a>，感兴趣的可以去学习看看：<br>第一步：下载安装：<a href=\"https://pypi.org/project/Markdown/\">markdown</a></p>\n<p>第二步：准备一个md文件，我这里是使用CSDN写作的部分帮助文档md。</p>\n<pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\">\n<span class=\"token title important\">快捷键\n<span class=\"token punctuation\">---------------------------</span></span>\n撤销：Ctrl/Command + Z\n重做：Ctrl/Command + Y\n加粗：Ctrl/Command + B\n斜体：Ctrl/Command + I\n标题：Ctrl/Command + Shift + H\n无序列表：Ctrl/Command + Shift + U\n有序列表：Ctrl/Command + Shift + O\n检查列表：Ctrl/Command + Shift + C\n插入代码：Ctrl/Command + Shift + K\n插入链接：Ctrl/Command + Shift + L\n插入图片：Ctrl/Command + Shift + G\n查找：Command + F\n替换：Command + G\n\n<span class=\"token title important\">标题\n<span class=\"token punctuation\">---------------------------</span></span>\n<span class=\"token title important\"><span class=\"token punctuation\">#</span> 1级标题</span>\n<span class=\"token title important\"><span class=\"token punctuation\">##</span> 2级标题</span>\n<span class=\"token title important\"><span class=\"token punctuation\">###</span> 3级标题</span>\n<span class=\"token title important\"><span class=\"token punctuation\">####</span> 四级标题 </span>\n<span class=\"token title important\"><span class=\"token punctuation\">#####</span> 五级标题  </span>\n<span class=\"token title important\"><span class=\"token punctuation\">######</span> 六级标题</span>\n\n<span class=\"token title important\">文本样式\n<span class=\"token punctuation\">---------------------------</span></span>\n<span class=\"token italic\"><span class=\"token punctuation\">*</span><span class=\"token content\">强调文本</span><span class=\"token punctuation\">*</span></span> <span class=\"token italic\"><span class=\"token punctuation\">_</span><span class=\"token content\">强调文本</span><span class=\"token punctuation\">_</span></span>\n\n<span class=\"token bold\"><span class=\"token punctuation\">**</span><span class=\"token content\">加粗文本</span><span class=\"token punctuation\">**</span></span> <span class=\"token bold\"><span class=\"token punctuation\">__</span><span class=\"token content\">加粗文本</span><span class=\"token punctuation\">__</span></span>\n\n==标记文本==\n\n<span class=\"token strike\"><span class=\"token punctuation\">~~</span><span class=\"token content\">删除文本</span><span class=\"token punctuation\">~~</span></span>\n\n<span class=\"token blockquote punctuation\">></span> 引用文本\n\nH<span class=\"token strike\"><span class=\"token punctuation\">~</span><span class=\"token content\">2</span><span class=\"token punctuation\">~</span></span>O is是液体。\n\n2^10^ 运算结果是 1024。\n\n<span class=\"token title important\">列表\n<span class=\"token punctuation\">---------------------------</span></span>\n<span class=\"token list punctuation\">-</span> 项目\n  <span class=\"token list punctuation\">*</span> 项目\n    <span class=\"token list punctuation\">+</span> 项目\n\n<span class=\"token list punctuation\">1.</span> 项目1\n<span class=\"token list punctuation\">2.</span> 项目2\n<span class=\"token list punctuation\">3.</span> 项目3\n\n<span class=\"token list punctuation\">-</span> [ ] 计划任务\n<span class=\"token list punctuation\">-</span> [x] 完成任务\n\n<span class=\"token title important\">链接\n<span class=\"token punctuation\">---------------------------</span></span>\n链接: <span class=\"token url\">[<span class=\"token content\">link</span>](<span class=\"token url\">https://mp.csdn.net</span>)</span>.\n\n图片: <span class=\"token url\"><span class=\"token operator\">!</span>[<span class=\"token content\">Alt</span>](<span class=\"token url\">https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw</span>)</span>\n\n带尺寸的图片: ![Alt](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw =30x30)\n\n居中的图片: <span class=\"token url\"><span class=\"token operator\">!</span>[<span class=\"token content\">Alt</span>](<span class=\"token url\">https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center</span>)</span>\n\n居中并且带尺寸的图片: ![Alt](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center =30x30)\n\n\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>第三步：可以直接复制测试：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">\n<span class=\"token keyword\">from</span> markdown <span class=\"token keyword\">import</span> markdown\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">dir</span><span class=\"token punctuation\">(</span>markdown<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token builtin\">file</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'help.md'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'r'</span><span class=\"token punctuation\">,</span>encoding<span class=\"token operator\">=</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nhtml <span class=\"token operator\">=</span> markdown<span class=\"token punctuation\">(</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>html<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ret.html'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'w'</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">:</span>\n    <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>html<span class=\"token punctuation\">)</span>\n\n\n\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>然后看出输入的ret.html文件。<br><img src=\"https://img-blog.csdnimg.cn/20191128112813299.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjA4MTM4OQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"②、md-to-html模块（不推荐）：\"><a href=\"#②、md-to-html模块（不推荐）：\" class=\"headerlink\" title=\"②、md-to-html模块（不推荐）：\"></a>②、md-to-html模块（不推荐）：</h3><p><a href=\"https://pypi.org/project/md-to-html/\">模块地址：</a><br>第一步:安装md-to-html：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">\npip <span class=\"token function\">install</span> md-to-html\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>第二步：准备一个gbk的md文件，我直接使用刚刚的会报编码错误，然后桌面新建一个dbk的txt就可以了，但是转换效果极差。</p>\n<p>第三步：</p>\n<p>cmd或者powershell中执行命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">md-to-html -i .<span class=\"token punctuation\">\\</span>help.txt -o .<span class=\"token punctuation\">\\</span>ret2.html\n    \n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>结果就是：<br><img src=\"https://img-blog.csdnimg.cn/20191128114156449.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjA4MTM4OQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>发现没有，笔者刚刚的转换少了很多东西，所以这个模块做的效果不好，不建议使用这个，推荐使用第一个模块。<br><img src=\"https://img-blog.csdnimg.cn/20191128114021640.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjA4MTM4OQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"2、html转md：\"><a href=\"#2、html转md：\" class=\"headerlink\" title=\"2、html转md：\"></a>2、html转md：</h2><h3 id=\"①、tomd模块：\"><a href=\"#①、tomd模块：\" class=\"headerlink\" title=\"①、tomd模块：\"></a>①、tomd模块：</h3><p><a href=\"https://pypi.org/project/tomd/\">模块地址。</a><br>安装：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">\npip <span class=\"token function\">install</span> tomd\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>第一步：使用刚刚成的html或者导出自己的一份博客的HTML文件进行测试。<br>这里我贴下我刚刚转存成功的。</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span>快捷键<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>撤销：Ctrl/Command + Z\n重做：Ctrl/Command + Y\n加粗：Ctrl/Command + B\n斜体：Ctrl/Command + I\n标题：Ctrl/Command + Shift + H\n无序列表：Ctrl/Command + Shift + U\n有序列表：Ctrl/Command + Shift + O\n检查列表：Ctrl/Command + Shift + C\n插入代码：Ctrl/Command + Shift + K\n插入链接：Ctrl/Command + Shift + L\n插入图片：Ctrl/Command + Shift + G\n查找：Command + F\n替换：Command + G<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span>标题<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>1级标题<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span>2级标题<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h3</span><span class=\"token punctuation\">></span></span>3级标题<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h3</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h4</span><span class=\"token punctuation\">></span></span>四级标题<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h4</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h5</span><span class=\"token punctuation\">></span></span>五级标题<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h5</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h6</span><span class=\"token punctuation\">></span></span>六级标题<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h6</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span>文本样式<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>em</span><span class=\"token punctuation\">></span></span>强调文本<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>em</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>em</span><span class=\"token punctuation\">></span></span>强调文本<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>em</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>strong</span><span class=\"token punctuation\">></span></span>加粗文本<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>strong</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>strong</span><span class=\"token punctuation\">></span></span>加粗文本<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>strong</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>==标记文本==<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>~~删除文本~~<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>blockquote</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>引用文本<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>blockquote</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>H~2~O is是液体。<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>2^10^ 运算结果是 1024。<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span>列表<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>项目<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>项目<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>项目<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>项目1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>项目2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>项目3<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>[ ] 计划任务<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>[x] 完成任务<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span>链接<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>链接: <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://mp.csdn.net<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>link<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span>.<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>图片: <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Alt<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>带尺寸的图片: <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Alt<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw =30x30<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>居中的图片: <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Alt<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>居中并且带尺寸的图片: <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Alt<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center =30x30<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>第二步：<br>转换代码：<br>其中：ret.html就是上面的html，make.md就是转换成功的markdown文件。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">\n<span class=\"token keyword\">from</span> tomd <span class=\"token keyword\">import</span> Tomd\n\nmd_text <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ret.html'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nmarkdown <span class=\"token operator\">=</span> Tomd<span class=\"token punctuation\">(</span>md_text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>markdown\n<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'make.md'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'w'</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">:</span>\n    <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>markdown<span class=\"token punctuation\">)</span>\n\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>成功的md文件：</p>\n<pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\">\n<span class=\"token title important\"><span class=\"token punctuation\">##</span> 快捷键</span>\n\n撤销：Ctrl/Command + Z\n重做：Ctrl/Command + Y\n加粗：Ctrl/Command + B\n斜体：Ctrl/Command + I\n标题：Ctrl/Command + Shift + H\n无序列表：Ctrl/Command + Shift + U\n有序列表：Ctrl/Command + Shift + O\n检查列表：Ctrl/Command + Shift + C\n插入代码：Ctrl/Command + Shift + K\n插入链接：Ctrl/Command + Shift + L\n插入图片：Ctrl/Command + Shift + G\n查找：Command + F\n替换：Command + G\n\n<span class=\"token title important\"><span class=\"token punctuation\">##</span> 标题</span>\n\n<span class=\"token title important\"><span class=\"token punctuation\">#</span> 1级标题</span>\n\n<span class=\"token title important\"><span class=\"token punctuation\">##</span> 2级标题</span>\n\n<span class=\"token title important\"><span class=\"token punctuation\">###</span> 3级标题</span>\n\n<span class=\"token title important\"><span class=\"token punctuation\">####</span> 四级标题</span>\n\n<span class=\"token title important\"><span class=\"token punctuation\">#####</span> 五级标题</span>\n\n<span class=\"token title important\"><span class=\"token punctuation\">######</span> 六级标题</span>\n\n<span class=\"token title important\"><span class=\"token punctuation\">##</span> 文本样式</span>\n\n<span class=\"token bold\"><span class=\"token punctuation\">**</span><span class=\"token content\">强调文本</span><span class=\"token punctuation\">**</span></span> <span class=\"token bold\"><span class=\"token punctuation\">**</span><span class=\"token content\">强调文本</span><span class=\"token punctuation\">**</span></span>\n\n<span class=\"token bold\"><span class=\"token punctuation\">**</span><span class=\"token content\">加粗文本</span><span class=\"token punctuation\">**</span></span> <span class=\"token bold\"><span class=\"token punctuation\">**</span><span class=\"token content\">加粗文本</span><span class=\"token punctuation\">**</span></span>\n\n==标记文本==\n\n<span class=\"token strike\"><span class=\"token punctuation\">~~</span><span class=\"token content\">删除文本</span><span class=\"token punctuation\">~~</span></span>\n\n<span class=\"token blockquote punctuation\">></span> \n引用文本\n\n\nH<span class=\"token strike\"><span class=\"token punctuation\">~</span><span class=\"token content\">2</span><span class=\"token punctuation\">~</span></span>O is是液体。\n\n2^10^ 运算结果是 1024。\n\n<span class=\"token title important\"><span class=\"token punctuation\">##</span> 列表</span>\n\n<span class=\"token list punctuation\">-</span> 项目\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>\n项目\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span>\n<span class=\"token list punctuation\">-</span> 项目\n\n项目1\n\n项目3\n\n[ ] 计划任务\n\n<span class=\"token title important\"><span class=\"token punctuation\">##</span> 链接</span>\n\n链接: <span class=\"token url\">[<span class=\"token content\">link</span>](<span class=\"token url\">https://mp.csdn.net</span>)</span>.\n\n图片: <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Alt<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n\n带尺寸的图片: <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Alt<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw =30x30<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n\n居中的图片: <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Alt<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n\n居中并且带尺寸的图片: <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Alt<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center =30x30<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"②、html2text文件（推荐）：\"><a href=\"#②、html2text文件（推荐）：\" class=\"headerlink\" title=\"②、html2text文件（推荐）：\"></a>②、html2text文件（推荐）：</h3><p><a href=\"https://pypi.org/project/html2text/\">模块地址：</a></p>\n<p>安装模块：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">\npip <span class=\"token function\">install</span> html2text\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>转换代码：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">\n<span class=\"token keyword\">import</span> html2text\n\n\nmd_text <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ret.html'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nmarkdown <span class=\"token operator\">=</span> html2text<span class=\"token punctuation\">.</span>html2text<span class=\"token punctuation\">(</span>md_text<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'make2.md'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'w'</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">:</span>\n    <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>markdown<span class=\"token punctuation\">)</span>\n\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>最后生成一个make2.md文件。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">\n## 快捷键\n\n撤销：Ctrl&#x2F;Command + Z 重做：Ctrl&#x2F;Command + Y 加粗：Ctrl&#x2F;Command + B 斜体：Ctrl&#x2F;Command +\nI 标题：Ctrl&#x2F;Command + Shift + H 无序列表：Ctrl&#x2F;Command + Shift + U 有序列表：Ctrl&#x2F;Command\n+ Shift + O 检查列表：Ctrl&#x2F;Command + Shift + C 插入代码：Ctrl&#x2F;Command + Shift + K\n插入链接：Ctrl&#x2F;Command + Shift + L 插入图片：Ctrl&#x2F;Command + Shift + G 查找：Command + F\n替换：Command + G\n\n## 标题\n\n# 1级标题\n\n## 2级标题\n\n### 3级标题\n\n#### 四级标题\n\n##### 五级标题\n\n###### 六级标题\n\n## 文本样式\n\n_强调文本_ _强调文本_\n\n**加粗文本** **加粗文本**\n\n&#x3D;&#x3D;标记文本&#x3D;&#x3D;\n\n~~删除文本~~\n\n&gt; 引用文本\n\nH~2~O is是液体。\n\n2^10^ 运算结果是 1024。\n\n## 列表\n\n  * 项目\n  * 项目\n\n    * 项目\n  * 项目1\n\n项目2\n\n  * 项目3\n\n  * [ ] 计划任务\n\n  * [x] 完成任务\n\n## 链接\n\n链接: [link](https:&#x2F;&#x2F;mp.csdn.net).\n\n图片:\n![Alt](https:&#x2F;&#x2F;imgconvert.csdnimg.cn&#x2F;aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw)\n\n带尺寸的图片:\n![Alt](https:&#x2F;&#x2F;imgconvert.csdnimg.cn&#x2F;aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw\n&#x3D;30x30)\n\n居中的图片:\n![Alt](https:&#x2F;&#x2F;imgconvert.csdnimg.cn&#x2F;aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center)\n\n居中并且带尺寸的图片:\n![Alt](https:&#x2F;&#x2F;imgconvert.csdnimg.cn&#x2F;aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center\n&#x3D;30x30)\n\n\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"③、html2markdown模块：\"><a href=\"#③、html2markdown模块：\" class=\"headerlink\" title=\"③、html2markdown模块：\"></a>③、html2markdown模块：</h3><p><a href=\"https://pypi.org/project/html2markdown/\">模块地址：</a></p>\n<p>安装：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pip <span class=\"token function\">install</span> html2markdown<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>转换代码：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">\n<span class=\"token keyword\">import</span> html2markdown\n\n\nmd_text <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ret.html'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nmarkdown <span class=\"token operator\">=</span> html2markdown<span class=\"token punctuation\">.</span>convert<span class=\"token punctuation\">(</span>md_text<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'make3.md'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'w'</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">:</span>\n    <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>markdown<span class=\"token punctuation\">)</span>\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>最后生成md文件：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">\n## 快捷键\n\n撤销：Ctrl&#x2F;Command + Z重做：Ctrl&#x2F;Command + Y加粗：Ctrl&#x2F;Command + B斜体：Ctrl&#x2F;Command + I标题：Ctrl&#x2F;Command + Shift + H无序列表：Ctrl&#x2F;Command + Shift + U有序列表：Ctrl&#x2F;Command + Shift + O检查列表：Ctrl&#x2F;Command + Shift + C插入代码：Ctrl&#x2F;Command + Shift + K插入链接：Ctrl&#x2F;Command + Shift + L插入图片：Ctrl&#x2F;Command + Shift + G查找：Command + F替换：Command + G\n\n## 标题\n\n# 1级标题\n\n## 2级标题\n\n### 3级标题\n\n#### 四级标题\n\n##### 五级标题\n\n###### 六级标题\n\n## 文本样式\n\n_强调文本_ _强调文本_\n\n__加粗文本__ __加粗文本__\n\n&#x3D;&#x3D;标记文本&#x3D;&#x3D;\n\n~~删除文本~~\n\n&gt;  \n&gt; 引用文本\n&gt; \n\nH~2~O is是液体。\n\n2^10^ 运算结果是 1024。\n\n## 列表\n\n*   项目\n*   \n    \n    项目\n    \n    \n    \n    *   项目\n    \n    \n    \n*   \n    \n    项目1\n    \n    \n*   项目2\n*   \n    \n    项目3\n    \n    \n*   \n    \n    \\[ \\] 计划任务\n    \n    \n*   \\[x\\] 完成任务\n\n## 链接\n\n链接: [link](https:&#x2F;&#x2F;mp.csdn.net).\n\n图片: ![Alt](https:&#x2F;&#x2F;imgconvert.csdnimg.cn&#x2F;aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw)\n\n带尺寸的图片: ![Alt](https:&#x2F;&#x2F;imgconvert.csdnimg.cn&#x2F;aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw &#x3D;30x30)\n\n居中的图片: ![Alt](https:&#x2F;&#x2F;imgconvert.csdnimg.cn&#x2F;aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center)\n\n居中并且带尺寸的图片: ![Alt](https:&#x2F;&#x2F;imgconvert.csdnimg.cn&#x2F;aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center &#x3D;30x30)\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>通过对比三个模块的markdown文件的结果，发现生成的效果第二个模块的我感觉还不错（对比项目那一块的结果，其他的基本上都一样。）</p>\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<h1 id=\"一、说明：\"><a href=\"#一、说明：\" class=\"headerlink\" title=\"一、说明：\"></a>一、说明：</h1><p>今天突然想着学习一下如何将markdown和HTML互转的知识，因为我在CSDN的写的博客可以导出的时候有俩种方式，所以想着也可以把他们相互转化下。我觉得python现在很成熟了，肯定有这方面的轮子。于是就上网搜索找了一些整理下。</p>\n<p>如果你只是转换单个文件，推荐直接在线转换：<a href=\"http://www.atool9.com/html2markdown.php\">在线互转地址</a></p>\n<p>其实这个在线地址里面有好多在线工具，需要的自己研究吧：<br><img src=\"https://img-blog.csdnimg.cn/20191128113313528.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjA4MTM4OQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/20191128113535233.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjA4MTM4OQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h1 id=\"二、互转模块：\"><a href=\"#二、互转模块：\" class=\"headerlink\" title=\"二、互转模块：\"></a>二、互转模块：</h1><h2 id=\"1、md转html\"><a href=\"#1、md转html\" class=\"headerlink\" title=\"1、md转html\"></a>1、md转html</h2><p>这里我找到俩个模块可以使用，但是<a href=\"https://pypi.org/project/md-to-html/\">md-to-html</a>模块效果不好，网上大多数使用的也是<a href=\"https://pypi.org/project/Markdown/\">markdown</a>的模块。</p>\n<h3 id=\"①、markdown模块（推荐）：\"><a href=\"#①、markdown模块（推荐）：\" class=\"headerlink\" title=\"①、markdown模块（推荐）：\"></a>①、markdown模块（推荐）：</h3><p>这里有一个我感觉还不错的<a href=\"https://www.smslit.top/2018/10/16/md2html_python/\">博客地址</a>，感兴趣的可以去学习看看：<br>第一步：下载安装：<a href=\"https://pypi.org/project/Markdown/\">markdown</a></p>\n<p>第二步：准备一个md文件，我这里是使用CSDN写作的部分帮助文档md。</p>\n<pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\">\n<span class=\"token title important\">快捷键\n<span class=\"token punctuation\">---------------------------</span></span>\n撤销：Ctrl/Command + Z\n重做：Ctrl/Command + Y\n加粗：Ctrl/Command + B\n斜体：Ctrl/Command + I\n标题：Ctrl/Command + Shift + H\n无序列表：Ctrl/Command + Shift + U\n有序列表：Ctrl/Command + Shift + O\n检查列表：Ctrl/Command + Shift + C\n插入代码：Ctrl/Command + Shift + K\n插入链接：Ctrl/Command + Shift + L\n插入图片：Ctrl/Command + Shift + G\n查找：Command + F\n替换：Command + G\n\n<span class=\"token title important\">标题\n<span class=\"token punctuation\">---------------------------</span></span>\n<span class=\"token title important\"><span class=\"token punctuation\">#</span> 1级标题</span>\n<span class=\"token title important\"><span class=\"token punctuation\">##</span> 2级标题</span>\n<span class=\"token title important\"><span class=\"token punctuation\">###</span> 3级标题</span>\n<span class=\"token title important\"><span class=\"token punctuation\">####</span> 四级标题 </span>\n<span class=\"token title important\"><span class=\"token punctuation\">#####</span> 五级标题  </span>\n<span class=\"token title important\"><span class=\"token punctuation\">######</span> 六级标题</span>\n\n<span class=\"token title important\">文本样式\n<span class=\"token punctuation\">---------------------------</span></span>\n<span class=\"token italic\"><span class=\"token punctuation\">*</span><span class=\"token content\">强调文本</span><span class=\"token punctuation\">*</span></span> <span class=\"token italic\"><span class=\"token punctuation\">_</span><span class=\"token content\">强调文本</span><span class=\"token punctuation\">_</span></span>\n\n<span class=\"token bold\"><span class=\"token punctuation\">**</span><span class=\"token content\">加粗文本</span><span class=\"token punctuation\">**</span></span> <span class=\"token bold\"><span class=\"token punctuation\">__</span><span class=\"token content\">加粗文本</span><span class=\"token punctuation\">__</span></span>\n\n==标记文本==\n\n<span class=\"token strike\"><span class=\"token punctuation\">~~</span><span class=\"token content\">删除文本</span><span class=\"token punctuation\">~~</span></span>\n\n<span class=\"token blockquote punctuation\">></span> 引用文本\n\nH<span class=\"token strike\"><span class=\"token punctuation\">~</span><span class=\"token content\">2</span><span class=\"token punctuation\">~</span></span>O is是液体。\n\n2^10^ 运算结果是 1024。\n\n<span class=\"token title important\">列表\n<span class=\"token punctuation\">---------------------------</span></span>\n<span class=\"token list punctuation\">-</span> 项目\n  <span class=\"token list punctuation\">*</span> 项目\n    <span class=\"token list punctuation\">+</span> 项目\n\n<span class=\"token list punctuation\">1.</span> 项目1\n<span class=\"token list punctuation\">2.</span> 项目2\n<span class=\"token list punctuation\">3.</span> 项目3\n\n<span class=\"token list punctuation\">-</span> [ ] 计划任务\n<span class=\"token list punctuation\">-</span> [x] 完成任务\n\n<span class=\"token title important\">链接\n<span class=\"token punctuation\">---------------------------</span></span>\n链接: <span class=\"token url\">[<span class=\"token content\">link</span>](<span class=\"token url\">https://mp.csdn.net</span>)</span>.\n\n图片: <span class=\"token url\"><span class=\"token operator\">!</span>[<span class=\"token content\">Alt</span>](<span class=\"token url\">https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw</span>)</span>\n\n带尺寸的图片: ![Alt](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw =30x30)\n\n居中的图片: <span class=\"token url\"><span class=\"token operator\">!</span>[<span class=\"token content\">Alt</span>](<span class=\"token url\">https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center</span>)</span>\n\n居中并且带尺寸的图片: ![Alt](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center =30x30)\n\n\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>第三步：可以直接复制测试：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">\n<span class=\"token keyword\">from</span> markdown <span class=\"token keyword\">import</span> markdown\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">dir</span><span class=\"token punctuation\">(</span>markdown<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token builtin\">file</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'help.md'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'r'</span><span class=\"token punctuation\">,</span>encoding<span class=\"token operator\">=</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nhtml <span class=\"token operator\">=</span> markdown<span class=\"token punctuation\">(</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>html<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ret.html'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'w'</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">:</span>\n    <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>html<span class=\"token punctuation\">)</span>\n\n\n\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>然后看出输入的ret.html文件。<br><img src=\"https://img-blog.csdnimg.cn/20191128112813299.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjA4MTM4OQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"②、md-to-html模块（不推荐）：\"><a href=\"#②、md-to-html模块（不推荐）：\" class=\"headerlink\" title=\"②、md-to-html模块（不推荐）：\"></a>②、md-to-html模块（不推荐）：</h3><p><a href=\"https://pypi.org/project/md-to-html/\">模块地址：</a><br>第一步:安装md-to-html：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">\npip <span class=\"token function\">install</span> md-to-html\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>第二步：准备一个gbk的md文件，我直接使用刚刚的会报编码错误，然后桌面新建一个dbk的txt就可以了，但是转换效果极差。</p>\n<p>第三步：</p>\n<p>cmd或者powershell中执行命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">md-to-html -i .<span class=\"token punctuation\">\\</span>help.txt -o .<span class=\"token punctuation\">\\</span>ret2.html\n    \n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>结果就是：<br><img src=\"https://img-blog.csdnimg.cn/20191128114156449.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjA4MTM4OQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"><br>发现没有，笔者刚刚的转换少了很多东西，所以这个模块做的效果不好，不建议使用这个，推荐使用第一个模块。<br><img src=\"https://img-blog.csdnimg.cn/20191128114021640.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjA4MTM4OQ==,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<h2 id=\"2、html转md：\"><a href=\"#2、html转md：\" class=\"headerlink\" title=\"2、html转md：\"></a>2、html转md：</h2><h3 id=\"①、tomd模块：\"><a href=\"#①、tomd模块：\" class=\"headerlink\" title=\"①、tomd模块：\"></a>①、tomd模块：</h3><p><a href=\"https://pypi.org/project/tomd/\">模块地址。</a><br>安装：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">\npip <span class=\"token function\">install</span> tomd\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>第一步：使用刚刚成的html或者导出自己的一份博客的HTML文件进行测试。<br>这里我贴下我刚刚转存成功的。</p>\n<pre class=\"line-numbers language-html\" data-language=\"html\"><code class=\"language-html\">\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span>快捷键<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>撤销：Ctrl/Command + Z\n重做：Ctrl/Command + Y\n加粗：Ctrl/Command + B\n斜体：Ctrl/Command + I\n标题：Ctrl/Command + Shift + H\n无序列表：Ctrl/Command + Shift + U\n有序列表：Ctrl/Command + Shift + O\n检查列表：Ctrl/Command + Shift + C\n插入代码：Ctrl/Command + Shift + K\n插入链接：Ctrl/Command + Shift + L\n插入图片：Ctrl/Command + Shift + G\n查找：Command + F\n替换：Command + G<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span>标题<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>1级标题<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span>2级标题<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h3</span><span class=\"token punctuation\">></span></span>3级标题<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h3</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h4</span><span class=\"token punctuation\">></span></span>四级标题<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h4</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h5</span><span class=\"token punctuation\">></span></span>五级标题<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h5</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h6</span><span class=\"token punctuation\">></span></span>六级标题<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h6</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span>文本样式<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>em</span><span class=\"token punctuation\">></span></span>强调文本<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>em</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>em</span><span class=\"token punctuation\">></span></span>强调文本<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>em</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>strong</span><span class=\"token punctuation\">></span></span>加粗文本<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>strong</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>strong</span><span class=\"token punctuation\">></span></span>加粗文本<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>strong</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>==标记文本==<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>~~删除文本~~<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>blockquote</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>引用文本<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>blockquote</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>H~2~O is是液体。<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>2^10^ 运算结果是 1024。<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span>列表<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>项目<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>项目<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>项目<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>项目1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>项目2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>项目3<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>[ ] 计划任务<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>[x] 完成任务<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span>链接<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>链接: <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://mp.csdn.net<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>link<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span>.<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>图片: <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Alt<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>带尺寸的图片: <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Alt<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw =30x30<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>居中的图片: <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Alt<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>居中并且带尺寸的图片: <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Alt<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center =30x30<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>第二步：<br>转换代码：<br>其中：ret.html就是上面的html，make.md就是转换成功的markdown文件。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">\n<span class=\"token keyword\">from</span> tomd <span class=\"token keyword\">import</span> Tomd\n\nmd_text <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ret.html'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nmarkdown <span class=\"token operator\">=</span> Tomd<span class=\"token punctuation\">(</span>md_text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>markdown\n<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'make.md'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'w'</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">:</span>\n    <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>markdown<span class=\"token punctuation\">)</span>\n\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>成功的md文件：</p>\n<pre class=\"line-numbers language-markdown\" data-language=\"markdown\"><code class=\"language-markdown\">\n<span class=\"token title important\"><span class=\"token punctuation\">##</span> 快捷键</span>\n\n撤销：Ctrl/Command + Z\n重做：Ctrl/Command + Y\n加粗：Ctrl/Command + B\n斜体：Ctrl/Command + I\n标题：Ctrl/Command + Shift + H\n无序列表：Ctrl/Command + Shift + U\n有序列表：Ctrl/Command + Shift + O\n检查列表：Ctrl/Command + Shift + C\n插入代码：Ctrl/Command + Shift + K\n插入链接：Ctrl/Command + Shift + L\n插入图片：Ctrl/Command + Shift + G\n查找：Command + F\n替换：Command + G\n\n<span class=\"token title important\"><span class=\"token punctuation\">##</span> 标题</span>\n\n<span class=\"token title important\"><span class=\"token punctuation\">#</span> 1级标题</span>\n\n<span class=\"token title important\"><span class=\"token punctuation\">##</span> 2级标题</span>\n\n<span class=\"token title important\"><span class=\"token punctuation\">###</span> 3级标题</span>\n\n<span class=\"token title important\"><span class=\"token punctuation\">####</span> 四级标题</span>\n\n<span class=\"token title important\"><span class=\"token punctuation\">#####</span> 五级标题</span>\n\n<span class=\"token title important\"><span class=\"token punctuation\">######</span> 六级标题</span>\n\n<span class=\"token title important\"><span class=\"token punctuation\">##</span> 文本样式</span>\n\n<span class=\"token bold\"><span class=\"token punctuation\">**</span><span class=\"token content\">强调文本</span><span class=\"token punctuation\">**</span></span> <span class=\"token bold\"><span class=\"token punctuation\">**</span><span class=\"token content\">强调文本</span><span class=\"token punctuation\">**</span></span>\n\n<span class=\"token bold\"><span class=\"token punctuation\">**</span><span class=\"token content\">加粗文本</span><span class=\"token punctuation\">**</span></span> <span class=\"token bold\"><span class=\"token punctuation\">**</span><span class=\"token content\">加粗文本</span><span class=\"token punctuation\">**</span></span>\n\n==标记文本==\n\n<span class=\"token strike\"><span class=\"token punctuation\">~~</span><span class=\"token content\">删除文本</span><span class=\"token punctuation\">~~</span></span>\n\n<span class=\"token blockquote punctuation\">></span> \n引用文本\n\n\nH<span class=\"token strike\"><span class=\"token punctuation\">~</span><span class=\"token content\">2</span><span class=\"token punctuation\">~</span></span>O is是液体。\n\n2^10^ 运算结果是 1024。\n\n<span class=\"token title important\"><span class=\"token punctuation\">##</span> 列表</span>\n\n<span class=\"token list punctuation\">-</span> 项目\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>\n项目\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span>\n<span class=\"token list punctuation\">-</span> 项目\n\n项目1\n\n项目3\n\n[ ] 计划任务\n\n<span class=\"token title important\"><span class=\"token punctuation\">##</span> 链接</span>\n\n链接: <span class=\"token url\">[<span class=\"token content\">link</span>](<span class=\"token url\">https://mp.csdn.net</span>)</span>.\n\n图片: <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Alt<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n\n带尺寸的图片: <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Alt<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw =30x30<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n\n居中的图片: <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Alt<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n\n居中并且带尺寸的图片: <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>Alt<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center =30x30<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span>\n\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"②、html2text文件（推荐）：\"><a href=\"#②、html2text文件（推荐）：\" class=\"headerlink\" title=\"②、html2text文件（推荐）：\"></a>②、html2text文件（推荐）：</h3><p><a href=\"https://pypi.org/project/html2text/\">模块地址：</a></p>\n<p>安装模块：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">\npip <span class=\"token function\">install</span> html2text\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>转换代码：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">\n<span class=\"token keyword\">import</span> html2text\n\n\nmd_text <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ret.html'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nmarkdown <span class=\"token operator\">=</span> html2text<span class=\"token punctuation\">.</span>html2text<span class=\"token punctuation\">(</span>md_text<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'make2.md'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'w'</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">:</span>\n    <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>markdown<span class=\"token punctuation\">)</span>\n\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>最后生成一个make2.md文件。</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">\n## 快捷键\n\n撤销：Ctrl&#x2F;Command + Z 重做：Ctrl&#x2F;Command + Y 加粗：Ctrl&#x2F;Command + B 斜体：Ctrl&#x2F;Command +\nI 标题：Ctrl&#x2F;Command + Shift + H 无序列表：Ctrl&#x2F;Command + Shift + U 有序列表：Ctrl&#x2F;Command\n+ Shift + O 检查列表：Ctrl&#x2F;Command + Shift + C 插入代码：Ctrl&#x2F;Command + Shift + K\n插入链接：Ctrl&#x2F;Command + Shift + L 插入图片：Ctrl&#x2F;Command + Shift + G 查找：Command + F\n替换：Command + G\n\n## 标题\n\n# 1级标题\n\n## 2级标题\n\n### 3级标题\n\n#### 四级标题\n\n##### 五级标题\n\n###### 六级标题\n\n## 文本样式\n\n_强调文本_ _强调文本_\n\n**加粗文本** **加粗文本**\n\n&#x3D;&#x3D;标记文本&#x3D;&#x3D;\n\n~~删除文本~~\n\n&gt; 引用文本\n\nH~2~O is是液体。\n\n2^10^ 运算结果是 1024。\n\n## 列表\n\n  * 项目\n  * 项目\n\n    * 项目\n  * 项目1\n\n项目2\n\n  * 项目3\n\n  * [ ] 计划任务\n\n  * [x] 完成任务\n\n## 链接\n\n链接: [link](https:&#x2F;&#x2F;mp.csdn.net).\n\n图片:\n![Alt](https:&#x2F;&#x2F;imgconvert.csdnimg.cn&#x2F;aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw)\n\n带尺寸的图片:\n![Alt](https:&#x2F;&#x2F;imgconvert.csdnimg.cn&#x2F;aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw\n&#x3D;30x30)\n\n居中的图片:\n![Alt](https:&#x2F;&#x2F;imgconvert.csdnimg.cn&#x2F;aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center)\n\n居中并且带尺寸的图片:\n![Alt](https:&#x2F;&#x2F;imgconvert.csdnimg.cn&#x2F;aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center\n&#x3D;30x30)\n\n\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"③、html2markdown模块：\"><a href=\"#③、html2markdown模块：\" class=\"headerlink\" title=\"③、html2markdown模块：\"></a>③、html2markdown模块：</h3><p><a href=\"https://pypi.org/project/html2markdown/\">模块地址：</a></p>\n<p>安装：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pip <span class=\"token function\">install</span> html2markdown<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>转换代码：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">\n<span class=\"token keyword\">import</span> html2markdown\n\n\nmd_text <span class=\"token operator\">=</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ret.html'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\nmarkdown <span class=\"token operator\">=</span> html2markdown<span class=\"token punctuation\">.</span>convert<span class=\"token punctuation\">(</span>md_text<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'make3.md'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'w'</span><span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">:</span>\n    <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>markdown<span class=\"token punctuation\">)</span>\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>最后生成md文件：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">\n## 快捷键\n\n撤销：Ctrl&#x2F;Command + Z重做：Ctrl&#x2F;Command + Y加粗：Ctrl&#x2F;Command + B斜体：Ctrl&#x2F;Command + I标题：Ctrl&#x2F;Command + Shift + H无序列表：Ctrl&#x2F;Command + Shift + U有序列表：Ctrl&#x2F;Command + Shift + O检查列表：Ctrl&#x2F;Command + Shift + C插入代码：Ctrl&#x2F;Command + Shift + K插入链接：Ctrl&#x2F;Command + Shift + L插入图片：Ctrl&#x2F;Command + Shift + G查找：Command + F替换：Command + G\n\n## 标题\n\n# 1级标题\n\n## 2级标题\n\n### 3级标题\n\n#### 四级标题\n\n##### 五级标题\n\n###### 六级标题\n\n## 文本样式\n\n_强调文本_ _强调文本_\n\n__加粗文本__ __加粗文本__\n\n&#x3D;&#x3D;标记文本&#x3D;&#x3D;\n\n~~删除文本~~\n\n&gt;  \n&gt; 引用文本\n&gt; \n\nH~2~O is是液体。\n\n2^10^ 运算结果是 1024。\n\n## 列表\n\n*   项目\n*   \n    \n    项目\n    \n    \n    \n    *   项目\n    \n    \n    \n*   \n    \n    项目1\n    \n    \n*   项目2\n*   \n    \n    项目3\n    \n    \n*   \n    \n    \\[ \\] 计划任务\n    \n    \n*   \\[x\\] 完成任务\n\n## 链接\n\n链接: [link](https:&#x2F;&#x2F;mp.csdn.net).\n\n图片: ![Alt](https:&#x2F;&#x2F;imgconvert.csdnimg.cn&#x2F;aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw)\n\n带尺寸的图片: ![Alt](https:&#x2F;&#x2F;imgconvert.csdnimg.cn&#x2F;aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw &#x3D;30x30)\n\n居中的图片: ![Alt](https:&#x2F;&#x2F;imgconvert.csdnimg.cn&#x2F;aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center)\n\n居中并且带尺寸的图片: ![Alt](https:&#x2F;&#x2F;imgconvert.csdnimg.cn&#x2F;aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center &#x3D;30x30)\n\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>通过对比三个模块的markdown文件的结果，发现生成的效果第二个模块的我感觉还不错（对比项目那一块的结果，其他的基本上都一样。）</p>\n"},{"title":"给Linux安装中文字体（解决Selenium截图出现乱码框）","author":"Will Holmes","date":"2021-11-03T02:32:47.000Z","_content":">用selenium做了一个网页截图的小功能，截出来的图片中有许多框框，这是因为linux缺少中文字体导致的。\n\n### 下载字体\nhttps://wwe.lanzoui.com/iKjPgw3109a\n\n### 安装字体\n```bash \nmkdir -p /usr/share/fonts/chinese/        #创建中文字体目录\ncp songti.ttf /usr/share/fonts/chinese/     #将字体文件拷贝到/usr/share/fonts/chinese/中\ncd /usr/share/fonts/chinese/\nfc-cache -fv                              #为刚加入的字体设置缓存使之有效\nfc-list                                   #查看系统中的字体\n```\n\n","source":"_posts/给Linux安装中文字体（解决Selenium截图出现乱码框）.md","raw":"---\ntitle: 给Linux安装中文字体（解决Selenium截图出现乱码框）\nauthor: Will Holmes\ncategories: Linux\ntags:\n  - Linux\n  - Selenium\ndate: 2021-11-03 10:32:47\n---\n>用selenium做了一个网页截图的小功能，截出来的图片中有许多框框，这是因为linux缺少中文字体导致的。\n\n### 下载字体\nhttps://wwe.lanzoui.com/iKjPgw3109a\n\n### 安装字体\n```bash \nmkdir -p /usr/share/fonts/chinese/        #创建中文字体目录\ncp songti.ttf /usr/share/fonts/chinese/     #将字体文件拷贝到/usr/share/fonts/chinese/中\ncd /usr/share/fonts/chinese/\nfc-cache -fv                              #为刚加入的字体设置缓存使之有效\nfc-list                                   #查看系统中的字体\n```\n\n","slug":"给Linux安装中文字体（解决Selenium截图出现乱码框）","published":1,"updated":"2021-11-03T02:39:00.724Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckw4ars6e002dtyox5mty2139","content":"<blockquote>\n<p>用selenium做了一个网页截图的小功能，截出来的图片中有许多框框，这是因为linux缺少中文字体导致的。</p>\n</blockquote>\n<h3 id=\"下载字体\"><a href=\"#下载字体\" class=\"headerlink\" title=\"下载字体\"></a>下载字体</h3><p><a href=\"https://wwe.lanzoui.com/iKjPgw3109a\">https://wwe.lanzoui.com/iKjPgw3109a</a></p>\n<h3 id=\"安装字体\"><a href=\"#安装字体\" class=\"headerlink\" title=\"安装字体\"></a>安装字体</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> -p /usr/share/fonts/chinese/        <span class=\"token comment\">#创建中文字体目录</span>\n<span class=\"token function\">cp</span> songti.ttf /usr/share/fonts/chinese/     <span class=\"token comment\">#将字体文件拷贝到/usr/share/fonts/chinese/中</span>\n<span class=\"token builtin class-name\">cd</span> /usr/share/fonts/chinese/\nfc-cache -fv                              <span class=\"token comment\">#为刚加入的字体设置缓存使之有效</span>\nfc-list                                   <span class=\"token comment\">#查看系统中的字体</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","site":{"data":{"friends":[{"avatar":"http://image.luokangyuan.com/1_qq_27922023.jpg","name":"码酱","introduction":"我不是大佬，只是在追寻大佬的脚步","url":"http://luokangyuan.com/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/4027734.jpeg","name":"闪烁之狐","introduction":"编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬","url":"https://blinkfox.github.io/","title":"前去学习"},{"avatar":"http://image.luokangyuan.com/avatar.jpg","name":"ja_rome","introduction":"平凡的脚步也可以走出伟大的行程","url":"https://me.csdn.net/jlh912008548","title":"前去学习"}]}},"excerpt":"","more":"<blockquote>\n<p>用selenium做了一个网页截图的小功能，截出来的图片中有许多框框，这是因为linux缺少中文字体导致的。</p>\n</blockquote>\n<h3 id=\"下载字体\"><a href=\"#下载字体\" class=\"headerlink\" title=\"下载字体\"></a>下载字体</h3><p><a href=\"https://wwe.lanzoui.com/iKjPgw3109a\">https://wwe.lanzoui.com/iKjPgw3109a</a></p>\n<h3 id=\"安装字体\"><a href=\"#安装字体\" class=\"headerlink\" title=\"安装字体\"></a>安装字体</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> -p /usr/share/fonts/chinese/        <span class=\"token comment\">#创建中文字体目录</span>\n<span class=\"token function\">cp</span> songti.ttf /usr/share/fonts/chinese/     <span class=\"token comment\">#将字体文件拷贝到/usr/share/fonts/chinese/中</span>\n<span class=\"token builtin class-name\">cd</span> /usr/share/fonts/chinese/\nfc-cache -fv                              <span class=\"token comment\">#为刚加入的字体设置缓存使之有效</span>\nfc-list                                   <span class=\"token comment\">#查看系统中的字体</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckw4ars4s0009tyox70cwfxb2","category_id":"ckw4ars4l0004tyox07kx7lt4","_id":"ckw4ars53000htyox1kpbcbzd"},{"post_id":"ckw4ars4d0001tyox8l0k3cyq","category_id":"ckw4ars4l0004tyox07kx7lt4","_id":"ckw4ars56000ltyox408v4vf6"},{"post_id":"ckw4ars4j0003tyoxapw2eipz","category_id":"ckw4ars4l0004tyox07kx7lt4","_id":"ckw4ars58000ptyox392j6xtq"},{"post_id":"ckw4ars55000ktyoxbv8r5ubr","category_id":"ckw4ars4l0004tyox07kx7lt4","_id":"ckw4ars5c000utyoxgng241ti"},{"post_id":"ckw4ars4p0007tyoxen41dp7a","category_id":"ckw4ars4l0004tyox07kx7lt4","_id":"ckw4ars5e000ytyox1cnkfixa"},{"post_id":"ckw4ars4u000btyox22up726p","category_id":"ckw4ars58000otyox2w9ge6mg","_id":"ckw4ars5g0010tyox2pbmdk3q"},{"post_id":"ckw4ars5d000xtyoxbmltarts","category_id":"ckw4ars5c000vtyoxhvox92eh","_id":"ckw4ars5j0016tyox6psd1hl6"},{"post_id":"ckw4ars4z000ftyox38vwewhz","category_id":"ckw4ars5c000vtyoxhvox92eh","_id":"ckw4ars5l001atyoxbt0oe7zv"},{"post_id":"ckw4ars52000gtyox0z0sakm7","category_id":"ckw4ars5c000vtyoxhvox92eh","_id":"ckw4ars5n001etyox9dj472bq"},{"post_id":"ckw4ars57000ntyoxgw4afik8","category_id":"ckw4ars5k0017tyox2aed7yqc","_id":"ckw4ars5v001jtyoxe4ecfhl6"},{"post_id":"ckw4ars5t001ityoxezkta5vd","category_id":"ckw4ars5o001ftyoxb8rr25r7","_id":"ckw4ars60001ptyox74le36hr"},{"post_id":"ckw4ars59000styoxf1lzawvd","category_id":"ckw4ars5o001ftyoxb8rr25r7","_id":"ckw4ars62001ttyoxdf7pd6je"},{"post_id":"ckw4ars5v001ktyox1ikcc84l","category_id":"ckw4ars5o001ftyoxb8rr25r7","_id":"ckw4ars64001wtyox0z5uen9e"},{"post_id":"ckw4ars5x001ntyox5f7p6bgo","category_id":"ckw4ars5o001ftyoxb8rr25r7","_id":"ckw4ars660020tyox1uq02wge"},{"post_id":"ckw4ars5b000ttyox7f45dqzl","category_id":"ckw4ars5o001ftyoxb8rr25r7","_id":"ckw4ars690024tyox3d5p58c6"},{"post_id":"ckw4ars5z001otyox0f402ntr","category_id":"ckw4ars5o001ftyoxb8rr25r7","_id":"ckw4ars6b0028tyox9bsghr80"},{"post_id":"ckw4ars61001styox67hxbxzl","category_id":"ckw4ars5o001ftyoxb8rr25r7","_id":"ckw4ars6d002btyox6ej6ez1f"},{"post_id":"ckw4ars5e000ztyox6xwk3w5i","category_id":"ckw4ars5o001ftyoxb8rr25r7","_id":"ckw4ars6f002etyoxcjscg6id"},{"post_id":"ckw4ars5g0012tyoxelus8eca","category_id":"ckw4ars5o001ftyoxb8rr25r7","_id":"ckw4ars6g002gtyox2jh01yvb"},{"post_id":"ckw4ars6a0027tyox9t1175i1","category_id":"ckw4ars5o001ftyoxb8rr25r7","_id":"ckw4ars6h002jtyox2h8nf9hy"},{"post_id":"ckw4ars5i0015tyoxbv2j8f3y","category_id":"ckw4ars5o001ftyoxb8rr25r7","_id":"ckw4ars6i002mtyoxfqht621j"},{"post_id":"ckw4ars6c002atyox4n1k4byx","category_id":"ckw4ars5o001ftyoxb8rr25r7","_id":"ckw4ars6i002ptyoxhc079x38"},{"post_id":"ckw4ars6e002dtyox5mty2139","category_id":"ckw4ars4l0004tyox07kx7lt4","_id":"ckw4ars6j002styox1a36gbmb"},{"post_id":"ckw4ars5k0019tyoxesrvhcux","category_id":"ckw4ars5o001ftyoxb8rr25r7","_id":"ckw4ars6k002vtyoxaatncezw"},{"post_id":"ckw4ars5m001dtyoxe0u2d1yi","category_id":"ckw4ars5o001ftyoxb8rr25r7","_id":"ckw4ars6k002xtyoxbml55zdh"},{"post_id":"ckw4ars5o001gtyox3famhqks","category_id":"ckw4ars5o001ftyoxb8rr25r7","_id":"ckw4ars6l0031tyox4mgk17q6"},{"post_id":"ckw4ars63001vtyoxaavu94ji","category_id":"ckw4ars6j002ttyox65gu5szp","_id":"ckw4ars6m0033tyox1y1hcnxx"},{"post_id":"ckw4ars65001ztyox82gvgaar","category_id":"ckw4ars6l0030tyoxhzjebc66","_id":"ckw4ars6n0036tyox5y9ffe7b"},{"post_id":"ckw4ars680023tyoxb1q07bcl","category_id":"ckw4ars6m0035tyoxdcawg3hr","_id":"ckw4ars6p003btyoxgtwkf1kw"}],"PostTag":[{"post_id":"ckw4ars4d0001tyox8l0k3cyq","tag_id":"ckw4ars4n0005tyox2u573ih4","_id":"ckw4ars56000mtyoxc9y0gfth"},{"post_id":"ckw4ars4d0001tyox8l0k3cyq","tag_id":"ckw4ars4v000dtyoxh0ifebrc","_id":"ckw4ars58000qtyox7gupgzbw"},{"post_id":"ckw4ars4j0003tyoxapw2eipz","tag_id":"ckw4ars54000jtyox7q0cc1es","_id":"ckw4ars5i0014tyox9odicii3"},{"post_id":"ckw4ars4j0003tyoxapw2eipz","tag_id":"ckw4ars59000rtyoxbcqicmlh","_id":"ckw4ars5k0018tyoxco5g30dc"},{"post_id":"ckw4ars4j0003tyoxapw2eipz","tag_id":"ckw4ars5d000wtyox76a4f22d","_id":"ckw4ars5m001ctyoxcxvw45ut"},{"post_id":"ckw4ars4p0007tyoxen41dp7a","tag_id":"ckw4ars5h0013tyoxfjns6myw","_id":"ckw4ars63001utyox28qv31r8"},{"post_id":"ckw4ars4p0007tyoxen41dp7a","tag_id":"ckw4ars4n0005tyox2u573ih4","_id":"ckw4ars65001ytyox0e8wbuef"},{"post_id":"ckw4ars4p0007tyoxen41dp7a","tag_id":"ckw4ars5s001htyox9vgf3fie","_id":"ckw4ars670022tyox2xfuauw5"},{"post_id":"ckw4ars4p0007tyoxen41dp7a","tag_id":"ckw4ars5x001mtyox5dcc4mdy","_id":"ckw4ars6a0026tyoxbxidfh3h"},{"post_id":"ckw4ars4s0009tyox70cwfxb2","tag_id":"ckw4ars4n0005tyox2u573ih4","_id":"ckw4ars6g002ityoxggue6le1"},{"post_id":"ckw4ars4s0009tyox70cwfxb2","tag_id":"ckw4ars61001rtyox3a8oa2y5","_id":"ckw4ars6h002ktyox6ewl067h"},{"post_id":"ckw4ars4s0009tyox70cwfxb2","tag_id":"ckw4ars4v000dtyoxh0ifebrc","_id":"ckw4ars6i002otyoxh09tbdog"},{"post_id":"ckw4ars4s0009tyox70cwfxb2","tag_id":"ckw4ars6b0029tyox02ynh6l8","_id":"ckw4ars6j002qtyox0bq5hipt"},{"post_id":"ckw4ars6e002dtyox5mty2139","tag_id":"ckw4ars4n0005tyox2u573ih4","_id":"ckw4ars6k002utyoxbg9xehpd"},{"post_id":"ckw4ars6e002dtyox5mty2139","tag_id":"ckw4ars6b0029tyox02ynh6l8","_id":"ckw4ars6k002wtyox1a8675rp"},{"post_id":"ckw4ars4u000btyox22up726p","tag_id":"ckw4ars6f002ftyox5dw28we0","_id":"ckw4ars6l002ztyoxdqyq8uyz"},{"post_id":"ckw4ars4u000btyox22up726p","tag_id":"ckw4ars6h002ltyox11t7hm0j","_id":"ckw4ars6m0032tyoxe5232mhm"},{"post_id":"ckw4ars4z000ftyox38vwewhz","tag_id":"ckw4ars6j002rtyox8sf39j4q","_id":"ckw4ars6o0038tyox5tfn7ghi"},{"post_id":"ckw4ars4z000ftyox38vwewhz","tag_id":"ckw4ars6l002ytyox7gyh8y7p","_id":"ckw4ars6o0039tyoxfdk20tn3"},{"post_id":"ckw4ars4z000ftyox38vwewhz","tag_id":"ckw4ars6m0034tyoxagojhafk","_id":"ckw4ars6p003ctyoxa5tnb4qo"},{"post_id":"ckw4ars52000gtyox0z0sakm7","tag_id":"ckw4ars6m0034tyoxagojhafk","_id":"ckw4ars6q003ftyox977sdv4v"},{"post_id":"ckw4ars52000gtyox0z0sakm7","tag_id":"ckw4ars6o003atyox9lov7w1n","_id":"ckw4ars6q003gtyoxg2pn23zv"},{"post_id":"ckw4ars52000gtyox0z0sakm7","tag_id":"ckw4ars6p003dtyoxaar19ye4","_id":"ckw4ars6r003ityox00q2827b"},{"post_id":"ckw4ars55000ktyoxbv8r5ubr","tag_id":"ckw4ars4n0005tyox2u573ih4","_id":"ckw4ars6r003jtyox81wb7x8c"},{"post_id":"ckw4ars55000ktyoxbv8r5ubr","tag_id":"ckw4ars6q003etyox2okrgzo9","_id":"ckw4ars6s003ltyoxfsj0hdr7"},{"post_id":"ckw4ars57000ntyoxgw4afik8","tag_id":"ckw4ars6q003htyox5zl4agtp","_id":"ckw4ars6s003mtyoxgzta586a"},{"post_id":"ckw4ars59000styoxf1lzawvd","tag_id":"ckw4ars4v000dtyoxh0ifebrc","_id":"ckw4ars6t003ptyox2c2q8vs8"},{"post_id":"ckw4ars59000styoxf1lzawvd","tag_id":"ckw4ars6r003ktyoxh8xn94d2","_id":"ckw4ars6t003qtyoxenci25sl"},{"post_id":"ckw4ars59000styoxf1lzawvd","tag_id":"ckw4ars6s003ntyoxhkr6h2or","_id":"ckw4ars6u003styoxgzrpfj5y"},{"post_id":"ckw4ars5b000ttyox7f45dqzl","tag_id":"ckw4ars4v000dtyoxh0ifebrc","_id":"ckw4ars6u003ttyoxffoaff65"},{"post_id":"ckw4ars5b000ttyox7f45dqzl","tag_id":"ckw4ars6t003otyoxg7n7emce","_id":"ckw4ars6u003vtyox1ovg1eqs"},{"post_id":"ckw4ars5d000xtyoxbmltarts","tag_id":"ckw4ars6t003rtyoxgehrbhsa","_id":"ckw4ars6w003ztyox3ei1e6bj"},{"post_id":"ckw4ars5d000xtyoxbmltarts","tag_id":"ckw4ars6u003utyoxf71w6z8u","_id":"ckw4ars6w0040tyoxbn72hxdv"},{"post_id":"ckw4ars5d000xtyoxbmltarts","tag_id":"ckw4ars6v003wtyoxgedn7d2j","_id":"ckw4ars6w0042tyox36jm6qy0"},{"post_id":"ckw4ars5d000xtyoxbmltarts","tag_id":"ckw4ars6v003xtyox8a4694pg","_id":"ckw4ars6x0043tyox14r65co1"},{"post_id":"ckw4ars5e000ztyox6xwk3w5i","tag_id":"ckw4ars4v000dtyoxh0ifebrc","_id":"ckw4ars6x0045tyox1plh3oec"},{"post_id":"ckw4ars5e000ztyox6xwk3w5i","tag_id":"ckw4ars6v003ytyox6a3h3h9z","_id":"ckw4ars6x0046tyox2i1zeltu"},{"post_id":"ckw4ars5g0012tyoxelus8eca","tag_id":"ckw4ars4v000dtyoxh0ifebrc","_id":"ckw4ars6y0048tyox893r8yw2"},{"post_id":"ckw4ars5g0012tyoxelus8eca","tag_id":"ckw4ars6w0041tyox7i5vfvby","_id":"ckw4ars6y0049tyoxduf6ha9k"},{"post_id":"ckw4ars5g0012tyoxelus8eca","tag_id":"ckw4ars6r003ktyoxh8xn94d2","_id":"ckw4ars6z004btyoxdj0o3vu1"},{"post_id":"ckw4ars5i0015tyoxbv2j8f3y","tag_id":"ckw4ars6y0047tyoxaglb8u7a","_id":"ckw4ars70004etyox77oebgcc"},{"post_id":"ckw4ars5i0015tyoxbv2j8f3y","tag_id":"ckw4ars6y004atyox9xt85ymg","_id":"ckw4ars70004ftyox4deub1ln"},{"post_id":"ckw4ars5i0015tyoxbv2j8f3y","tag_id":"ckw4ars6z004ctyox2cwu3twm","_id":"ckw4ars71004htyoxfb0m2168"},{"post_id":"ckw4ars5k0019tyoxesrvhcux","tag_id":"ckw4ars6z004dtyoxelead8kb","_id":"ckw4ars71004ityoxdtu18dr0"},{"post_id":"ckw4ars5k0019tyoxesrvhcux","tag_id":"ckw4ars4v000dtyoxh0ifebrc","_id":"ckw4ars72004ktyox84ce2v00"},{"post_id":"ckw4ars5m001dtyoxe0u2d1yi","tag_id":"ckw4ars4v000dtyoxh0ifebrc","_id":"ckw4ars72004ltyox0rl5an5d"},{"post_id":"ckw4ars5m001dtyoxe0u2d1yi","tag_id":"ckw4ars70004gtyoxht8kd4r0","_id":"ckw4ars73004ntyox5zon4jfn"},{"post_id":"ckw4ars5o001gtyox3famhqks","tag_id":"ckw4ars71004jtyoxcvl7bru8","_id":"ckw4ars75004styoxastzh4u5"},{"post_id":"ckw4ars5o001gtyox3famhqks","tag_id":"ckw4ars72004mtyoxdorcd90s","_id":"ckw4ars75004ttyox74ov4p2p"},{"post_id":"ckw4ars5o001gtyox3famhqks","tag_id":"ckw4ars73004otyox8xab3v4f","_id":"ckw4ars75004vtyox4drh2cod"},{"post_id":"ckw4ars5o001gtyox3famhqks","tag_id":"ckw4ars4v000dtyoxh0ifebrc","_id":"ckw4ars76004wtyox3hgu83dh"},{"post_id":"ckw4ars5o001gtyox3famhqks","tag_id":"ckw4ars73004ptyoxcy903h7i","_id":"ckw4ars76004ytyox53b0h0b8"},{"post_id":"ckw4ars5o001gtyox3famhqks","tag_id":"ckw4ars74004qtyoxengf0pxa","_id":"ckw4ars76004ztyoxgeomgo2s"},{"post_id":"ckw4ars5t001ityoxezkta5vd","tag_id":"ckw4ars4v000dtyoxh0ifebrc","_id":"ckw4ars770051tyox0dkn1q8r"},{"post_id":"ckw4ars5t001ityoxezkta5vd","tag_id":"ckw4ars74004rtyox6y6ne24c","_id":"ckw4ars770052tyox251e05j1"},{"post_id":"ckw4ars5v001ktyox1ikcc84l","tag_id":"ckw4ars4v000dtyoxh0ifebrc","_id":"ckw4ars770053tyoxhvx22jxl"},{"post_id":"ckw4ars5v001ktyox1ikcc84l","tag_id":"ckw4ars75004utyoxf50e543s","_id":"ckw4ars780055tyox8sc0ebcn"},{"post_id":"ckw4ars5x001ntyox5f7p6bgo","tag_id":"ckw4ars76004xtyoxg88g6ct6","_id":"ckw4ars780056tyox5n8z1nwe"},{"post_id":"ckw4ars5x001ntyox5f7p6bgo","tag_id":"ckw4ars4v000dtyoxh0ifebrc","_id":"ckw4ars790058tyox93pfhzqb"},{"post_id":"ckw4ars5x001ntyox5f7p6bgo","tag_id":"ckw4ars760050tyoxf8vl3odd","_id":"ckw4ars790059tyox1eml3v84"},{"post_id":"ckw4ars5z001otyox0f402ntr","tag_id":"ckw4ars4v000dtyoxh0ifebrc","_id":"ckw4ars7a005btyox3k9ub7kk"},{"post_id":"ckw4ars5z001otyox0f402ntr","tag_id":"ckw4ars770054tyox2gc4644m","_id":"ckw4ars7a005ctyox2x1hbigx"},{"post_id":"ckw4ars61001styox67hxbxzl","tag_id":"ckw4ars4v000dtyoxh0ifebrc","_id":"ckw4ars7a005etyoxfk53e7jh"},{"post_id":"ckw4ars61001styox67hxbxzl","tag_id":"ckw4ars780057tyox48b5gmq0","_id":"ckw4ars7b005ftyoxacjw020e"},{"post_id":"ckw4ars63001vtyoxaavu94ji","tag_id":"ckw4ars79005atyox7n7w19mv","_id":"ckw4ars7b005htyoxhvl54s6s"},{"post_id":"ckw4ars63001vtyoxaavu94ji","tag_id":"ckw4ars7a005dtyoxbown0w2h","_id":"ckw4ars7b005ityoxf2839v95"},{"post_id":"ckw4ars65001ztyox82gvgaar","tag_id":"ckw4ars7b005gtyoxcl2vgckn","_id":"ckw4ars7e005mtyox8d6j9twq"},{"post_id":"ckw4ars65001ztyox82gvgaar","tag_id":"ckw4ars7c005jtyox1iemgij4","_id":"ckw4ars7e005ntyoxhkn4h3xh"},{"post_id":"ckw4ars65001ztyox82gvgaar","tag_id":"ckw4ars7c005ktyoxfx0rbrke","_id":"ckw4ars7g005ptyoxfphra629"},{"post_id":"ckw4ars680023tyoxb1q07bcl","tag_id":"ckw4ars6w0041tyox7i5vfvby","_id":"ckw4ars7g005qtyox1kes68zm"},{"post_id":"ckw4ars6a0027tyox9t1175i1","tag_id":"ckw4ars4v000dtyoxh0ifebrc","_id":"ckw4ars7i005ttyox93v76t80"},{"post_id":"ckw4ars6a0027tyox9t1175i1","tag_id":"ckw4ars7e005otyox2blx5ygb","_id":"ckw4ars7k005utyoxhhe8dt01"},{"post_id":"ckw4ars6a0027tyox9t1175i1","tag_id":"ckw4ars7g005rtyox6err0icg","_id":"ckw4ars7k005vtyoxbtl5gcr4"},{"post_id":"ckw4ars6c002atyox4n1k4byx","tag_id":"ckw4ars4v000dtyoxh0ifebrc","_id":"ckw4ars7k005wtyoxhsdv4s2b"},{"post_id":"ckw4ars6c002atyox4n1k4byx","tag_id":"ckw4ars7h005styoxh8chbxl2","_id":"ckw4ars7k005xtyox6uhu7u8z"}],"Tag":[{"name":"Linux","_id":"ckw4ars4n0005tyox2u573ih4"},{"name":"Python","_id":"ckw4ars4v000dtyoxh0ifebrc"},{"name":"CentOS7","_id":"ckw4ars54000jtyox7q0cc1es"},{"name":"定时任务","_id":"ckw4ars59000rtyoxbcqicmlh"},{"name":"Crontabs","_id":"ckw4ars5d000wtyox76a4f22d"},{"name":"软件","_id":"ckw4ars5h0013tyoxfjns6myw"},{"name":"Yum","_id":"ckw4ars5s001htyox9vgf3fie"},{"name":"FFmpeg","_id":"ckw4ars5x001mtyox5dcc4mdy"},{"name":"Chrome","_id":"ckw4ars61001rtyox3a8oa2y5"},{"name":"Selenium","_id":"ckw4ars6b0029tyox02ynh6l8"},{"name":"Hexo","_id":"ckw4ars6f002ftyox5dw28we0"},{"name":"备份","_id":"ckw4ars6h002ltyox11t7hm0j"},{"name":"java","_id":"ckw4ars6j002rtyox8sf39j4q"},{"name":"Tools","_id":"ckw4ars6l002ytyox7gyh8y7p"},{"name":"IDEA","_id":"ckw4ars6m0034tyoxagojhafk"},{"name":"破解","_id":"ckw4ars6o003atyox9lov7w1n"},{"name":"教程","_id":"ckw4ars6p003dtyoxaar19ye4"},{"name":"环境变量","_id":"ckw4ars6q003etyox2okrgzo9"},{"name":"-MacOS","_id":"ckw4ars6q003htyox5zl4agtp"},{"name":"笔记","_id":"ckw4ars6r003ktyoxh8xn94d2"},{"name":"Scrapy","_id":"ckw4ars6s003ntyoxhkr6h2or"},{"name":"Requests","_id":"ckw4ars6t003otyoxg7n7emce"},{"name":"PyCharm","_id":"ckw4ars6t003rtyoxgehrbhsa"},{"name":"工具","_id":"ckw4ars6u003utyoxf71w6z8u"},{"name":"快捷键","_id":"ckw4ars6v003wtyoxgedn7d2j"},{"name":"MacOS","_id":"ckw4ars6v003xtyox8a4694pg"},{"name":"随机数","_id":"ckw4ars6v003ytyox6a3h3h9z"},{"name":"正则表达式","_id":"ckw4ars6w0041tyox7i5vfvby"},{"name":"python","_id":"ckw4ars6y0047tyoxaglb8u7a"},{"name":"编码","_id":"ckw4ars6y004atyox9xt85ymg"},{"name":"ascii","_id":"ckw4ars6z004ctyox2cwu3twm"},{"name":"URL编码解码","_id":"ckw4ars6z004dtyoxelead8kb"},{"name":"platform","_id":"ckw4ars70004gtyoxht8kd4r0"},{"name":"图像处理","_id":"ckw4ars71004jtyoxcvl7bru8"},{"name":"PIL从入门到精通","_id":"ckw4ars72004mtyoxdorcd90s"},{"name":"PIL","_id":"ckw4ars73004otyox8xab3v4f"},{"name":"格式转换","_id":"ckw4ars73004ptyoxcy903h7i"},{"name":"模式转换","_id":"ckw4ars74004qtyoxengf0pxa"},{"name":"文件管理","_id":"ckw4ars74004rtyox6y6ne24c"},{"name":"文件处理","_id":"ckw4ars75004utyoxf50e543s"},{"name":"音乐","_id":"ckw4ars76004xtyoxg88g6ct6"},{"name":"Music","_id":"ckw4ars760050tyoxf8vl3odd"},{"name":"unicode","_id":"ckw4ars770054tyox2gc4644m"},{"name":"面向对象","_id":"ckw4ars780057tyox48b5gmq0"},{"name":"电子书","_id":"ckw4ars79005atyox7n7w19mv"},{"name":"网站推荐","_id":"ckw4ars7a005dtyoxbown0w2h"},{"name":"宝塔面板","_id":"ckw4ars7b005gtyoxcl2vgckn"},{"name":"VPS","_id":"ckw4ars7c005jtyox1iemgij4"},{"name":"服务器","_id":"ckw4ars7c005ktyoxfx0rbrke"},{"name":"eyeD3","_id":"ckw4ars7e005otyox2blx5ygb"},{"name":"Mp3","_id":"ckw4ars7g005rtyox6err0icg"},{"name":"MarkDown","_id":"ckw4ars7h005styoxh8chbxl2"}]}}